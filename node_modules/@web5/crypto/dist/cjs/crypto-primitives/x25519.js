"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.X25519 = void 0;
var ed25519_1 = require("@noble/curves/ed25519");
/**
 * The `X25519` class provides an interface for X25519 (Curve25519) key pair
 * generation, public key computation, and shared secret computation. The class
 * uses the '@noble/curves/ed25519' package for the cryptographic operations.
 *
 * All methods of this class are asynchronous and return Promises. They all use
 * the Uint8Array type for keys and data, providing a consistent
 * interface for working with binary data.
 *
 * Example usage:
 *
 * ```ts
 * const ownKeyPair = await X25519.generateKeyPair();
 * const otherPartyKeyPair = await X25519.generateKeyPair();
 * const sharedSecret = await X25519.sharedSecret({
 *   privateKey : ownKeyPair.privateKey,
 *   publicKey  : otherPartyKeyPair.publicKey
 * });
 * ```
 */
var X25519 = /** @class */ (function () {
    function X25519() {
    }
    /**
     * Generates a key pair for X25519 (private and public key).
     *
     * @returns A Promise that resolves to a BytesKeyPair object.
     */
    X25519.generateKeyPair = function () {
        return __awaiter(this, void 0, void 0, function () {
            var privateKey, publicKey, keyPair;
            return __generator(this, function (_a) {
                privateKey = ed25519_1.x25519.utils.randomPrivateKey();
                publicKey = ed25519_1.x25519.getPublicKey(privateKey);
                keyPair = {
                    privateKey: privateKey,
                    publicKey: publicKey
                };
                return [2 /*return*/, keyPair];
            });
        });
    };
    /**
     * Computes a public key given a private key.
     *
     * @param options - The options for the public key computation operation.
     * @param options.privateKey - The private key used to compute the public key.
     * @returns A Promise that resolves to the computed public key as a Uint8Array.
     */
    X25519.getPublicKey = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var privateKey, publicKey;
            return __generator(this, function (_a) {
                privateKey = options.privateKey;
                publicKey = ed25519_1.x25519.getPublicKey(privateKey);
                return [2 /*return*/, publicKey];
            });
        });
    };
    /**
     * Generates a RFC6090 ECDH shared secret given the private key of one party
     * and the public key of another party.
     *
     * @param options - The options for the shared secret computation operation.
     * @param options.privateKey - The private key of one party.
     * @param options.publicKey - The public key of the other party.
     * @returns A Promise that resolves to the computed shared secret as a Uint8Array.
     */
    X25519.sharedSecret = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var privateKey, publicKey, sharedSecret;
            return __generator(this, function (_a) {
                privateKey = options.privateKey, publicKey = options.publicKey;
                sharedSecret = ed25519_1.x25519.getSharedSecret(privateKey, publicKey);
                return [2 /*return*/, sharedSecret];
            });
        });
    };
    /**
     * Note that this method is currently unimplemented because the @noble/curves
     * library does not yet provide a mechanism for checking whether a point
     * belongs to the Curve25519. Therefore, it currently throws an error whenever
     * it is called.
     *
     * @param options - The options for the key validation operation.
     * @param options.key - The key to validate.
     * @throws {Error} If the method is called because it is not yet implemented.
     * @returns A Promise that resolves to void.
     */
    X25519.validatePublicKey = function (_options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                // TODO: Implement once/if @noble/curves library implements checking
                // proper points on the Montgomery curve.
                throw new Error("Not implemented: 'validatePublicKey()'");
            });
        });
    };
    return X25519;
}());
exports.X25519 = X25519;
