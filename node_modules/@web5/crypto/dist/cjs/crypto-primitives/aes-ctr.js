"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AesCtr = void 0;
var crypto_1 = require("@noble/hashes/crypto");
/**
 * The `AesCtr` class provides an interface for AES-CTR
 * (Advanced Encryption Standard - Counter) encryption and decryption
 * operations. The class uses the Web Crypto API for cryptographic operations.
 *
 * All methods of this class are asynchronous and return Promises. They all
 * use the Uint8Array type for keys and data, providing a consistent
 * interface for working with binary data.
 *
 * Example usage:
 *
 * ```ts
 * const key = await AesCtr.generateKey({ length: 128 });
 * const counter = new Uint8Array(16); // initialize a 16-byte counter
 * const message = new TextEncoder().encode('Hello, world!');
 * const ciphertext = await AesCtr.encrypt({
 *   counter,
 *   data: message,
 *   key,
 *   length: 128 // counter length in bits
 * });
 * const plaintext = await AesCtr.decrypt({
 *   counter,
 *   data: ciphertext,
 *   key,
 *   length: 128 // counter length in bits
 * });
 * console.log(new TextDecoder().decode(plaintext)); // 'Hello, world!'
 * ```
 */
var AesCtr = /** @class */ (function () {
    function AesCtr() {
    }
    /**
     * Decrypts the provided data using AES-CTR.
     *
     * @param options - The options for the decryption operation.
     * @param options.counter - The initial value of the counter block.
     * @param options.data - The data to decrypt.
     * @param options.key - The key to use for decryption.
     * @param options.length - The length of the counter block in bits.
     * @returns A Promise that resolves to the decrypted data as a Uint8Array.
     */
    AesCtr.decrypt = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var counter, data, key, length, webCryptoKey, plaintextBuffer, plaintext;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        counter = options.counter, data = options.data, key = options.key, length = options.length;
                        return [4 /*yield*/, this.importKey(key)];
                    case 1:
                        webCryptoKey = _a.sent();
                        return [4 /*yield*/, crypto_1.crypto.subtle.decrypt({ name: 'AES-CTR', counter: counter, length: length }, webCryptoKey, data)];
                    case 2:
                        plaintextBuffer = _a.sent();
                        plaintext = new Uint8Array(plaintextBuffer);
                        return [2 /*return*/, plaintext];
                }
            });
        });
    };
    /**
     * Encrypts the provided data using AES-CTR.
     *
     * @param options - The options for the encryption operation.
     * @param options.counter - The initial value of the counter block.
     * @param options.data - The data to encrypt.
     * @param options.key - The key to use for encryption.
     * @param options.length - The length of the counter block in bits.
     * @returns A Promise that resolves to the encrypted data as a Uint8Array.
     */
    AesCtr.encrypt = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var counter, data, key, length, webCryptoKey, ciphertextBuffer, ciphertext;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        counter = options.counter, data = options.data, key = options.key, length = options.length;
                        return [4 /*yield*/, this.importKey(key)];
                    case 1:
                        webCryptoKey = _a.sent();
                        return [4 /*yield*/, crypto_1.crypto.subtle.encrypt({ name: 'AES-CTR', counter: counter, length: length }, webCryptoKey, data)];
                    case 2:
                        ciphertextBuffer = _a.sent();
                        ciphertext = new Uint8Array(ciphertextBuffer);
                        return [2 /*return*/, ciphertext];
                }
            });
        });
    };
    /**
     * Generates an AES key of a given length.
     *
     * @param length - The length of the key in bits.
     * @returns A Promise that resolves to the generated key as a Uint8Array.
     */
    AesCtr.generateKey = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var length, lengthInBytes, secretKey;
            return __generator(this, function (_a) {
                length = options.length;
                lengthInBytes = length / 8;
                secretKey = crypto_1.crypto.getRandomValues(new Uint8Array(lengthInBytes));
                return [2 /*return*/, secretKey];
            });
        });
    };
    /**
     * A private method to import a raw key for use with the Web Crypto API.
     *
     * @param key - The raw key material.
     * @returns A Promise that resolves to a CryptoKey.
     */
    AesCtr.importKey = function (key) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, crypto_1.crypto.subtle.importKey('raw', key.buffer, { name: 'AES-CTR', length: key.byteLength * 8 }, true, ['encrypt', 'decrypt'])];
            });
        });
    };
    return AesCtr;
}());
exports.AesCtr = AesCtr;
