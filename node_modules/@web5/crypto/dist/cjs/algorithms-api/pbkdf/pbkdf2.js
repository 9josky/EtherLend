"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BasePbkdf2Algorithm = void 0;
var errors_js_1 = require("../errors.js");
var crypto_algorithm_js_1 = require("../crypto-algorithm.js");
var utils_js_1 = require("../../utils.js");
var common_1 = require("@web5/common");
var BasePbkdf2Algorithm = /** @class */ (function (_super) {
    __extends(BasePbkdf2Algorithm, _super);
    function BasePbkdf2Algorithm() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.name = 'PBKDF2';
        _this.keyUsages = ['deriveBits', 'deriveKey'];
        return _this;
    }
    BasePbkdf2Algorithm.prototype.checkAlgorithmOptions = function (options) {
        var algorithm = options.algorithm, baseKey = options.baseKey;
        // Algorithm specified in the operation must match the algorithm implementation processing the operation.
        this.checkAlgorithmName({ algorithmName: algorithm.name });
        // The algorithm object must contain a hash property.
        (0, utils_js_1.checkRequiredProperty)({ property: 'hash', inObject: algorithm });
        // The hash algorithm specified must be supported by the algorithm implementation processing the operation.
        (0, utils_js_1.checkValidProperty)({ property: algorithm.hash, allowedProperties: this.hashAlgorithms });
        // The algorithm object must contain a iterations property.
        (0, utils_js_1.checkRequiredProperty)({ property: 'iterations', inObject: algorithm });
        // The iterations value must a number.
        if (!((0, common_1.universalTypeOf)(algorithm.iterations) === 'Number')) {
            throw new TypeError("Algorithm 'iterations' is not of type: Number.");
        }
        // The iterations value must be greater than 0.
        if (algorithm.iterations < 1) {
            throw new errors_js_1.OperationError("Algorithm 'iterations' must be > 0.");
        }
        // The algorithm object must contain a salt property.
        (0, utils_js_1.checkRequiredProperty)({ property: 'salt', inObject: algorithm });
        // The salt must a Uint8Array.
        if (!((0, common_1.universalTypeOf)(algorithm.salt) === 'Uint8Array')) {
            throw new TypeError("Algorithm 'salt' is not of type: Uint8Array.");
        }
        // The options object must contain a baseKey property.
        (0, utils_js_1.checkRequiredProperty)({ property: 'baseKey', inObject: options });
        // The baseKey object must be a CryptoKey.
        this.checkCryptoKey({ key: baseKey });
        // The baseKey algorithm must match the algorithm implementation processing the operation.
        this.checkKeyAlgorithm({ keyAlgorithmName: baseKey.algorithm.name });
    };
    BasePbkdf2Algorithm.prototype.checkImportKey = function (options) {
        var algorithm = options.algorithm, format = options.format, extractable = options.extractable, keyUsages = options.keyUsages;
        // Algorithm specified in the operation must match the algorithm implementation processing the operation.
        this.checkAlgorithmName({ algorithmName: algorithm.name });
        // The format specified must be 'raw'.
        if (format !== 'raw') {
            throw new SyntaxError("Format '".concat(format, "' not supported. Only 'raw' is supported."));
        }
        // The extractable value specified must be false.
        if (extractable !== false) {
            throw new SyntaxError("Extractable '".concat(extractable, "' not supported. Only 'false' is supported."));
        }
        // The key usages specified must be permitted by the algorithm implementation processing the operation.
        this.checkKeyUsages({ keyUsages: keyUsages, allowedKeyUsages: this.keyUsages });
    };
    BasePbkdf2Algorithm.prototype.decrypt = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                throw new errors_js_1.InvalidAccessError("Requested operation 'decrypt' is not valid for ".concat(this.name, " keys."));
            });
        });
    };
    BasePbkdf2Algorithm.prototype.encrypt = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                throw new errors_js_1.InvalidAccessError("Requested operation 'encrypt' is not valid for ".concat(this.name, " keys."));
            });
        });
    };
    BasePbkdf2Algorithm.prototype.generateKey = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                throw new errors_js_1.InvalidAccessError("Requested operation 'generateKey' is not valid for ".concat(this.name, " keys."));
            });
        });
    };
    BasePbkdf2Algorithm.prototype.sign = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                throw new errors_js_1.InvalidAccessError("Requested operation 'sign' is not valid for ".concat(this.name, " keys."));
            });
        });
    };
    BasePbkdf2Algorithm.prototype.verify = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                throw new errors_js_1.InvalidAccessError("Requested operation 'verify' is not valid for ".concat(this.name, " keys."));
            });
        });
    };
    return BasePbkdf2Algorithm;
}(crypto_algorithm_js_1.CryptoAlgorithm));
exports.BasePbkdf2Algorithm = BasePbkdf2Algorithm;
