import type { Web5Agent } from '@web5/agent';
import type { Readable } from 'readable-stream';
import type { RecordsWriteDescriptor, RecordsWriteMessage } from '@tbd54566975/dwn-sdk-js';
import { DwnInterfaceName, DwnMethodName } from '@tbd54566975/dwn-sdk-js';
import type { RecordsDeleteResponse } from './dwn-api.js';
export type RecordOptions = RecordsWriteMessage & {
    author: string;
    target: string;
    encodedData?: string | Blob;
    data?: Readable | ReadableStream;
};
export type RecordModel = RecordsWriteDescriptor & Omit<RecordsWriteMessage, 'descriptor' | 'recordId'> & {
    author: string;
    recordId?: string;
    target: string;
};
export type RecordUpdateOptions = {
    data?: unknown;
    dataCid?: RecordsWriteDescriptor['dataCid'];
    dataSize?: RecordsWriteDescriptor['dataSize'];
    dateModified?: RecordsWriteDescriptor['messageTimestamp'];
    datePublished?: RecordsWriteDescriptor['datePublished'];
    published?: RecordsWriteDescriptor['published'];
};
/**
   * TODO: Document class.
   *
   * Note: The `messageTimestamp` of the most recent RecordsWrite message is
   *       logically equivalent to the date/time at which a Record was most
   *       recently modified.  Since this Record class implementation is
   *       intended to simplify the developer experience of working with
   *       logical records (and not individual DWN messages) the
   *       `messageTimestamp` is mapped to `dateModified`.
   */
export declare class Record implements RecordModel {
    author: string;
    target: string;
    isDeleted: boolean;
    private _agent;
    private _attestation?;
    private _contextId?;
    private _descriptor;
    private _encodedData?;
    private _encryption?;
    private _readableStream?;
    private _recordId;
    get attestation(): RecordsWriteMessage['attestation'];
    get contextId(): string;
    get dataFormat(): string;
    get dateCreated(): string;
    get encryption(): RecordsWriteMessage['encryption'];
    get id(): string;
    get interface(): DwnInterfaceName.Records;
    get method(): DwnMethodName.Write;
    get parentId(): string;
    get protocol(): string;
    get protocolPath(): string;
    get recipient(): string;
    get schema(): string;
    get dataCid(): string;
    get dataSize(): number;
    get dateModified(): string;
    get datePublished(): string;
    get messageTimestamp(): string;
    get published(): boolean;
    constructor(agent: Web5Agent, options: RecordOptions);
    /**
     * TODO: Document method.
     */
    get data(): {
        blob(): Promise<Blob>;
        json(): Promise<any>;
        text(): Promise<any>;
        stream(): Promise<Readable>;
        then(...callbacks: any[]): any;
        catch(callback: any): any;
    };
    /**
     * TODO: Document method.
     */
    delete(): Promise<RecordsDeleteResponse>;
    /**
     * TODO: Document method.
     */
    send(target: string): Promise<any>;
    /**
     * TODO: Document method.
     *
     * Called by `JSON.stringify(...)` automatically.
     */
    toJSON(): RecordModel;
    /**
     * TODO: Document method.
     *
     * Called automatically in string concatenation, String() type conversion, and template literals.
     */
    toString(): string;
    /**
     * TODO: Document method.
     */
    update(options?: RecordUpdateOptions): Promise<{
        status: {
            code: number;
            detail: string;
        };
    }>;
    /**
     * TODO: Document method.
     */
    private setDeletedStatus;
    /**
     * TODO: Document method.
     */
    private static isReadableWebStream;
    /**
     * TODO: Document method.
     */
    private static verifyPermittedMutation;
}
//# sourceMappingURL=record.d.ts.map