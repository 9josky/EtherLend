import type { Web5Agent } from '@web5/agent';
import type { Readable } from 'readable-stream';
import type { RecordsWriteDescriptor, RecordsWriteMessage } from '@tbd54566975/dwn-sdk-js';
import { DwnInterfaceName, DwnMethodName } from '@tbd54566975/dwn-sdk-js';
import type { RecordsDeleteResponse } from './dwn-api.js';
/**
 * Options that are passed to Record constructor.
 *
 * @beta
 */
export type RecordOptions = RecordsWriteMessage & {
    author: string;
    target: string;
    encodedData?: string | Blob;
    data?: Readable | ReadableStream;
};
/**
 * Represents the record data model, without the auxiliary properties such as
 * the `descriptor` and the `authorization`
 *
 * @beta
 */
export type RecordModel = RecordsWriteDescriptor & Omit<RecordsWriteMessage, 'descriptor' | 'recordId' | 'authorization'> & {
    author: string;
    recordId?: string;
    target: string;
};
/**
 * Options that are passed to update the record on the DWN
 *
 * @beta
 */
export type RecordUpdateOptions = {
    data?: unknown;
    dataCid?: RecordsWriteDescriptor['dataCid'];
    dataSize?: RecordsWriteDescriptor['dataSize'];
    dateModified?: RecordsWriteDescriptor['messageTimestamp'];
    datePublished?: RecordsWriteDescriptor['datePublished'];
    published?: RecordsWriteDescriptor['published'];
};
/**
 * Record wrapper class with convenience methods to send, update,
 * and delete itself, aside from manipulating and reading the record data.
 *
 * Note: The `messageTimestamp` of the most recent RecordsWrite message is
 *       logically equivalent to the date/time at which a Record was most
 *       recently modified.  Since this Record class implementation is
 *       intended to simplify the developer experience of working with
 *       logical records (and not individual DWN messages) the
 *       `messageTimestamp` is mapped to `dateModified`.
 *
 * @beta
 */
export declare class Record implements RecordModel {
    /** Record's author */
    author: string;
    /** Record's target (for sent records) */
    target: string;
    /** Record deleted status */
    isDeleted: boolean;
    private _agent;
    private _attestation?;
    private _contextId?;
    private _descriptor;
    private _encodedData?;
    private _encryption?;
    private _readableStream?;
    private _recordId;
    /** Record's signatures attestation */
    get attestation(): RecordsWriteMessage['attestation'];
    /** Record's context ID */
    get contextId(): string;
    /** Record's data format */
    get dataFormat(): string;
    /** Record's creation date */
    get dateCreated(): string;
    /** Record's encryption */
    get encryption(): RecordsWriteMessage['encryption'];
    /** Record's ID */
    get id(): string;
    /** Interface is always `Records` */
    get interface(): DwnInterfaceName.Records;
    /** Method is always `Write` */
    get method(): DwnMethodName.Write;
    /** Record's parent ID */
    get parentId(): string;
    /** Record's protocol */
    get protocol(): string;
    /** Record's protocol path */
    get protocolPath(): string;
    /** Record's recipient */
    get recipient(): string;
    /** Record's schema */
    get schema(): string;
    /** Record's CID */
    get dataCid(): string;
    /** Record's data size */
    get dataSize(): number;
    /** Record's modified date */
    get dateModified(): string;
    /** Record's published date */
    get datePublished(): string;
    /** Record's published status */
    get messageTimestamp(): string;
    /** Record's published status (true/false) */
    get published(): boolean;
    constructor(agent: Web5Agent, options: RecordOptions);
    /**
     * Returns the data of the current record.
     * If the record data is not available, it attempts to fetch the data from the DWN.
     * @returns a data stream with convenience methods such as `blob()`, `json()`, `text()`, and `stream()`, similar to the fetch API response
     * @throws `Error` if the record has already been deleted.
     *
     */
    get data(): {
        blob(): Promise<Blob>;
        json(): Promise<any>;
        text(): Promise<any>;
        stream(): Promise<Readable>;
        then(...callbacks: any[]): any;
        catch(callback: any): any;
    };
    /**
     * Delete the current record from the DWN.
     * @returns the status of the delete request
     * @throws `Error` if the record has already been deleted.
     */
    delete(): Promise<RecordsDeleteResponse>;
    /**
     * Send the current record to a remote DWN by specifying their DID
     * (vs waiting for the regular DWN sync)
     * @param target - the DID to send the record to
     * @returns the status of the send record request
     * @throws `Error` if the record has already been deleted.
     */
    send(target: string): Promise<any>;
    /**
     * Returns a JSON representation of the Record instance.
     * It's called by `JSON.stringify(...)` automatically.
     */
    toJSON(): RecordModel;
    /**
     * Convenience method to return the string representation of the Record instance.
     * Called automatically in string concatenation, String() type conversion, and template literals.
     */
    toString(): string;
    /**
     * Update the current record on the DWN.
     * @param options - options to update the record, including the new data
     * @returns the status of the update request
     * @throws `Error` if the record has already been deleted.
     */
    update(options?: RecordUpdateOptions): Promise<{
        status: {
            code: number;
            detail: string;
        };
    }>;
    /**
     * TODO: Document method.
     */
    private setDeletedStatus;
    /**
     * TODO: Document method.
     */
    private static isReadableWebStream;
    /**
     * TODO: Document method.
     */
    private static verifyPermittedMutation;
}
//# sourceMappingURL=record.d.ts.map