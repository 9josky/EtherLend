import type { Web5Agent } from '@web5/agent';
import type { UnionMessageReply, RecordsReadOptions, RecordsQueryOptions, RecordsWriteOptions, RecordsDeleteOptions, ProtocolsQueryOptions, ProtocolsConfigureOptions, ProtocolsConfigureDescriptor } from '@tbd54566975/dwn-sdk-js';
import { Record } from './record.js';
import { Protocol } from './protocol.js';
export type ProtocolsConfigureRequest = {
    message: Omit<ProtocolsConfigureOptions, 'authorizationSignatureInput'>;
};
export type ProtocolsConfigureResponse = {
    status: UnionMessageReply['status'];
    protocol?: Protocol;
};
export type ProtocolsQueryReplyEntry = {
    descriptor: ProtocolsConfigureDescriptor;
};
export type ProtocolsQueryRequest = {
    from?: string;
    message: Omit<ProtocolsQueryOptions, 'authorizationSignatureInput'>;
};
export type ProtocolsQueryResponse = {
    protocols: Protocol[];
    status: UnionMessageReply['status'];
};
export type RecordsCreateRequest = RecordsWriteRequest;
export type RecordsCreateResponse = RecordsWriteResponse;
export type RecordsCreateFromRequest = {
    author: string;
    data: unknown;
    message?: Omit<RecordsWriteOptions, 'authorizationSignatureInput'>;
    record: Record;
};
export type RecordsDeleteRequest = {
    from?: string;
    message: Omit<RecordsDeleteOptions, 'authorizationSignatureInput'>;
};
export type RecordsDeleteResponse = {
    status: UnionMessageReply['status'];
};
export type RecordsQueryRequest = {
    /** The from property indicates the DID to query from and return results. */
    from?: string;
    message: Omit<RecordsQueryOptions, 'authorizationSignatureInput'>;
};
export type RecordsQueryResponse = {
    status: UnionMessageReply['status'];
    records?: Record[];
};
export type RecordsReadRequest = {
    /** The from property indicates the DID to read from and return results fro. */
    from?: string;
    message: Omit<RecordsReadOptions, 'authorizationSignatureInput'>;
};
export type RecordsReadResponse = {
    status: UnionMessageReply['status'];
    record: Record;
};
export type RecordsWriteRequest = {
    data: unknown;
    message?: Omit<Partial<RecordsWriteOptions>, 'authorizationSignatureInput'>;
    store?: boolean;
};
export type RecordsWriteResponse = {
    status: UnionMessageReply['status'];
    record?: Record;
};
/**
 * TODO: Document class.
 */
export declare class DwnApi {
    private agent;
    private connectedDid;
    constructor(options: {
        agent: Web5Agent;
        connectedDid: string;
    });
    /**
   * TODO: Document namespace.
   */
    get protocols(): {
        /**
         * TODO: Document method.
         */
        configure: (request: ProtocolsConfigureRequest) => Promise<ProtocolsConfigureResponse>;
        /**
         * TODO: Document method.
         */
        query: (request: ProtocolsQueryRequest) => Promise<ProtocolsQueryResponse>;
    };
    /**
     * TODO: Document namespace.
     */
    get records(): {
        /**
         * TODO: Document method.
         */
        create: (request: RecordsCreateRequest) => Promise<RecordsCreateResponse>;
        /**
         * TODO: Document method.
         */
        createFrom: (request: RecordsCreateFromRequest) => Promise<RecordsWriteResponse>;
        /**
         * TODO: Document method.
         */
        delete: (request: RecordsDeleteRequest) => Promise<RecordsDeleteResponse>;
        /**
         * TODO: Document method.
         */
        query: (request: RecordsQueryRequest) => Promise<RecordsQueryResponse>;
        /**
         * TODO: Document method.
         */
        read: (request: RecordsReadRequest) => Promise<RecordsReadResponse>;
        /**
         * TODO: Document method.
         *
         * As a convenience, the Record instance returned will cache a copy of the data if the
         * data size, in bytes, is less than the DWN 'max data size allowed to be encoded'
         * parameter of 10KB. This is done to maintain consistency with other DWN methods,
         * like RecordsQuery, that include relatively small data payloads when returning
         * RecordsWrite message properties. Regardless of data size, methods such as
         * `record.data.stream()` will return the data when called even if it requires fetching
         * from the DWN datastore.
         */
        write: (request: RecordsWriteRequest) => Promise<RecordsWriteResponse>;
    };
}
//# sourceMappingURL=dwn-api.d.ts.map