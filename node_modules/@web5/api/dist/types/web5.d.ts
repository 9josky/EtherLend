import type { AppDataStore, Web5Agent } from '@web5/agent';
import { VcApi } from './vc-api.js';
import { DwnApi } from './dwn-api.js';
import { DidApi } from './did-api.js';
/**
 * Override defaults configured during the technical preview phase.
 */
export type TechPreviewOptions = {
    dwnEndpoints?: string[];
};
/**
 * Optional overrides that can be provided when calling {@link Web5.connect}.
 */
export type Web5ConnectOptions = {
    /** Provide a {@link Web5Agent} implementation. Defaults to creating a local
     * {@link Web5UserAgent} if one isn't provided */
    agent?: Web5Agent;
    /** Provide an instance of a {@link AppDataStore} implementation. Defaults to
     * a LevelDB-backed store with an insecure, static unlock passphrase if one
     * isn't provided. To allow the app user to enter a secure passphrase of
     * their choosing, provide an initialized {@link AppDataStore} instance. */
    appData?: AppDataStore;
    connectedDid?: string;
    /** Enable synchronization of DWN records between local and remote DWNs.
     * Sync defaults to running every 2 minutes and can be set to any value accepted by `ms()`.
     * To disable sync set to 'off'. */
    sync?: string;
    /** Override defaults configured during the technical preview phase.
     * See {@link TechPreviewOptions} for available options. */
    techPreview?: TechPreviewOptions;
};
/**
 * @see {@link Web5ConnectOptions}
 */
type Web5Options = {
    agent: Web5Agent;
    connectedDid: string;
};
export declare class Web5 {
    agent: Web5Agent;
    did: DidApi;
    dwn: DwnApi;
    vc: VcApi;
    private connectedDid;
    constructor(options: Web5Options);
    /**
     * Connects to a {@link Web5Agent}. Defaults to creating a local {@link Web5UserAgent}
     * if one isn't provided.
     *
     * @param options - optional overrides
     * @returns
     */
    static connect(options?: Web5ConnectOptions): Promise<{
        web5: Web5;
        did: string;
    }>;
}
export {};
//# sourceMappingURL=web5.d.ts.map