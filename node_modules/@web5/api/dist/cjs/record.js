"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Record = void 0;
var readable_web_to_node_stream_1 = require("readable-web-to-node-stream");
var dwn_sdk_js_1 = require("@tbd54566975/dwn-sdk-js");
var utils_js_1 = require("./utils.js");
/**
 * Record wrapper class with convenience methods to send, update,
 * and delete itself, aside from manipulating and reading the record data.
 *
 * Note: The `messageTimestamp` of the most recent RecordsWrite message is
 *       logically equivalent to the date/time at which a Record was most
 *       recently modified.  Since this Record class implementation is
 *       intended to simplify the developer experience of working with
 *       logical records (and not individual DWN messages) the
 *       `messageTimestamp` is mapped to `dateModified`.
 *
 * @beta
 */
var Record = /** @class */ (function () {
    function Record(agent, options) {
        var _a;
        /** Record deleted status */
        this.isDeleted = false;
        this._agent = agent;
        // Store the target and author DIDs that were used to create the message to use for subsequent reads, etc.
        this.author = options.author;
        this.target = options.target;
        // RecordsWriteMessage properties.
        this._attestation = options.attestation;
        this._contextId = options.contextId;
        this._descriptor = options.descriptor;
        this._encryption = options.encryption;
        this._recordId = options.recordId;
        // options.encodedData will either be a base64url encoded string (in the case of RecordsQuery)
        // OR a Blob in the case of a RecordsWrite.
        this._encodedData = (_a = options.encodedData) !== null && _a !== void 0 ? _a : null;
        // If the record was created from a RecordsRead reply then it will have a `data` property.
        if (options.data) {
            this._readableStream = Record.isReadableWebStream(options.data) ?
                new readable_web_to_node_stream_1.ReadableWebToNodeStream(options.data) : options.data;
        }
    }
    Object.defineProperty(Record.prototype, "attestation", {
        // Immutable DWN Record properties.
        /** Record's signatures attestation */
        get: function () { return this._attestation; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Record.prototype, "contextId", {
        /** Record's context ID */
        get: function () { return this._contextId; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Record.prototype, "dataFormat", {
        /** Record's data format */
        get: function () { return this._descriptor.dataFormat; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Record.prototype, "dateCreated", {
        /** Record's creation date */
        get: function () { return this._descriptor.dateCreated; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Record.prototype, "encryption", {
        /** Record's encryption */
        get: function () { return this._encryption; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Record.prototype, "id", {
        /** Record's ID */
        get: function () { return this._recordId; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Record.prototype, "interface", {
        /** Interface is always `Records` */
        get: function () { return this._descriptor.interface; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Record.prototype, "method", {
        /** Method is always `Write` */
        get: function () { return this._descriptor.method; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Record.prototype, "parentId", {
        /** Record's parent ID */
        get: function () { return this._descriptor.parentId; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Record.prototype, "protocol", {
        /** Record's protocol */
        get: function () { return this._descriptor.protocol; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Record.prototype, "protocolPath", {
        /** Record's protocol path */
        get: function () { return this._descriptor.protocolPath; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Record.prototype, "recipient", {
        /** Record's recipient */
        get: function () { return this._descriptor.recipient; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Record.prototype, "schema", {
        /** Record's schema */
        get: function () { return this._descriptor.schema; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Record.prototype, "dataCid", {
        // Mutable DWN Record properties.
        /** Record's CID */
        get: function () { return this._descriptor.dataCid; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Record.prototype, "dataSize", {
        /** Record's data size */
        get: function () { return this._descriptor.dataSize; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Record.prototype, "dateModified", {
        /** Record's modified date */
        get: function () { return this._descriptor.messageTimestamp; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Record.prototype, "datePublished", {
        /** Record's published date */
        get: function () { return this._descriptor.datePublished; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Record.prototype, "messageTimestamp", {
        /** Record's published status */
        get: function () { return this._descriptor.messageTimestamp; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Record.prototype, "published", {
        /** Record's published status (true/false) */
        get: function () { return this._descriptor.published; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Record.prototype, "data", {
        /**
         * Returns the data of the current record.
         * If the record data is not available, it attempts to fetch the data from the DWN.
         * @returns a data stream with convenience methods such as `blob()`, `json()`, `text()`, and `stream()`, similar to the fetch API response
         * @throws `Error` if the record has already been deleted.
         *
         */
        get: function () {
            if (this.isDeleted)
                throw new Error('Operation failed: Attempted to access `data` of a record that has already been deleted.');
            if (!this._encodedData && !this._readableStream) {
                // `encodedData` will be set if the Record was instantiated by dwn.records.create()/write().
                // `readableStream` will be set if Record was instantiated by dwn.records.read().
                // If neither of the above are true, then the record must be fetched from the DWN.
                this._readableStream = this._agent.processDwnRequest({
                    author: this.author,
                    messageOptions: { recordId: this.id },
                    messageType: dwn_sdk_js_1.DwnInterfaceName.Records + dwn_sdk_js_1.DwnMethodName.Read,
                    target: this.target,
                })
                    .then(function (response) { return response.reply; })
                    .then(function (reply) { return reply.record.data; })
                    .catch(function (error) { throw new Error("Error encountered while attempting to read data: ".concat(error.message)); });
            }
            if (typeof this._encodedData === 'string') {
                // If `encodedData` is set, then it is expected that:
                // type is Blob if the Record object was instantiated by dwn.records.create()/write().
                // type is Base64 URL encoded string if the Record object was instantiated by dwn.records.query().
                // If it is a string, we need to Base64 URL decode to bytes and instantiate a Blob.
                var dataBytes = dwn_sdk_js_1.Encoder.base64UrlToBytes(this._encodedData);
                this._encodedData = new Blob([dataBytes], { type: this.dataFormat });
            }
            // Explicitly cast `encodedData` as a Blob since, if non-null, it has been converted from string to Blob.
            var dataBlob = this._encodedData;
            // eslint-disable-next-line @typescript-eslint/no-this-alias
            var self = this; // Capture the context of the `Record` instance.
            var dataObj = {
                blob: function () {
                    return __awaiter(this, void 0, void 0, function () {
                        var _a;
                        return __generator(this, function (_b) {
                            switch (_b.label) {
                                case 0:
                                    if (dataBlob)
                                        return [2 /*return*/, dataBlob];
                                    if (!self._readableStream) return [3 /*break*/, 2];
                                    _a = Blob.bind;
                                    return [4 /*yield*/, this.stream().then(dwn_sdk_js_1.DataStream.toBytes)];
                                case 1: return [2 /*return*/, new (_a.apply(Blob, [void 0, [_b.sent()], { type: self.dataFormat }]))()];
                                case 2: return [2 /*return*/];
                            }
                        });
                    });
                },
                json: function () {
                    return __awaiter(this, void 0, void 0, function () {
                        return __generator(this, function (_a) {
                            if (dataBlob)
                                return [2 /*return*/, this.text().then(JSON.parse)];
                            if (self._readableStream)
                                return [2 /*return*/, this.text().then(JSON.parse)];
                            return [2 /*return*/, null];
                        });
                    });
                },
                text: function () {
                    return __awaiter(this, void 0, void 0, function () {
                        return __generator(this, function (_a) {
                            if (dataBlob)
                                return [2 /*return*/, dataBlob.text()];
                            if (self._readableStream)
                                return [2 /*return*/, this.stream().then(dwn_sdk_js_1.DataStream.toBytes).then(dwn_sdk_js_1.Encoder.bytesToString)];
                            return [2 /*return*/, null];
                        });
                    });
                },
                stream: function () {
                    return __awaiter(this, void 0, void 0, function () {
                        return __generator(this, function (_a) {
                            if (dataBlob)
                                return [2 /*return*/, new readable_web_to_node_stream_1.ReadableWebToNodeStream(dataBlob.stream())];
                            if (self._readableStream)
                                return [2 /*return*/, self._readableStream];
                            return [2 /*return*/, null];
                        });
                    });
                },
                then: function () {
                    var _a;
                    var callbacks = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        callbacks[_i] = arguments[_i];
                    }
                    return (_a = this.stream()).then.apply(_a, __spreadArray([], __read(callbacks), false));
                },
                catch: function (callback) {
                    return dataObj.then().catch(callback);
                },
            };
            return dataObj;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Delete the current record from the DWN.
     * @returns the status of the delete request
     * @throws `Error` if the record has already been deleted.
     */
    Record.prototype.delete = function () {
        return __awaiter(this, void 0, void 0, function () {
            var agentResponse, status;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (this.isDeleted)
                            throw new Error('Operation failed: Attempted to call `delete()` on a record that has already been deleted.');
                        return [4 /*yield*/, this._agent.processDwnRequest({
                                author: this.author,
                                messageOptions: { recordId: this.id },
                                messageType: dwn_sdk_js_1.DwnInterfaceName.Records + dwn_sdk_js_1.DwnMethodName.Delete,
                                target: this.target,
                            })];
                    case 1:
                        agentResponse = _a.sent();
                        status = agentResponse.reply.status;
                        if (status.code === 202) {
                            // If the record was successfully deleted, mark the instance as deleted to prevent further modifications.
                            this.setDeletedStatus(true);
                        }
                        return [2 /*return*/, { status: status }];
                }
            });
        });
    };
    /**
     * Send the current record to a remote DWN by specifying their DID
     * (vs waiting for the regular DWN sync)
     * @param target - the DID to send the record to
     * @returns the status of the send record request
     * @throws `Error` if the record has already been deleted.
     */
    Record.prototype.send = function (target) {
        return __awaiter(this, void 0, void 0, function () {
            var status, _a, _b;
            var _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        if (this.isDeleted)
                            throw new Error('Operation failed: Attempted to call `send()` on a record that has already been deleted.');
                        _b = (_a = this._agent).sendDwnRequest;
                        _c = {
                            messageType: dwn_sdk_js_1.DwnInterfaceName.Records + dwn_sdk_js_1.DwnMethodName.Write,
                            author: this.author
                        };
                        return [4 /*yield*/, this.data.blob()];
                    case 1: return [4 /*yield*/, _b.apply(_a, [(_c.dataStream = _d.sent(),
                                _c.target = target,
                                _c.messageOptions = this.toJSON(),
                                _c)])];
                    case 2:
                        status = (_d.sent()).reply.status;
                        return [2 /*return*/, { status: status }];
                }
            });
        });
    };
    /**
     * Returns a JSON representation of the Record instance.
     * It's called by `JSON.stringify(...)` automatically.
     */
    Record.prototype.toJSON = function () {
        return {
            attestation: this.attestation,
            author: this.author,
            contextId: this.contextId,
            dataCid: this.dataCid,
            dataFormat: this.dataFormat,
            dataSize: this.dataSize,
            dateCreated: this.dateCreated,
            messageTimestamp: this.dateModified,
            datePublished: this.datePublished,
            encryption: this.encryption,
            interface: this.interface,
            method: this.method,
            parentId: this.parentId,
            protocol: this.protocol,
            protocolPath: this.protocolPath,
            published: this.published,
            recipient: this.recipient,
            recordId: this.id,
            schema: this.schema,
            target: this.target,
        };
    };
    /**
     * Convenience method to return the string representation of the Record instance.
     * Called automatically in string concatenation, String() type conversion, and template literals.
     */
    Record.prototype.toString = function () {
        var str = "Record: {\n";
        str += "  ID: ".concat(this.id, "\n");
        str += this.contextId ? "  Context ID: ".concat(this.contextId, "\n") : '';
        str += this.protocol ? "  Protocol: ".concat(this.protocol, "\n") : '';
        str += this.schema ? "  Schema: ".concat(this.schema, "\n") : '';
        str += "  Data CID: ".concat(this.dataCid, "\n");
        str += "  Data Format: ".concat(this.dataFormat, "\n");
        str += "  Data Size: ".concat(this.dataSize, "\n");
        str += "  Created: ".concat(this.dateCreated, "\n");
        str += "  Modified: ".concat(this.dateModified, "\n");
        str += "}";
        return str;
    };
    /**
     * Update the current record on the DWN.
     * @param options - options to update the record, including the new data
     * @returns the status of the update request
     * @throws `Error` if the record has already been deleted.
     */
    Record.prototype.update = function (options) {
        if (options === void 0) { options = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var _a, dateModified, updateOptions, updateMessage, dataBlob, mutableDescriptorProperties, messageOptions, agentResponse, message, status, responseMessage;
            var _this = this;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (this.isDeleted)
                            throw new Error('Operation failed: Attempted to call `update()` on a record that has already been deleted.');
                        _a = options, dateModified = _a.dateModified, updateOptions = __rest(_a, ["dateModified"]);
                        updateOptions.messageTimestamp = dateModified;
                        updateMessage = __assign(__assign({}, this._descriptor), updateOptions);
                        if (options.data !== undefined) {
                            // If `data` is being updated then `dataCid` and `dataSize` must be undefined and the `data` property is passed as
                            // a top-level property to `agent.processDwnRequest()`.
                            delete updateMessage.dataCid;
                            delete updateMessage.dataSize;
                            delete updateMessage.data;
                            (dataBlob = (0, utils_js_1.dataToBlob)(options.data, updateMessage.dataFormat).dataBlob);
                        }
                        mutableDescriptorProperties = new Set(['data', 'dataCid', 'dataSize', 'dateModified', 'datePublished', 'published']);
                        Record.verifyPermittedMutation(Object.keys(options), mutableDescriptorProperties);
                        // If a new `dateModified` was not provided, remove the equivalent `messageTimestamp` property from from the
                        // updateMessage to let the DWN SDK auto-fill. This is necessary because otherwise DWN SDK throws an
                        // Error 409 Conflict due to attempting to overwrite a record when the `messageTimestamp` values are identical.
                        if (options.dateModified === undefined) {
                            delete updateMessage.messageTimestamp;
                        }
                        // If `published` is set to false, ensure that `datePublished` is undefined. Otherwise, DWN SDK's schema validation
                        // will throw an error if `published` is false but `datePublished` is set.
                        if (options.published === false && updateMessage.datePublished !== undefined) {
                            delete updateMessage.datePublished;
                        }
                        // Set the record ID and context ID, if any.
                        updateMessage.recordId = this._recordId;
                        updateMessage.contextId = this._contextId;
                        messageOptions = __assign({}, updateMessage);
                        return [4 /*yield*/, this._agent.processDwnRequest({
                                author: this.author,
                                dataStream: dataBlob,
                                messageOptions: messageOptions,
                                messageType: dwn_sdk_js_1.DwnInterfaceName.Records + dwn_sdk_js_1.DwnMethodName.Write,
                                target: this.target,
                            })];
                    case 1:
                        agentResponse = _b.sent();
                        message = agentResponse.message, status = agentResponse.reply.status;
                        responseMessage = message;
                        if (200 <= status.code && status.code <= 299) {
                            // Only update the local Record instance mutable properties if the record was successfully (over)written.
                            mutableDescriptorProperties.forEach(function (property) {
                                _this._descriptor[property] = responseMessage.descriptor[property];
                            });
                            // Cache data.
                            if (options.data !== undefined) {
                                this._encodedData = dataBlob;
                            }
                        }
                        return [2 /*return*/, { status: status }];
                }
            });
        });
    };
    /**
     * TODO: Document method.
     */
    Record.prototype.setDeletedStatus = function (status) {
        this.isDeleted = status;
    };
    /**
     * TODO: Document method.
     */
    Record.isReadableWebStream = function (stream) {
        // TODO: Improve robustness of the check modeled after node:stream.
        return typeof stream._read !== 'function';
    };
    /**
     * TODO: Document method.
     */
    Record.verifyPermittedMutation = function (propertiesToMutate, mutableDescriptorProperties) {
        var e_1, _a;
        try {
            for (var propertiesToMutate_1 = __values(propertiesToMutate), propertiesToMutate_1_1 = propertiesToMutate_1.next(); !propertiesToMutate_1_1.done; propertiesToMutate_1_1 = propertiesToMutate_1.next()) {
                var property = propertiesToMutate_1_1.value;
                if (!mutableDescriptorProperties.has(property)) {
                    throw new Error("".concat(property, " is an immutable property. Its value cannot be changed."));
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (propertiesToMutate_1_1 && !propertiesToMutate_1_1.done && (_a = propertiesToMutate_1.return)) _a.call(propertiesToMutate_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
    };
    return Record;
}());
exports.Record = Record;
