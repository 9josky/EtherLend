import type { PortableDid } from '@web5/dids';
import type { Web5ManagedAgent } from './types/agent.js';
import type { CreateDidMethodOptions } from './did-manager.js';
import type { ManagedIdentityStore } from './store-managed-identity.js';
type CreateWithDid = Required<Pick<CreateIdentityOptions, 'did'>> & Pick<CreateIdentityOptions, 'context' | 'name' | 'kms'>;
type CreateWithDidMethod<M extends DidMethod> = Pick<CreateIdentityOptions, 'context' | 'kms' | 'name'> & {
    didMethod: M;
    didOptions?: CreateDidMethodOptions[M];
};
type DidMethod = keyof CreateDidMethodOptions;
export type CreateIdentityOptions = {
    did?: PortableDid;
    didMethod?: any;
    didOptions?: any;
    context?: string;
    kms?: string;
    name: string;
};
export type IdentityManagerOptions = {
    agent?: Web5ManagedAgent;
    store?: ManagedIdentityStore;
};
export type ImportIdentityOptions = {
    context?: string;
    did?: PortableDid;
    identity: ManagedIdentity;
    kms?: string;
};
export interface ManagedIdentity {
    did: string;
    name: string;
}
export declare class IdentityManager {
    /**
     * Holds the instance of a `Web5ManagedAgent` that represents the current
     * execution context for the `KeyManager`. This agent is utilized
     * to interact with other Web5 agent components. It's vital
     * to ensure this instance is set to correctly contextualize
     * operations within the broader Web5 agent framework.
     */
    private _agent?;
    private _store;
    constructor(options?: IdentityManagerOptions);
    /**
     * Retrieves the `Web5ManagedAgent` execution context.
     * If the `agent` instance proprety is undefined, it will throw an error.
     *
     * @returns The `Web5ManagedAgent` instance that represents the current execution
     * context.
     *
     * @throws Will throw an error if the `agent` instance property is undefined.
     */
    get agent(): Web5ManagedAgent;
    set agent(agent: Web5ManagedAgent);
    create<M extends DidMethod>(options: CreateWithDidMethod<M>): Promise<ManagedIdentity>;
    create(options: CreateWithDid): Promise<ManagedIdentity>;
    get(options: {
        did: string;
        context?: string;
    }): Promise<ManagedIdentity | undefined>;
    import(options: ImportIdentityOptions): Promise<ManagedIdentity>;
    list(options?: {
        context?: string;
    }): Promise<ManagedIdentity[]>;
}
export {};
//# sourceMappingURL=identity-manager.d.ts.map