import { UnionMessageReply } from '@tbd54566975/dwn-sdk-js';
import type { SerializableDwnMessage } from './types/agent.js';
export interface DidRpc {
    get transportProtocols(): string[];
    sendDidRequest(request: DidRpcRequest): Promise<DidRpcResponse>;
}
export declare enum DidRpcMethod {
    Create = "did.create",
    Resolve = "did.resolve"
}
export type DidRpcRequest = {
    data: string;
    method: DidRpcMethod;
    url: string;
};
export type DidRpcResponse = {
    data?: string;
    ok: boolean;
    status: RpcStatus;
};
/**
 * interface that can be implemented to communicate with Dwn Servers
 */
export interface DwnRpc {
    /**
     * TODO: add jsdoc
     */
    get transportProtocols(): string[];
    /**
     * TODO: add jsdoc
     * @param request
     */
    sendDwnRequest(request: DwnRpcRequest): Promise<DwnRpcResponse>;
}
/**
 * TODO: add jsdoc
 */
export type DwnRpcRequest = {
    data?: any;
    dwnUrl: string;
    message: SerializableDwnMessage | any;
    targetDid: string;
};
/**
 * TODO: add jsdoc
 */
export type DwnRpcResponse = UnionMessageReply;
export type RpcStatus = {
    code: number;
    message: string;
};
export interface Web5Rpc extends DwnRpc, DidRpc {
}
/**
 * Client used to communicate with Dwn Servers
 */
export declare class Web5RpcClient implements Web5Rpc {
    private transportClients;
    constructor(clients?: Web5Rpc[]);
    get transportProtocols(): string[];
    sendDidRequest(request: DidRpcRequest): Promise<DidRpcResponse>;
    sendDwnRequest(request: DwnRpcRequest): Promise<DwnRpcResponse>;
}
//# sourceMappingURL=rpc-client.d.ts.map