import type { Web5ManagedAgent } from './types/agent.js';
import type { ManagedDid } from './did-manager.js';
export interface ManagedDidStore {
    deleteDid(options: {
        did: string;
        agent?: Web5ManagedAgent;
        context?: string;
    }): Promise<boolean>;
    getDid(options: {
        did: string;
        agent?: Web5ManagedAgent;
        context?: string;
    }): Promise<ManagedDid | undefined>;
    findDid(options: {
        did: string;
        agent?: Web5ManagedAgent;
        context?: string;
    }): Promise<ManagedDid | undefined>;
    findDid(options: {
        alias: string;
        agent?: Web5ManagedAgent;
        context?: string;
    }): Promise<ManagedDid | undefined>;
    importDid(options: {
        did: ManagedDid;
        agent?: Web5ManagedAgent;
        context?: string;
    }): Promise<void>;
    listDids(options?: {
        agent?: Web5ManagedAgent;
        context?: string;
    }): Promise<ManagedDid[]>;
}
/**
 *
 */
export declare class DidStoreDwn implements ManagedDidStore {
    private _didRecordProperties;
    deleteDid(options: {
        agent: Web5ManagedAgent;
        context?: string;
        did: string;
    }): Promise<boolean>;
    findDid(options: {
        agent: Web5ManagedAgent;
        context?: string;
        did: string;
    }): Promise<ManagedDid | undefined>;
    findDid(options: {
        agent: Web5ManagedAgent;
        context?: string;
        alias: string;
    }): Promise<ManagedDid | undefined>;
    getDid(options: {
        agent: Web5ManagedAgent;
        context?: string;
        did: string;
    }): Promise<ManagedDid | undefined>;
    importDid(options: {
        agent: Web5ManagedAgent;
        context?: string;
        did: ManagedDid;
    }): Promise<void>;
    listDids(options: {
        agent: Web5ManagedAgent;
        context?: string;
    }): Promise<ManagedDid[]>;
    private getAuthor;
}
/**
 *
 */
export declare class DidStoreMemory implements ManagedDidStore {
    /**
     * A private field that contains the Map used as the in-memory key-value store.
     */
    private store;
    deleteDid({ did }: {
        did: string;
    }): Promise<boolean>;
    getDid({ did }: {
        did: string;
    }): Promise<ManagedDid | undefined>;
    findDid(options: {
        did: string;
    }): Promise<ManagedDid | undefined>;
    findDid(options: {
        alias: string;
    }): Promise<ManagedDid | undefined>;
    importDid(options: {
        did: ManagedDid;
    }): Promise<void>;
    listDids(): Promise<ManagedDid[]>;
}
//# sourceMappingURL=store-managed-did.d.ts.map