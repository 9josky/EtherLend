"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DidManager = exports.DidMessage = void 0;
var crypto_1 = require("@web5/crypto");
var dids_1 = require("@web5/dids");
var store_managed_did_js_1 = require("./store-managed-did.js");
var DidMessage;
(function (DidMessage) {
    DidMessage["Create"] = "Create";
    DidMessage["Resolve"] = "Resolve";
})(DidMessage || (exports.DidMessage = DidMessage = {}));
var DidManager = /** @class */ (function () {
    function DidManager(options) {
        var e_1, _a;
        this._didMethods = new Map();
        var agent = options.agent, didMethods = options.didMethods, store = options.store;
        this._agent = agent;
        this._store = store !== null && store !== void 0 ? store : new store_managed_did_js_1.DidStoreMemory();
        if (!didMethods) {
            throw new TypeError("DidManager: Required parameter missing: 'didMethods'");
        }
        try {
            for (var didMethods_1 = __values(didMethods), didMethods_1_1 = didMethods_1.next(); !didMethods_1_1.done; didMethods_1_1 = didMethods_1.next()) {
                var didMethod = didMethods_1_1.value;
                this._didMethods.set(didMethod.methodName, didMethod);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (didMethods_1_1 && !didMethods_1_1.done && (_a = didMethods_1.return)) _a.call(didMethods_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
    }
    Object.defineProperty(DidManager.prototype, "agent", {
        /**
         * Retrieves the `Web5ManagedAgent` execution context.
         * If the `agent` instance proprety is undefined, it will throw an error.
         *
         * @returns The `Web5ManagedAgent` instance that represents the current execution
         * context.
         *
         * @throws Will throw an error if the `agent` instance property is undefined.
         */
        get: function () {
            if (this._agent === undefined) {
                throw new Error('DidManager: Unable to determine agent execution context.');
            }
            return this._agent;
        },
        set: function (agent) {
            this._agent = agent;
        },
        enumerable: false,
        configurable: true
    });
    DidManager.prototype.create = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var alias, keySet, kms, metadata, method, context, methodOptions, didMethod, did, mergedMetadata, managedDid;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        alias = options.alias, keySet = options.keySet, kms = options.kms, metadata = options.metadata, method = options.method, context = options.context, methodOptions = __rest(options, ["alias", "keySet", "kms", "metadata", "method", "context"]);
                        didMethod = this.getMethod(method);
                        if (!((keySet === null || keySet === void 0 ? void 0 : keySet.verificationMethodKeys) === undefined)) return [3 /*break*/, 2];
                        return [4 /*yield*/, didMethod.generateKeySet()];
                    case 1:
                        keySet = _a.sent();
                        _a.label = 2;
                    case 2: return [4 /*yield*/, this.importOrGetKeySet({ keySet: keySet, kms: kms })];
                    case 3:
                        /** Import key set to KeyManager, or if already in KeyManager, retrieve the
                         * public key. */
                        keySet = _a.sent();
                        return [4 /*yield*/, didMethod.create(__assign(__assign({}, methodOptions), { keySet: keySet }))];
                    case 4:
                        did = _a.sent();
                        // Set the KeyManager alias for each key to the DID Document primary ID.
                        return [4 /*yield*/, this.updateKeySet({
                                canonicalId: did.canonicalId,
                                didDocument: did.document,
                                keySet: keySet
                            })];
                    case 5:
                        // Set the KeyManager alias for each key to the DID Document primary ID.
                        _a.sent();
                        mergedMetadata = __assign(__assign({}, metadata), did.metadata);
                        managedDid = __assign(__assign({ alias: alias, method: method }, did), { metadata: mergedMetadata });
                        /** If context is undefined, then the DID will be stored under the
                         * tenant of the created DID. Otherwise, the DID record will
                         * be stored under the tenant of the specified context. */
                        context !== null && context !== void 0 ? context : (context = managedDid.did);
                        // Store the ManagedDid in the store.
                        return [4 /*yield*/, this._store.importDid({ did: managedDid, agent: this.agent, context: context })];
                    case 6:
                        // Store the ManagedDid in the store.
                        _a.sent();
                        return [2 /*return*/, managedDid];
                }
            });
        });
    };
    DidManager.prototype.getDefaultSigningKey = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var did, didDocument, parsedDid, didMethod, verificationMethodId;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        did = options.did;
                        return [4 /*yield*/, this.agent.didResolver.resolve(did)];
                    case 1:
                        didDocument = (_a.sent()).didDocument;
                        parsedDid = dids_1.utils.parseDid({ didUrl: did });
                        if (!(didDocument && parsedDid)) {
                            throw new Error("DidManager: Unable to resolve: ".concat(did));
                        }
                        didMethod = this.getMethod(parsedDid.method);
                        return [4 /*yield*/, didMethod.getDefaultSigningKey({ didDocument: didDocument })];
                    case 2:
                        verificationMethodId = _a.sent();
                        return [2 /*return*/, verificationMethodId];
                }
            });
        });
    };
    DidManager.prototype.get = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var did, context, didRef;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        context = options.context, didRef = options.didRef;
                        return [4 /*yield*/, this._store.getDid({ did: didRef, agent: this.agent, context: context })];
                    case 1:
                        // Try to get DID by ID.
                        did = _a.sent();
                        if (did)
                            return [2 /*return*/, did];
                        return [4 /*yield*/, this._store.findDid({ alias: didRef, agent: this.agent, context: context })];
                    case 2:
                        // Try to find DID by alias.
                        did = _a.sent();
                        if (did)
                            return [2 /*return*/, did];
                        return [2 /*return*/, undefined];
                }
            });
        });
    };
    DidManager.prototype.import = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var alias, context, did, kms, parsedDid, method, keySet, managedDid;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        alias = options.alias, context = options.context, did = options.did, kms = options.kms;
                        if (did.keySet === undefined) {
                            throw new Error("Portable DID is missing required property: 'keySet'");
                        }
                        parsedDid = dids_1.utils.parseDid({ didUrl: did.did });
                        if (!parsedDid) {
                            throw new Error("DidManager: Unable to resolve: ".concat(did));
                        }
                        method = parsedDid.method;
                        this.getMethod(method);
                        return [4 /*yield*/, this.importOrGetKeySet({ keySet: did.keySet, kms: kms })];
                    case 1:
                        keySet = _a.sent();
                        // Set the KeyManager alias for each key to the DID Document primary ID.
                        return [4 /*yield*/, this.updateKeySet({
                                canonicalId: did.canonicalId,
                                didDocument: did.document,
                                keySet: keySet
                            })];
                    case 2:
                        // Set the KeyManager alias for each key to the DID Document primary ID.
                        _a.sent();
                        managedDid = __assign(__assign({ alias: alias, method: method }, did), { keySet: keySet });
                        /** If context is undefined, then the DID will be stored under the
                         * tenant of the imported DID. Otherwise, the DID record will
                         * be stored under the tenant of the specified context. */
                        context !== null && context !== void 0 ? context : (context = managedDid.did);
                        // Store the ManagedDid in the store.
                        return [4 /*yield*/, this._store.importDid({ did: managedDid, agent: this.agent, context: context })];
                    case 3:
                        // Store the ManagedDid in the store.
                        _a.sent();
                        return [2 /*return*/, managedDid];
                }
            });
        });
    };
    /**
     * Retrieves a `DidMethodApi` instance associated with a specific method
     * name. This method uses the method name to access the `didMethods` map
     * and returns the corresponding `DidMethodApi` instance. If a method
     * name is provided that does not exist within the `didMethods` map, it
     * will throw an error.
     *
     * @param methodName - A string representing the name of the method for
     * which the corresponding `DidMethodApi` instance is to be retrieved.
     *
     * @returns The `DidMethodApi` instance that corresponds to the provided
     * method name. If no `DidMethodApi` instance corresponds to the provided
     * method name, an error is thrown.
     *
     * @throws Will throw an error if the provided method name does not
     * correspond to any `DidMethodApi` instance within the `didMethods` map.
     */
    DidManager.prototype.getMethod = function (methodName) {
        var didMethod = this._didMethods.get(methodName);
        if (didMethod === undefined) {
            throw new Error("The DID method '".concat(methodName, "' is not supported"));
        }
        return didMethod;
    };
    DidManager.prototype.importOrGetKeySet = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var kms, agent, keySet, _a, _b, key, publicKey, privateKey, importedKeyPair, publicKey, importedPublicKey, keyOrKeyPair, publicKey, _c, e_2_1;
            var e_2, _d;
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0:
                        kms = options.kms;
                        agent = this.agent;
                        keySet = structuredClone(options.keySet);
                        _e.label = 1;
                    case 1:
                        _e.trys.push([1, 16, 17, 18]);
                        _a = __values(keySet.verificationMethodKeys), _b = _a.next();
                        _e.label = 2;
                    case 2:
                        if (!!_b.done) return [3 /*break*/, 15];
                        key = _b.value;
                        if (!(key.keyManagerId === undefined)) return [3 /*break*/, 11];
                        if (!('publicKeyJwk' in key && 'privateKeyJwk' in key
                            && key.publicKeyJwk && key.privateKeyJwk)) return [3 /*break*/, 6];
                        return [4 /*yield*/, crypto_1.Jose.jwkToCryptoKey({ key: key.publicKeyJwk })];
                    case 3:
                        publicKey = _e.sent();
                        return [4 /*yield*/, crypto_1.Jose.jwkToCryptoKey({ key: key.privateKeyJwk })];
                    case 4:
                        privateKey = _e.sent();
                        return [4 /*yield*/, agent.keyManager.importKey({
                                privateKey: __assign(__assign({ kms: kms }, privateKey), { material: privateKey.material }),
                                publicKey: __assign(__assign({ kms: kms }, publicKey), { material: publicKey.material })
                            })];
                    case 5:
                        importedKeyPair = _e.sent();
                        // Store the UUID assigned by KeyManager.
                        key.keyManagerId = importedKeyPair.privateKey.id;
                        // Delete the private key.
                        delete key.privateKeyJwk;
                        return [3 /*break*/, 10];
                    case 6:
                        if (!('publicKeyJwk' in key && key.publicKeyJwk)) return [3 /*break*/, 9];
                        return [4 /*yield*/, crypto_1.Jose.jwkToCryptoKey({ key: key.publicKeyJwk })];
                    case 7:
                        publicKey = _e.sent();
                        return [4 /*yield*/, agent.keyManager.importKey(__assign(__assign({ kms: kms }, publicKey), { material: publicKey.material }))];
                    case 8:
                        importedPublicKey = _e.sent();
                        // Store the UUID assigned by KeyManager.
                        key.keyManagerId = importedPublicKey.id;
                        return [3 /*break*/, 10];
                    case 9: throw new Error("Required parameter(s) missing: 'publicKeyJwk', and optionally, 'privateKeyJwk");
                    case 10: return [3 /*break*/, 14];
                    case 11: return [4 /*yield*/, agent.keyManager.getKey({ keyRef: key.keyManagerId })];
                    case 12:
                        keyOrKeyPair = _e.sent();
                        if (!keyOrKeyPair)
                            throw new Error("Key with ID '".concat(key.keyManagerId, " not found."));
                        publicKey = 'publicKey' in keyOrKeyPair ? keyOrKeyPair.publicKey : keyOrKeyPair;
                        // Convert public key from CryptoKey to JWK format.
                        _c = key;
                        return [4 /*yield*/, crypto_1.Jose.cryptoKeyToJwk({ key: publicKey })];
                    case 13:
                        // Convert public key from CryptoKey to JWK format.
                        _c.publicKeyJwk = (_e.sent());
                        _e.label = 14;
                    case 14:
                        _b = _a.next();
                        return [3 /*break*/, 2];
                    case 15: return [3 /*break*/, 18];
                    case 16:
                        e_2_1 = _e.sent();
                        e_2 = { error: e_2_1 };
                        return [3 /*break*/, 18];
                    case 17:
                        try {
                            if (_b && !_b.done && (_d = _a.return)) _d.call(_a);
                        }
                        finally { if (e_2) throw e_2.error; }
                        return [7 /*endfinally*/];
                    case 18: return [2 /*return*/, keySet];
                }
            });
        });
    };
    DidManager.prototype.processRequest = function (request) {
        return __awaiter(this, void 0, void 0, function () {
            var messageOptions, messageType, _, _a, result;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        messageOptions = request.messageOptions, messageType = request.messageType, _ = request.store;
                        _a = messageType;
                        switch (_a) {
                            case DidMessage.Create: return [3 /*break*/, 1];
                        }
                        return [3 /*break*/, 3];
                    case 1: return [4 /*yield*/, this.create(messageOptions)];
                    case 2:
                        result = _b.sent();
                        return [2 /*return*/, { result: result }];
                    case 3:
                        {
                            throw new Error("DidManager: Unsupported request type: ".concat(messageType));
                        }
                        _b.label = 4;
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Set the KeyManager alias for each key to the DID primary ID.
     *
     * If defined, use the `canonicalId` as the primary ID for the
     * DID subject. Otherwise, use the `id` property from the topmost
     * map of the DID document.
     *
     * @see {@link https://www.w3.org/TR/did-core/#did-subject | DID Subject}
     * @see {@link https://www.w3.org/TR/did-core/#dfn-canonicalid | DID Document Metadata}
     */
    DidManager.prototype.updateKeySet = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var canonicalId, didDocument, keySet, agent, didPrimaryId, _a, _b, keyPair, publicKeyMultibase, methodId, _c, fragment, keyAlias, e_3_1;
            var e_3, _d;
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0:
                        canonicalId = options.canonicalId, didDocument = options.didDocument, keySet = options.keySet;
                        agent = this.agent;
                        didPrimaryId = canonicalId !== null && canonicalId !== void 0 ? canonicalId : didDocument.id;
                        _e.label = 1;
                    case 1:
                        _e.trys.push([1, 7, 8, 9]);
                        _a = __values(keySet.verificationMethodKeys), _b = _a.next();
                        _e.label = 2;
                    case 2:
                        if (!!_b.done) return [3 /*break*/, 6];
                        keyPair = _b.value;
                        return [4 /*yield*/, crypto_1.Jose.jwkToMultibaseId({ key: keyPair.publicKeyJwk })];
                    case 3:
                        publicKeyMultibase = _e.sent();
                        methodId = dids_1.utils.getVerificationMethodIds({
                            didDocument: didDocument,
                            publicKeyJwk: keyPair.publicKeyJwk,
                            publicKeyMultibase: publicKeyMultibase
                        });
                        if (!(methodId && methodId.includes('#'))) {
                            throw new Error('DidManager: Unable to update key set due to malformed verification method ID');
                        }
                        _c = __read(methodId.split('#'), 2), fragment = _c[1];
                        keyAlias = "".concat(didPrimaryId, "#").concat(fragment);
                        // Set the KeyManager alias to the method ID.
                        return [4 /*yield*/, agent.keyManager.updateKey({ keyRef: keyPair.keyManagerId, alias: keyAlias })];
                    case 4:
                        // Set the KeyManager alias to the method ID.
                        _e.sent();
                        _e.label = 5;
                    case 5:
                        _b = _a.next();
                        return [3 /*break*/, 2];
                    case 6: return [3 /*break*/, 9];
                    case 7:
                        e_3_1 = _e.sent();
                        e_3 = { error: e_3_1 };
                        return [3 /*break*/, 9];
                    case 8:
                        try {
                            if (_b && !_b.done && (_d = _a.return)) _d.call(_a);
                        }
                        finally { if (e_3) throw e_3.error; }
                        return [7 /*endfinally*/];
                    case 9: return [2 /*return*/];
                }
            });
        });
    };
    return DidManager;
}());
exports.DidManager = DidManager;
//# sourceMappingURL=did-manager.js.map