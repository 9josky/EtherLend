"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SyncManagerLevel = void 0;
var level_1 = require("level");
var common_1 = require("@web5/common");
var dids_1 = require("@web5/dids");
var dwn_sdk_js_1 = require("@tbd54566975/dwn-sdk-js");
var utils_js_1 = require("./utils.js");
var is2xx = function (code) { return code >= 200 && code <= 299; };
var is4xx = function (code) { return code >= 400 && code <= 499; };
var SyncManagerLevel = /** @class */ (function () {
    function SyncManagerLevel(options) {
        var _a = options !== null && options !== void 0 ? options : {}, agent = _a.agent, _b = _a.dataPath, dataPath = _b === void 0 ? 'DATA/AGENT/SYNC_STORE' : _b, db = _a.db;
        this._agent = agent;
        this._db = (db) ? db : new level_1.Level(dataPath);
    }
    Object.defineProperty(SyncManagerLevel.prototype, "agent", {
        /**
         * Retrieves the `Web5ManagedAgent` execution context.
         * If the `agent` instance proprety is undefined, it will throw an error.
         *
         * @returns The `Web5ManagedAgent` instance that represents the current execution
         * context.
         *
         * @throws Will throw an error if the `agent` instance property is undefined.
         */
        get: function () {
            if (this._agent === undefined) {
                throw new Error('DidManager: Unable to determine agent execution context.');
            }
            return this._agent;
        },
        set: function (agent) {
            this._agent = agent;
        },
        enumerable: false,
        configurable: true
    });
    SyncManagerLevel.prototype.clear = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._db.clear()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    SyncManagerLevel.prototype.pull = function () {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var syncPeerState, pullQueue, pullJobs, deleteOperations, errored, pullJobs_1, pullJobs_1_1, job, _b, key, _c, did, dwnUrl, watermark, messageCid, messageExists, messagesGet, reply, e_1, _d, _e, entry, messageType, dataStream, encodedData, message, dataBytes, recordsRead, recordsReadReply, record, readStatus, pruneReply, pullReply, e_2_1, e_3_1;
            var e_3, _f, e_2, _g;
            return __generator(this, function (_h) {
                switch (_h.label) {
                    case 0: return [4 /*yield*/, this.getSyncPeerState({ syncDirection: 'pull' })];
                    case 1:
                        syncPeerState = _h.sent();
                        return [4 /*yield*/, this.enqueueOperations({ syncDirection: 'pull', syncPeerState: syncPeerState })];
                    case 2:
                        _h.sent();
                        pullQueue = this.getPullQueue();
                        return [4 /*yield*/, pullQueue.iterator().all()];
                    case 3:
                        pullJobs = _h.sent();
                        deleteOperations = [];
                        errored = new Set();
                        _h.label = 4;
                    case 4:
                        _h.trys.push([4, 36, 37, 38]);
                        pullJobs_1 = __values(pullJobs), pullJobs_1_1 = pullJobs_1.next();
                        _h.label = 5;
                    case 5:
                        if (!!pullJobs_1_1.done) return [3 /*break*/, 35];
                        job = pullJobs_1_1.value;
                        _b = __read(job, 1), key = _b[0];
                        _c = __read(key.split('~'), 4), did = _c[0], dwnUrl = _c[1], watermark = _c[2], messageCid = _c[3];
                        // If a particular DWN service endpoint is unreachable, skip subsequent pull operations.
                        if (errored.has(dwnUrl)) {
                            return [3 /*break*/, 34];
                        }
                        return [4 /*yield*/, this.messageExists(did, messageCid)];
                    case 6:
                        messageExists = _h.sent();
                        if (!messageExists) return [3 /*break*/, 8];
                        return [4 /*yield*/, this.setWatermark(did, dwnUrl, 'pull', watermark)];
                    case 7:
                        _h.sent();
                        deleteOperations.push({ type: 'del', key: key });
                        return [3 /*break*/, 34];
                    case 8: return [4 /*yield*/, this.agent.dwnManager.createMessage({
                            author: did,
                            messageType: 'MessagesGet',
                            messageOptions: {
                                messageCids: [messageCid]
                            }
                        })];
                    case 9:
                        messagesGet = _h.sent();
                        reply = void 0;
                        _h.label = 10;
                    case 10:
                        _h.trys.push([10, 12, , 13]);
                        return [4 /*yield*/, this.agent.rpcClient.sendDwnRequest({
                                dwnUrl: dwnUrl,
                                targetDid: did,
                                message: messagesGet
                            })];
                    case 11:
                        reply = (_h.sent());
                        return [3 /*break*/, 13];
                    case 12:
                        e_1 = _h.sent();
                        errored.add(dwnUrl);
                        return [3 /*break*/, 34];
                    case 13:
                        _h.trys.push([13, 32, 33, 34]);
                        _d = (e_2 = void 0, __values((_a = reply.messages) !== null && _a !== void 0 ? _a : [])), _e = _d.next();
                        _h.label = 14;
                    case 14:
                        if (!!_e.done) return [3 /*break*/, 31];
                        entry = _e.value;
                        if (!(entry.error || !entry.message)) return [3 /*break*/, 17];
                        return [4 /*yield*/, this.setWatermark(did, dwnUrl, 'pull', watermark)];
                    case 15:
                        _h.sent();
                        return [4 /*yield*/, this.addMessage(did, messageCid)];
                    case 16:
                        _h.sent();
                        deleteOperations.push({ type: 'del', key: key });
                        return [3 /*break*/, 30];
                    case 17:
                        messageType = this.getDwnMessageType(entry.message);
                        dataStream = void 0;
                        if (!(messageType === 'RecordsWrite')) return [3 /*break*/, 26];
                        encodedData = entry.encodedData;
                        message = entry.message;
                        if (!encodedData) return [3 /*break*/, 18];
                        dataBytes = common_1.Convert.base64Url(encodedData).toUint8Array();
                        dataStream = dwn_sdk_js_1.DataStream.fromBytes(dataBytes);
                        return [3 /*break*/, 26];
                    case 18: return [4 /*yield*/, this.agent.dwnManager.createMessage({
                            author: did,
                            messageType: 'RecordsRead',
                            messageOptions: {
                                recordId: message['recordId']
                            }
                        })];
                    case 19:
                        recordsRead = _h.sent();
                        return [4 /*yield*/, this.agent.rpcClient.sendDwnRequest({
                                dwnUrl: dwnUrl,
                                targetDid: did,
                                message: recordsRead
                            })];
                    case 20:
                        recordsReadReply = _h.sent();
                        record = recordsReadReply.record, readStatus = recordsReadReply.status;
                        if (!(is2xx(readStatus.code) && record)) return [3 /*break*/, 21];
                        /** If the read was successful, convert the data stream from web ReadableStream
                           * to Node.js Readable so that the DWN can process it.*/
                        dataStream = (0, utils_js_1.webReadableToIsomorphicNodeReadable)(record.data);
                        return [3 /*break*/, 26];
                    case 21:
                        if (!(readStatus.code >= 400)) return [3 /*break*/, 26];
                        return [4 /*yield*/, this.agent.dwnManager.writePrunedRecord({
                                targetDid: did,
                                message: message
                            })];
                    case 22:
                        pruneReply = _h.sent();
                        if (!(pruneReply.status.code === 202 || pruneReply.status.code === 409)) return [3 /*break*/, 25];
                        return [4 /*yield*/, this.setWatermark(did, dwnUrl, 'pull', watermark)];
                    case 23:
                        _h.sent();
                        return [4 /*yield*/, this.addMessage(did, messageCid)];
                    case 24:
                        _h.sent();
                        deleteOperations.push({ type: 'del', key: key });
                        return [3 /*break*/, 30];
                    case 25: throw new Error("SyncManager: Failed to sync tombstone for message '".concat(messageCid, "'"));
                    case 26: return [4 /*yield*/, this.agent.dwnManager.processMessage({
                            targetDid: did,
                            message: entry.message,
                            dataStream: dataStream
                        })];
                    case 27:
                        pullReply = _h.sent();
                        if (!(pullReply.status.code === 202 || pullReply.status.code === 409)) return [3 /*break*/, 30];
                        return [4 /*yield*/, this.setWatermark(did, dwnUrl, 'pull', watermark)];
                    case 28:
                        _h.sent();
                        return [4 /*yield*/, this.addMessage(did, messageCid)];
                    case 29:
                        _h.sent();
                        deleteOperations.push({ type: 'del', key: key });
                        _h.label = 30;
                    case 30:
                        _e = _d.next();
                        return [3 /*break*/, 14];
                    case 31: return [3 /*break*/, 34];
                    case 32:
                        e_2_1 = _h.sent();
                        e_2 = { error: e_2_1 };
                        return [3 /*break*/, 34];
                    case 33:
                        try {
                            if (_e && !_e.done && (_g = _d.return)) _g.call(_d);
                        }
                        finally { if (e_2) throw e_2.error; }
                        return [7 /*endfinally*/];
                    case 34:
                        pullJobs_1_1 = pullJobs_1.next();
                        return [3 /*break*/, 5];
                    case 35: return [3 /*break*/, 38];
                    case 36:
                        e_3_1 = _h.sent();
                        e_3 = { error: e_3_1 };
                        return [3 /*break*/, 38];
                    case 37:
                        try {
                            if (pullJobs_1_1 && !pullJobs_1_1.done && (_f = pullJobs_1.return)) _f.call(pullJobs_1);
                        }
                        finally { if (e_3) throw e_3.error; }
                        return [7 /*endfinally*/];
                    case 38: return [4 /*yield*/, pullQueue.batch(deleteOperations)];
                    case 39:
                        _h.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    SyncManagerLevel.prototype.push = function () {
        return __awaiter(this, void 0, void 0, function () {
            var syncPeerState, pushQueue, pushJobs, deleteOperations, errored, pushJobs_1, pushJobs_1_1, job, _a, key, _b, did, dwnUrl, watermark, messageCid, dwnMessage, reply, _c, e_4_1;
            var e_4, _d;
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0: return [4 /*yield*/, this.getSyncPeerState({ syncDirection: 'push' })];
                    case 1:
                        syncPeerState = _e.sent();
                        return [4 /*yield*/, this.enqueueOperations({ syncDirection: 'push', syncPeerState: syncPeerState })];
                    case 2:
                        _e.sent();
                        pushQueue = this.getPushQueue();
                        return [4 /*yield*/, pushQueue.iterator().all()];
                    case 3:
                        pushJobs = _e.sent();
                        deleteOperations = [];
                        errored = new Set();
                        _e.label = 4;
                    case 4:
                        _e.trys.push([4, 17, 18, 19]);
                        pushJobs_1 = __values(pushJobs), pushJobs_1_1 = pushJobs_1.next();
                        _e.label = 5;
                    case 5:
                        if (!!pushJobs_1_1.done) return [3 /*break*/, 16];
                        job = pushJobs_1_1.value;
                        _a = __read(job, 1), key = _a[0];
                        _b = __read(key.split('~'), 4), did = _b[0], dwnUrl = _b[1], watermark = _b[2], messageCid = _b[3];
                        // If a particular DWN service endpoint is unreachable, skip subsequent push operations.
                        if (errored.has(dwnUrl)) {
                            return [3 /*break*/, 15];
                        }
                        return [4 /*yield*/, this.getDwnMessage(did, messageCid)];
                    case 6:
                        dwnMessage = _e.sent();
                        if (!!dwnMessage) return [3 /*break*/, 9];
                        deleteOperations.push({ type: 'del', key: key });
                        return [4 /*yield*/, this.setWatermark(did, dwnUrl, 'push', watermark)];
                    case 7:
                        _e.sent();
                        return [4 /*yield*/, this.addMessage(did, messageCid)];
                    case 8:
                        _e.sent();
                        return [3 /*break*/, 15];
                    case 9:
                        _e.trys.push([9, 14, , 15]);
                        return [4 /*yield*/, this.agent.rpcClient.sendDwnRequest({
                                dwnUrl: dwnUrl,
                                targetDid: did,
                                data: dwnMessage.data,
                                message: dwnMessage.message
                            })];
                    case 10:
                        reply = _e.sent();
                        if (!(reply.status.code === 202 || reply.status.code === 409)) return [3 /*break*/, 13];
                        return [4 /*yield*/, this.setWatermark(did, dwnUrl, 'push', watermark)];
                    case 11:
                        _e.sent();
                        return [4 /*yield*/, this.addMessage(did, messageCid)];
                    case 12:
                        _e.sent();
                        deleteOperations.push({ type: 'del', key: key });
                        _e.label = 13;
                    case 13: return [3 /*break*/, 15];
                    case 14:
                        _c = _e.sent();
                        // Error is intentionally ignored; 'errored' set is updated with 'dwnUrl'.
                        errored.add(dwnUrl);
                        return [3 /*break*/, 15];
                    case 15:
                        pushJobs_1_1 = pushJobs_1.next();
                        return [3 /*break*/, 5];
                    case 16: return [3 /*break*/, 19];
                    case 17:
                        e_4_1 = _e.sent();
                        e_4 = { error: e_4_1 };
                        return [3 /*break*/, 19];
                    case 18:
                        try {
                            if (pushJobs_1_1 && !pushJobs_1_1.done && (_d = pushJobs_1.return)) _d.call(pushJobs_1);
                        }
                        finally { if (e_4) throw e_4.error; }
                        return [7 /*endfinally*/];
                    case 19: return [4 /*yield*/, pushQueue.batch(deleteOperations)];
                    case 20:
                        _e.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    SyncManagerLevel.prototype.registerIdentity = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var did, registeredIdentities;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        did = options.did;
                        registeredIdentities = this._db.sublevel('registeredIdentities');
                        return [4 /*yield*/, registeredIdentities.put(did, '')];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    SyncManagerLevel.prototype.startSync = function (options) {
        var _this = this;
        var _a = options.interval, interval = _a === void 0 ? 120000 : _a;
        return new Promise(function (resolve, reject) {
            if (_this._syncIntervalId) {
                clearInterval(_this._syncIntervalId);
            }
            _this._syncIntervalId = setInterval(function () { return __awaiter(_this, void 0, void 0, function () {
                var error_1;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 3, , 4]);
                            return [4 /*yield*/, this.push()];
                        case 1:
                            _a.sent();
                            return [4 /*yield*/, this.pull()];
                        case 2:
                            _a.sent();
                            return [3 /*break*/, 4];
                        case 3:
                            error_1 = _a.sent();
                            this.stopSync();
                            reject(error_1);
                            return [3 /*break*/, 4];
                        case 4: return [2 /*return*/];
                    }
                });
            }); }, interval);
        });
    };
    SyncManagerLevel.prototype.stopSync = function () {
        if (this._syncIntervalId) {
            clearInterval(this._syncIntervalId);
            this._syncIntervalId = undefined;
        }
    };
    SyncManagerLevel.prototype.enqueueOperations = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var syncDirection, syncPeerState, syncPeerState_1, syncPeerState_1_1, syncState, eventLog, syncOperations, eventLog_1, eventLog_1_1, event_1, operationKey, operation, syncQueue, e_5_1;
            var e_5, _a, e_6, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        syncDirection = options.syncDirection, syncPeerState = options.syncPeerState;
                        _c.label = 1;
                    case 1:
                        _c.trys.push([1, 7, 8, 9]);
                        syncPeerState_1 = __values(syncPeerState), syncPeerState_1_1 = syncPeerState_1.next();
                        _c.label = 2;
                    case 2:
                        if (!!syncPeerState_1_1.done) return [3 /*break*/, 6];
                        syncState = syncPeerState_1_1.value;
                        return [4 /*yield*/, this.getDwnEventLog({
                                did: syncState.did,
                                dwnUrl: syncState.dwnUrl,
                                syncDirection: syncDirection,
                                watermark: syncState.watermark
                            })];
                    case 3:
                        eventLog = _c.sent();
                        syncOperations = [];
                        try {
                            for (eventLog_1 = (e_6 = void 0, __values(eventLog)), eventLog_1_1 = eventLog_1.next(); !eventLog_1_1.done; eventLog_1_1 = eventLog_1.next()) {
                                event_1 = eventLog_1_1.value;
                                operationKey = [
                                    syncState.did,
                                    syncState.dwnUrl,
                                    event_1.watermark,
                                    event_1.messageCid
                                ].join('~');
                                operation = { type: 'put', key: operationKey, value: '' };
                                syncOperations.push(operation);
                            }
                        }
                        catch (e_6_1) { e_6 = { error: e_6_1 }; }
                        finally {
                            try {
                                if (eventLog_1_1 && !eventLog_1_1.done && (_b = eventLog_1.return)) _b.call(eventLog_1);
                            }
                            finally { if (e_6) throw e_6.error; }
                        }
                        if (!(syncOperations.length > 0)) return [3 /*break*/, 5];
                        syncQueue = (syncDirection === 'pull')
                            ? this.getPullQueue()
                            : this.getPushQueue();
                        return [4 /*yield*/, syncQueue.batch(syncOperations)];
                    case 4:
                        _c.sent();
                        _c.label = 5;
                    case 5:
                        syncPeerState_1_1 = syncPeerState_1.next();
                        return [3 /*break*/, 2];
                    case 6: return [3 /*break*/, 9];
                    case 7:
                        e_5_1 = _c.sent();
                        e_5 = { error: e_5_1 };
                        return [3 /*break*/, 9];
                    case 8:
                        try {
                            if (syncPeerState_1_1 && !syncPeerState_1_1.done && (_a = syncPeerState_1.return)) _a.call(syncPeerState_1);
                        }
                        finally { if (e_5) throw e_5.error; }
                        return [7 /*endfinally*/];
                    case 9: return [2 /*return*/];
                }
            });
        });
    };
    SyncManagerLevel.prototype.getDwnEventLog = function (options) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var did, dwnUrl, syncDirection, watermark, eventsReply, eventsGetMessage, _b, eventLog;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        did = options.did, dwnUrl = options.dwnUrl, syncDirection = options.syncDirection, watermark = options.watermark;
                        eventsReply = {};
                        if (!(syncDirection === 'pull')) return [3 /*break*/, 6];
                        return [4 /*yield*/, this.agent.dwnManager.createMessage({
                                author: did,
                                messageType: 'EventsGet',
                                messageOptions: { watermark: watermark }
                            })];
                    case 1:
                        eventsGetMessage = _c.sent();
                        _c.label = 2;
                    case 2:
                        _c.trys.push([2, 4, , 5]);
                        return [4 /*yield*/, this.agent.rpcClient.sendDwnRequest({
                                dwnUrl: dwnUrl,
                                targetDid: did,
                                message: eventsGetMessage
                            })];
                    case 3:
                        eventsReply = _c.sent();
                        return [3 /*break*/, 5];
                    case 4:
                        _b = _c.sent();
                        return [3 /*break*/, 5];
                    case 5: return [3 /*break*/, 8];
                    case 6:
                        if (!(syncDirection === 'push')) return [3 /*break*/, 8];
                        return [4 /*yield*/, this.agent.dwnManager.processRequest({
                                author: did,
                                target: did,
                                messageType: 'EventsGet',
                                messageOptions: { watermark: watermark }
                            })];
                    case 7:
                        // When sync is a push, get the event log from the local DWN.
                        (eventsReply = (_c.sent()).reply);
                        _c.label = 8;
                    case 8:
                        eventLog = (_a = eventsReply.events) !== null && _a !== void 0 ? _a : [];
                        return [2 /*return*/, eventLog];
                }
            });
        });
    };
    SyncManagerLevel.prototype.getDwnMessage = function (author, messageCid) {
        return __awaiter(this, void 0, void 0, function () {
            var messagesGetResponse, reply, _a, messageEntry, message, dwnMessage, messageType, encodedData, writeMessage, dataBytes, readResponse, reply_1, dataBytes, status_1;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.agent.dwnManager.processRequest({
                            author: author,
                            target: author,
                            messageType: 'MessagesGet',
                            messageOptions: {
                                messageCids: [messageCid]
                            }
                        })];
                    case 1:
                        messagesGetResponse = _b.sent();
                        reply = messagesGetResponse.reply;
                        /** Absence of a messageEntry or message within messageEntry can happen because updating a
                         * Record creates another RecordsWrite with the same recordId. Only the first and
                         * most recent RecordsWrite messages are kept for a given recordId. Any RecordsWrite messages
                         * that aren't the first or most recent are discarded by the DWN. */
                        if (!(reply.messages && reply.messages.length === 1)) {
                            return [2 /*return*/, undefined];
                        }
                        _a = __read(reply.messages, 1), messageEntry = _a[0];
                        message = messageEntry.message;
                        if (!message) {
                            return [2 /*return*/, undefined];
                        }
                        dwnMessage = { message: message };
                        messageType = "".concat(message.descriptor.interface).concat(message.descriptor.method);
                        if (!(messageType === 'RecordsWrite')) return [3 /*break*/, 6];
                        encodedData = messageEntry.encodedData;
                        writeMessage = message;
                        if (!encodedData) return [3 /*break*/, 2];
                        dataBytes = common_1.Convert.base64Url(encodedData).toUint8Array();
                        dwnMessage.data = new Blob([dataBytes]);
                        return [3 /*break*/, 6];
                    case 2: return [4 /*yield*/, this.agent.dwnManager.processRequest({
                            author: author,
                            target: author,
                            messageType: 'RecordsRead',
                            messageOptions: {
                                recordId: writeMessage.recordId
                            }
                        })];
                    case 3:
                        readResponse = _b.sent();
                        reply_1 = readResponse.reply;
                        if (!(is2xx(reply_1.status.code) && reply_1.record)) return [3 /*break*/, 5];
                        return [4 /*yield*/, dwn_sdk_js_1.DataStream.toBytes(reply_1.record.data)];
                    case 4:
                        dataBytes = _b.sent();
                        dwnMessage.data = new Blob([dataBytes]);
                        return [3 /*break*/, 6];
                    case 5:
                        if (is4xx(reply_1.status.code)) {
                            /** If status code is 400-499, typically 404 indicating the data no longer exists, it is
                             * likely that a `RecordsDelete` took place. `RecordsDelete` keeps a `RecordsWrite` and
                             * deletes the associated data, effectively acting as a "tombstone."  Sync still needs to
                             * _push_ this tombstone so that the `RecordsDelete` can be processed successfully. */
                        }
                        else {
                            status_1 = reply_1.status;
                            throw new Error("SyncManager: Failed to read data associated with record ".concat(writeMessage.recordId, ". (").concat(status_1.code, ") ").concat(status_1.detail, "}"));
                        }
                        _b.label = 6;
                    case 6: return [2 /*return*/, dwnMessage];
                }
            });
        });
    };
    SyncManagerLevel.prototype.getSyncPeerState = function (options) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function () {
            var syncDirection, registeredIdentities, syncPeerState, registeredIdentities_1, registeredIdentities_1_1, did, _c, didDocument, didResolutionMetadata, errorCode, defaultMessage, errorMessage, _d, service, _e, _f, dwnUrl, watermark, e_7_1, e_8_1;
            var e_8, _g, e_7, _h;
            return __generator(this, function (_j) {
                switch (_j.label) {
                    case 0:
                        syncDirection = options.syncDirection;
                        return [4 /*yield*/, this._db.sublevel('registeredIdentities').keys().all()];
                    case 1:
                        registeredIdentities = _j.sent();
                        syncPeerState = [];
                        _j.label = 2;
                    case 2:
                        _j.trys.push([2, 14, 15, 16]);
                        registeredIdentities_1 = __values(registeredIdentities), registeredIdentities_1_1 = registeredIdentities_1.next();
                        _j.label = 3;
                    case 3:
                        if (!!registeredIdentities_1_1.done) return [3 /*break*/, 13];
                        did = registeredIdentities_1_1.value;
                        return [4 /*yield*/, this.agent.didResolver.resolve(did)];
                    case 4:
                        _c = _j.sent(), didDocument = _c.didDocument, didResolutionMetadata = _c.didResolutionMetadata;
                        // If DID resolution fails, throw an error.
                        if (!didDocument) {
                            errorCode = (_a = "".concat(didResolutionMetadata === null || didResolutionMetadata === void 0 ? void 0 : didResolutionMetadata.error, ": ")) !== null && _a !== void 0 ? _a : '';
                            defaultMessage = "Unable to resolve DID: ".concat(did);
                            errorMessage = (_b = didResolutionMetadata === null || didResolutionMetadata === void 0 ? void 0 : didResolutionMetadata.errorMessage) !== null && _b !== void 0 ? _b : defaultMessage;
                            throw new Error("SyncManager: ".concat(errorCode).concat(errorMessage));
                        }
                        _d = __read(dids_1.utils.getServices({ didDocument: didDocument, id: '#dwn' }), 1), service = _d[0];
                        /** Silently ignore and do not try to perform Sync for any DID that does not have a DWN
                         * service endpoint published in its DID document. **/
                        if (!service) {
                            return [3 /*break*/, 12];
                        }
                        if (!dids_1.utils.isDwnServiceEndpoint(service.serviceEndpoint)) {
                            throw new Error("SyncManager: Malformed '#dwn' service endpoint. Expected array of node addresses.");
                        }
                        _j.label = 5;
                    case 5:
                        _j.trys.push([5, 10, 11, 12]);
                        _e = (e_7 = void 0, __values(service.serviceEndpoint.nodes)), _f = _e.next();
                        _j.label = 6;
                    case 6:
                        if (!!_f.done) return [3 /*break*/, 9];
                        dwnUrl = _f.value;
                        return [4 /*yield*/, this.getWatermark(did, dwnUrl, syncDirection)];
                    case 7:
                        watermark = _j.sent();
                        syncPeerState.push({ did: did, dwnUrl: dwnUrl, watermark: watermark });
                        _j.label = 8;
                    case 8:
                        _f = _e.next();
                        return [3 /*break*/, 6];
                    case 9: return [3 /*break*/, 12];
                    case 10:
                        e_7_1 = _j.sent();
                        e_7 = { error: e_7_1 };
                        return [3 /*break*/, 12];
                    case 11:
                        try {
                            if (_f && !_f.done && (_h = _e.return)) _h.call(_e);
                        }
                        finally { if (e_7) throw e_7.error; }
                        return [7 /*endfinally*/];
                    case 12:
                        registeredIdentities_1_1 = registeredIdentities_1.next();
                        return [3 /*break*/, 3];
                    case 13: return [3 /*break*/, 16];
                    case 14:
                        e_8_1 = _j.sent();
                        e_8 = { error: e_8_1 };
                        return [3 /*break*/, 16];
                    case 15:
                        try {
                            if (registeredIdentities_1_1 && !registeredIdentities_1_1.done && (_g = registeredIdentities_1.return)) _g.call(registeredIdentities_1);
                        }
                        finally { if (e_8) throw e_8.error; }
                        return [7 /*endfinally*/];
                    case 16: return [2 /*return*/, syncPeerState];
                }
            });
        });
    };
    SyncManagerLevel.prototype.getWatermark = function (did, dwnUrl, direction) {
        return __awaiter(this, void 0, void 0, function () {
            var wmKey, watermarkStore, error_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        wmKey = "".concat(did, "~").concat(dwnUrl, "~").concat(direction);
                        watermarkStore = this.getWatermarkStore();
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, watermarkStore.get(wmKey)];
                    case 2: return [2 /*return*/, _a.sent()];
                    case 3:
                        error_2 = _a.sent();
                        // Don't throw when a key wasn't found.
                        if (error_2.notFound) {
                            return [2 /*return*/, undefined];
                        }
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    SyncManagerLevel.prototype.setWatermark = function (did, dwnUrl, direction, watermark) {
        return __awaiter(this, void 0, void 0, function () {
            var wmKey, watermarkStore;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        wmKey = "".concat(did, "~").concat(dwnUrl, "~").concat(direction);
                        watermarkStore = this.getWatermarkStore();
                        return [4 /*yield*/, watermarkStore.put(wmKey, watermark)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * The message store is used to prevent "echoes" that occur during a sync pull operation.
     * After a message is confirmed to already be synchronized on the local DWN, its CID is added
     * to the message store to ensure that any subsequent pull attempts are skipped.
     */
    SyncManagerLevel.prototype.messageExists = function (did, messageCid) {
        return __awaiter(this, void 0, void 0, function () {
            var messageStore, error_3;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        messageStore = this.getMessageStore(did);
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, messageStore.get(messageCid)];
                    case 2:
                        _a.sent();
                        return [2 /*return*/, true];
                    case 3:
                        error_3 = _a.sent();
                        if (error_3.notFound) {
                            return [2 /*return*/, false];
                        }
                        throw error_3;
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    SyncManagerLevel.prototype.addMessage = function (did, messageCid) {
        return __awaiter(this, void 0, void 0, function () {
            var messageStore;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        messageStore = this.getMessageStore(did);
                        return [4 /*yield*/, messageStore.put(messageCid, '')];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    SyncManagerLevel.prototype.getMessageStore = function (did) {
        return this._db.sublevel('history').sublevel(did).sublevel('messages');
    };
    SyncManagerLevel.prototype.getWatermarkStore = function () {
        return this._db.sublevel('watermarks');
    };
    SyncManagerLevel.prototype.getPushQueue = function () {
        return this._db.sublevel('pushQueue');
    };
    SyncManagerLevel.prototype.getPullQueue = function () {
        return this._db.sublevel('pullQueue');
    };
    SyncManagerLevel.prototype.getDwnMessageType = function (message) {
        return "".concat(message.descriptor.interface).concat(message.descriptor.method);
    };
    return SyncManagerLevel;
}());
exports.SyncManagerLevel = SyncManagerLevel;
//# sourceMappingURL=sync-manager.js.map