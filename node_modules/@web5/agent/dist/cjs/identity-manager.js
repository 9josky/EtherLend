"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.IdentityManager = void 0;
var store_managed_identity_js_1 = require("./store-managed-identity.js");
var IdentityManager = /** @class */ (function () {
    function IdentityManager(options) {
        var _a = options !== null && options !== void 0 ? options : {}, agent = _a.agent, store = _a.store;
        this._agent = agent;
        this._store = store !== null && store !== void 0 ? store : new store_managed_identity_js_1.IdentityStoreMemory();
    }
    Object.defineProperty(IdentityManager.prototype, "agent", {
        /**
         * Retrieves the `Web5ManagedAgent` execution context.
         * If the `agent` instance proprety is undefined, it will throw an error.
         *
         * @returns The `Web5ManagedAgent` instance that represents the current execution
         * context.
         *
         * @throws Will throw an error if the `agent` instance property is undefined.
         */
        get: function () {
            if (this._agent === undefined) {
                throw new Error('IdentityManager: Unable to determine agent execution context.');
            }
            return this._agent;
        },
        set: function (agent) {
            this._agent = agent;
        },
        enumerable: false,
        configurable: true
    });
    IdentityManager.prototype.create = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var context, did, didMethod, didOptions, kms, name, managedDid, agent, identity;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        context = options.context, did = options.did, didMethod = options.didMethod, didOptions = options.didOptions, kms = options.kms, name = options.name;
                        if (!(didMethod ? !did : did)) {
                            throw new Error("Either 'did' or 'didMethod' must be defined, but not both.");
                        }
                        agent = this.agent;
                        if (!didMethod) return [3 /*break*/, 2];
                        return [4 /*yield*/, agent.didManager.create(__assign({ method: didMethod, context: context, kms: kms }, didOptions))];
                    case 1:
                        // Create new DID and generate key set.
                        managedDid = _a.sent();
                        return [3 /*break*/, 4];
                    case 2:
                        if (!did) return [3 /*break*/, 4];
                        return [4 /*yield*/, agent.didManager.import({ did: did, context: context, kms: kms })];
                    case 3:
                        // Import given DID and key set.
                        managedDid = _a.sent();
                        _a.label = 4;
                    case 4:
                        if (managedDid === undefined) {
                            throw new Error('IdentityManager: Unable to generate or import DID.');
                        }
                        identity = {
                            did: managedDid.did,
                            name: name
                        };
                        /** If context is undefined, then the Identity will be stored under the
                         * tenant of the created DID. Otherwise, the Identity records will
                         * be stored under the tenant of the specified context. */
                        context !== null && context !== void 0 ? context : (context = identity.did);
                        // Store the ManagedIdentity in the store.
                        return [4 /*yield*/, this._store.importIdentity({ identity: identity, agent: agent, context: context })];
                    case 5:
                        // Store the ManagedIdentity in the store.
                        _a.sent();
                        return [2 /*return*/, identity];
                }
            });
        });
    };
    IdentityManager.prototype.get = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var context, did, identity;
            return __generator(this, function (_a) {
                context = options.context, did = options.did;
                identity = this._store.getIdentity({ did: did, agent: this.agent, context: context });
                return [2 /*return*/, identity];
            });
        });
    };
    IdentityManager.prototype.import = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var context, did, identity, kms, agent;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        context = options.context, did = options.did, identity = options.identity, kms = options.kms;
                        agent = this.agent;
                        if (!did) return [3 /*break*/, 2];
                        return [4 /*yield*/, agent.didManager.import({ did: did, context: context, kms: kms })];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2:
                        /** If context is undefined, then the Identity will be stored under the
                         * tenant of the imported DID. Otherwise, the Identity record will
                         * be stored under the tenant of the specified context. */
                        context !== null && context !== void 0 ? context : (context = identity.did);
                        // Store the ManagedIdentity in the store.
                        return [4 /*yield*/, this._store.importIdentity({ identity: identity, agent: agent, context: context })];
                    case 3:
                        // Store the ManagedIdentity in the store.
                        _a.sent();
                        return [2 /*return*/, identity];
                }
            });
        });
    };
    IdentityManager.prototype.list = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var context, identities;
            return __generator(this, function (_a) {
                context = (options !== null && options !== void 0 ? options : {}).context;
                identities = this._store.listIdentities({ agent: this.agent, context: context });
                return [2 /*return*/, identities];
            });
        });
    };
    return IdentityManager;
}());
exports.IdentityManager = IdentityManager;
//# sourceMappingURL=identity-manager.js.map