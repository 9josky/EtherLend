"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LocalKms = exports.defaultAlgorithms = void 0;
var crypto_1 = require("@web5/crypto");
var crypto_2 = require("@web5/crypto");
var utils_js_1 = require("./utils.js");
var store_managed_key_js_1 = require("./store-managed-key.js");
// Map key operations to algorithm specs to implementations.
exports.defaultAlgorithms = {
    'AES-CTR': crypto_2.AesCtrAlgorithm,
    ECDH: crypto_2.EcdhAlgorithm,
    ECDSA: crypto_2.EcdsaAlgorithm,
    EdDSA: crypto_2.EdDsaAlgorithm,
};
var LocalKms = /** @class */ (function () {
    function LocalKms(options) {
        this._supportedAlgorithms = new Map();
        var agent = options.agent, kmsName = options.kmsName, keyStore = options.keyStore, privateKeyStore = options.privateKeyStore;
        this._agent = agent;
        this._name = kmsName;
        this._keyStore = keyStore !== null && keyStore !== void 0 ? keyStore : new store_managed_key_js_1.KeyStoreMemory();
        this._privateKeyStore = privateKeyStore !== null && privateKeyStore !== void 0 ? privateKeyStore : new store_managed_key_js_1.PrivateKeyStoreMemory();
        // Merge the default and custom algorithms and register with the KMS.
        var cryptoAlgorithms = __assign(__assign({}, exports.defaultAlgorithms), options.cryptoAlgorithms);
        this.registerSupportedAlgorithms(cryptoAlgorithms);
    }
    Object.defineProperty(LocalKms.prototype, "agent", {
        /**
         * Retrieves the `Web5ManagedAgent` execution context.
         * If the `agent` instance proprety is undefined, it will throw an error.
         *
         * @returns The `Web5ManagedAgent` instance that represents the current execution
         * context.
         *
         * @throws Will throw an error if the `agent` instance property is undefined.
         */
        get: function () {
            if (this._agent === undefined) {
                throw new Error('KeyManager: Unable to determine agent execution context.');
            }
            return this._agent;
        },
        set: function (agent) {
            this._agent = agent;
        },
        enumerable: false,
        configurable: true
    });
    LocalKms.prototype.decrypt = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var algorithm, data, keyRef, key, privateManagedKey, privateCryptoKey, cryptoAlgorithm, plaintext;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        algorithm = options.algorithm, data = options.data, keyRef = options.keyRef;
                        return [4 /*yield*/, this.getKey({ keyRef: keyRef })];
                    case 1:
                        key = _a.sent();
                        if (!(0, utils_js_1.isManagedKey)(key)) return [3 /*break*/, 3];
                        return [4 /*yield*/, this._privateKeyStore.getKey({
                                id: key.id,
                                agent: this.agent
                            })];
                    case 2:
                        privateManagedKey = _a.sent();
                        if (privateManagedKey !== undefined) {
                            privateCryptoKey = this.toCryptoKey(__assign(__assign({}, key), { material: privateManagedKey.material }));
                            cryptoAlgorithm = this.getAlgorithm(algorithm);
                            plaintext = cryptoAlgorithm.decrypt({ algorithm: algorithm, key: privateCryptoKey, data: data });
                            return [2 /*return*/, plaintext];
                        }
                        _a.label = 3;
                    case 3: throw new Error("Operation failed: 'decrypt'. Key not found: ".concat(keyRef));
                }
            });
        });
    };
    LocalKms.prototype.deriveBits = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var algorithm, baseKeyRef, length, ownKeyPair, privateManagedKey, privateCryptoKey, cryptoAlgorithm, sharedSecret;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        algorithm = options.algorithm, baseKeyRef = options.baseKeyRef, length = options.length;
                        return [4 /*yield*/, this.getKey({ keyRef: baseKeyRef })];
                    case 1:
                        ownKeyPair = _a.sent();
                        if (!(0, utils_js_1.isManagedKeyPair)(ownKeyPair)) return [3 /*break*/, 3];
                        return [4 /*yield*/, this._privateKeyStore.getKey({
                                id: ownKeyPair.privateKey.id,
                                agent: this.agent
                            })];
                    case 2:
                        privateManagedKey = _a.sent();
                        if (privateManagedKey !== undefined) {
                            privateCryptoKey = this.toCryptoKey(__assign(__assign({}, ownKeyPair.privateKey), { material: privateManagedKey.material }));
                            cryptoAlgorithm = this.getAlgorithm(algorithm);
                            sharedSecret = cryptoAlgorithm.deriveBits({ algorithm: algorithm, baseKey: privateCryptoKey, length: length !== null && length !== void 0 ? length : null });
                            return [2 /*return*/, sharedSecret];
                        }
                        _a.label = 3;
                    case 3: throw new Error("Operation failed: 'deriveBits'. Key not found: ".concat(baseKeyRef));
                }
            });
        });
    };
    LocalKms.prototype.encrypt = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var algorithm, data, keyRef, key, privateManagedKey, privateCryptoKey, cryptoAlgorithm, ciphertext;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        algorithm = options.algorithm, data = options.data, keyRef = options.keyRef;
                        return [4 /*yield*/, this.getKey({ keyRef: keyRef })];
                    case 1:
                        key = _a.sent();
                        if (!(0, utils_js_1.isManagedKey)(key)) return [3 /*break*/, 3];
                        return [4 /*yield*/, this._privateKeyStore.getKey({
                                id: key.id,
                                agent: this.agent
                            })];
                    case 2:
                        privateManagedKey = _a.sent();
                        if (privateManagedKey !== undefined) {
                            privateCryptoKey = this.toCryptoKey(__assign(__assign({}, key), { material: privateManagedKey.material }));
                            cryptoAlgorithm = this.getAlgorithm(algorithm);
                            ciphertext = cryptoAlgorithm.encrypt({ algorithm: algorithm, key: privateCryptoKey, data: data });
                            return [2 /*return*/, ciphertext];
                        }
                        _a.label = 3;
                    case 3: throw new Error("Operation failed: 'encrypt'. Key not found: ".concat(keyRef));
                }
            });
        });
    };
    LocalKms.prototype.generateKey = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var algorithm, alias, extractable, keyUsages, metadata, cryptoAlgorithm, cryptoKey, managedKeyOrKeyPair, privateKeyType, id, managedKeyPair, keyType, id;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        algorithm = options.algorithm, alias = options.alias, extractable = options.extractable, keyUsages = options.keyUsages, metadata = options.metadata;
                        cryptoAlgorithm = this.getAlgorithm(algorithm);
                        // Generate the key.
                        extractable !== null && extractable !== void 0 ? extractable : (extractable = true); // Default to extractable if not specified.
                        return [4 /*yield*/, cryptoAlgorithm.generateKey({ algorithm: algorithm, extractable: extractable, keyUsages: keyUsages })];
                    case 1:
                        cryptoKey = _a.sent();
                        if (!crypto_1.utils.isCryptoKeyPair(cryptoKey)) return [3 /*break*/, 3];
                        privateKeyType = cryptoKey.privateKey.type;
                        return [4 /*yield*/, this._privateKeyStore.importKey({
                                key: { material: cryptoKey.privateKey.material, type: privateKeyType },
                                agent: this.agent
                            })];
                    case 2:
                        id = _a.sent();
                        managedKeyPair = {
                            privateKey: this.toManagedKey(__assign(__assign({}, cryptoKey.privateKey), { id: id, alias: alias, metadata: metadata })),
                            publicKey: this.toManagedKey(__assign(__assign({}, cryptoKey.publicKey), { material: cryptoKey.publicKey.material, id: id, alias: alias, metadata: metadata }))
                        };
                        managedKeyOrKeyPair = managedKeyPair;
                        return [3 /*break*/, 5];
                    case 3:
                        keyType = cryptoKey.type;
                        return [4 /*yield*/, this._privateKeyStore.importKey({
                                key: { material: cryptoKey.material, type: keyType },
                                agent: this.agent
                            })];
                    case 4:
                        id = _a.sent();
                        managedKeyOrKeyPair = this.toManagedKey(__assign(__assign({}, cryptoKey), { id: id, alias: alias, metadata: metadata }));
                        _a.label = 5;
                    case 5: 
                    // Store the ManagedKey or ManagedKeyPair in the KMS key store.
                    return [4 /*yield*/, this._keyStore.importKey({ key: managedKeyOrKeyPair, agent: this.agent })];
                    case 6:
                        // Store the ManagedKey or ManagedKeyPair in the KMS key store.
                        _a.sent();
                        return [2 /*return*/, managedKeyOrKeyPair];
                }
            });
        });
    };
    LocalKms.prototype.getKey = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var keyOrKeyPair;
            return __generator(this, function (_a) {
                keyOrKeyPair = this._keyStore.getKey({ id: options.keyRef, agent: this.agent });
                return [2 /*return*/, keyOrKeyPair];
            });
        });
    };
    LocalKms.prototype.importKey = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var privateKey, publicKey, id, managedKeyPair, keyType, _a, material, id, privateManagedKey, material, publicManagedKey, _b, material, id, secretManagedKey;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (!('privateKey' in options)) return [3 /*break*/, 3];
                        privateKey = options.privateKey, publicKey = options.publicKey;
                        if (privateKey.type === 'public' && publicKey.type === 'private')
                            throw new Error("Import failed due to private and public key mismatch");
                        if (!(privateKey.type === 'private' && publicKey.type === 'public'))
                            throw new TypeError("Out of range: '".concat(privateKey.type, ", ").concat(publicKey.type, "'. Must be 'private, public'"));
                        return [4 /*yield*/, this._privateKeyStore.importKey({
                                key: { material: privateKey.material, type: privateKey.type },
                                agent: this.agent
                            })];
                    case 1:
                        id = _c.sent();
                        managedKeyPair = {
                            privateKey: this.toManagedKey(__assign(__assign({}, privateKey), { id: id, material: undefined })),
                            publicKey: this.toManagedKey(__assign(__assign({}, publicKey), { material: publicKey.material, id: id }))
                        };
                        return [4 /*yield*/, this._keyStore.importKey({ key: managedKeyPair, agent: this.agent })];
                    case 2:
                        _c.sent();
                        return [2 /*return*/, managedKeyPair];
                    case 3:
                        keyType = options.type;
                        _a = keyType;
                        switch (_a) {
                            case 'private': return [3 /*break*/, 4];
                            case 'public': return [3 /*break*/, 7];
                            case 'secret': return [3 /*break*/, 9];
                        }
                        return [3 /*break*/, 12];
                    case 4:
                        material = options.material;
                        return [4 /*yield*/, this._privateKeyStore.importKey({
                                key: { material: material, type: keyType },
                                agent: this.agent
                            })];
                    case 5:
                        id = _c.sent();
                        privateManagedKey = this.toManagedKey(__assign(__assign({}, options), { material: undefined, id: id }));
                        return [4 /*yield*/, this._keyStore.importKey({ key: privateManagedKey, agent: this.agent })];
                    case 6:
                        _c.sent();
                        return [2 /*return*/, privateManagedKey];
                    case 7:
                        material = options.material;
                        publicManagedKey = this.toManagedKey(__assign(__assign({}, options), { material: material, id: '' }));
                        _b = publicManagedKey;
                        return [4 /*yield*/, this._keyStore.importKey({ key: publicManagedKey, agent: this.agent })];
                    case 8:
                        _b.id = _c.sent();
                        return [2 /*return*/, publicManagedKey];
                    case 9:
                        material = options.material;
                        return [4 /*yield*/, this._privateKeyStore.importKey({
                                key: { material: material, type: keyType },
                                agent: this.agent
                            })];
                    case 10:
                        id = _c.sent();
                        secretManagedKey = this.toManagedKey(__assign(__assign({}, options), { material: undefined, id: id }));
                        return [4 /*yield*/, this._keyStore.importKey({ key: secretManagedKey, agent: this.agent })];
                    case 11:
                        _c.sent();
                        return [2 /*return*/, secretManagedKey];
                    case 12: throw new TypeError("Out of range: '".concat(keyType, "'. Must be one of 'private, public, secret'"));
                }
            });
        });
    };
    LocalKms.prototype.sign = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var algorithm, data, keyRef, keyPair, privateManagedKey, privateCryptoKey, cryptoAlgorithm, signature;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        algorithm = options.algorithm, data = options.data, keyRef = options.keyRef;
                        return [4 /*yield*/, this.getKey({ keyRef: keyRef })];
                    case 1:
                        keyPair = _a.sent();
                        if (!(0, utils_js_1.isManagedKeyPair)(keyPair)) return [3 /*break*/, 3];
                        return [4 /*yield*/, this._privateKeyStore.getKey({
                                id: keyPair.privateKey.id,
                                agent: this.agent
                            })];
                    case 2:
                        privateManagedKey = _a.sent();
                        if (privateManagedKey !== undefined) {
                            privateCryptoKey = this.toCryptoKey(__assign(__assign({}, keyPair.privateKey), { material: privateManagedKey.material }));
                            cryptoAlgorithm = this.getAlgorithm(algorithm);
                            signature = cryptoAlgorithm.sign({ algorithm: algorithm, key: privateCryptoKey, data: data });
                            return [2 /*return*/, signature];
                        }
                        _a.label = 3;
                    case 3: throw new Error("Operation failed: 'sign'. Key not found: ".concat(keyRef));
                }
            });
        });
    };
    LocalKms.prototype.updateKey = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var keyRef, alias, metadata, keyOrKeyPair, keyId;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        keyRef = options.keyRef, alias = options.alias, metadata = options.metadata;
                        return [4 /*yield*/, this.getKey({ keyRef: keyRef })];
                    case 1:
                        keyOrKeyPair = _a.sent();
                        if (!keyOrKeyPair) {
                            throw new Error("Key not found: '".concat(keyRef, "'"));
                        }
                        keyId = ((0, utils_js_1.isManagedKeyPair)(keyOrKeyPair))
                            ? keyOrKeyPair.publicKey.id
                            : keyOrKeyPair.id;
                        // Update the KMS key metadata store.
                        return [2 /*return*/, this._keyStore.updateKey({ id: keyId, alias: alias, metadata: metadata, agent: this.agent })];
                }
            });
        });
    };
    LocalKms.prototype.verify = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var algorithm, data, keyRef, signature, keyPair, publicCryptoKey, cryptoAlgorithm, isValid;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        algorithm = options.algorithm, data = options.data, keyRef = options.keyRef, signature = options.signature;
                        return [4 /*yield*/, this.getKey({ keyRef: keyRef })];
                    case 1:
                        keyPair = _a.sent();
                        if ((0, utils_js_1.isManagedKeyPair)(keyPair)) {
                            if (keyPair.publicKey.material === undefined) {
                                throw new Error("Required property missing: 'material'");
                            }
                            publicCryptoKey = this.toCryptoKey(__assign(__assign({}, keyPair.publicKey), { material: keyPair.publicKey.material }));
                            cryptoAlgorithm = this.getAlgorithm(algorithm);
                            isValid = cryptoAlgorithm.verify({ algorithm: algorithm, key: publicCryptoKey, signature: signature, data: data });
                            return [2 /*return*/, isValid];
                        }
                        throw new Error("Operation failed: 'verify'. Key not found: ".concat(keyRef));
                }
            });
        });
    };
    LocalKms.prototype.getAlgorithm = function (algorithmIdentifier) {
        crypto_1.utils.checkRequiredProperty({ property: 'name', inObject: algorithmIdentifier });
        var algorithm = this._supportedAlgorithms.get(algorithmIdentifier.name.toUpperCase());
        if (algorithm === undefined) {
            throw new Error("The algorithm '".concat(algorithmIdentifier.name, "' is not supported"));
        }
        return algorithm.create();
    };
    LocalKms.prototype.registerSupportedAlgorithms = function (cryptoAlgorithms) {
        var e_1, _a;
        try {
            for (var _b = __values(Object.entries(cryptoAlgorithms)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var _d = __read(_c.value, 2), name_1 = _d[0], implementation = _d[1];
                // Add the algorithm name and its implementation to the supported algorithms map,
                // upper-cased to allow for case-insensitive.
                this._supportedAlgorithms.set(name_1.toUpperCase(), implementation);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
    };
    LocalKms.prototype.toCryptoKey = function (managedKey) {
        var cryptoKey = {
            algorithm: managedKey.algorithm,
            extractable: managedKey.extractable,
            material: managedKey.material,
            type: managedKey.type,
            usages: managedKey.usages
        };
        return cryptoKey;
    };
    LocalKms.prototype.toManagedKey = function (options) {
        var managedKey = {
            id: options.id,
            algorithm: options.algorithm,
            alias: options.alias,
            extractable: options.extractable,
            kms: this._name,
            material: (options.type === 'public') ? options.material : undefined,
            metadata: options.metadata,
            state: 'Enabled',
            type: options.type,
            usages: options.usages
        };
        return managedKey;
    };
    return LocalKms;
}());
exports.LocalKms = LocalKms;
//# sourceMappingURL=kms-local.js.map