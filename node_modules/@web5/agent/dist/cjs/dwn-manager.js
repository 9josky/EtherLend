"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.DwnManager = void 0;
var crypto_1 = require("@web5/crypto");
var common_1 = require("@web5/common");
var dids_1 = require("@web5/dids");
var dwn_sdk_js_1 = require("@tbd54566975/dwn-sdk-js");
var utils_js_1 = require("./utils.js");
var utils_js_2 = require("./utils.js");
var dwnMessageCreators = (_a = {},
    _a[dwn_sdk_js_1.DwnInterfaceName.Events + dwn_sdk_js_1.DwnMethodName.Get] = dwn_sdk_js_1.EventsGet,
    _a[dwn_sdk_js_1.DwnInterfaceName.Messages + dwn_sdk_js_1.DwnMethodName.Get] = dwn_sdk_js_1.MessagesGet,
    _a[dwn_sdk_js_1.DwnInterfaceName.Records + dwn_sdk_js_1.DwnMethodName.Read] = dwn_sdk_js_1.RecordsRead,
    _a[dwn_sdk_js_1.DwnInterfaceName.Records + dwn_sdk_js_1.DwnMethodName.Query] = dwn_sdk_js_1.RecordsQuery,
    _a[dwn_sdk_js_1.DwnInterfaceName.Records + dwn_sdk_js_1.DwnMethodName.Write] = dwn_sdk_js_1.RecordsWrite,
    _a[dwn_sdk_js_1.DwnInterfaceName.Records + dwn_sdk_js_1.DwnMethodName.Delete] = dwn_sdk_js_1.RecordsDelete,
    _a[dwn_sdk_js_1.DwnInterfaceName.Protocols + dwn_sdk_js_1.DwnMethodName.Query] = dwn_sdk_js_1.ProtocolsQuery,
    _a[dwn_sdk_js_1.DwnInterfaceName.Protocols + dwn_sdk_js_1.DwnMethodName.Configure] = dwn_sdk_js_1.ProtocolsConfigure,
    _a);
var DwnManager = /** @class */ (function () {
    function DwnManager(options) {
        this._agent = options.agent;
        this._dwn = options.dwn;
    }
    Object.defineProperty(DwnManager.prototype, "agent", {
        /**
         * Retrieves the `Web5ManagedAgent` execution context.
         * If the `agent` instance proprety is undefined, it will throw an error.
         *
         * @returns The `Web5ManagedAgent` instance that represents the current execution
         * context.
         *
         * @throws Will throw an error if the `agent` instance property is undefined.
         */
        get: function () {
            if (this._agent === undefined) {
                throw new Error('DidManager: Unable to determine agent execution context.');
            }
            return this._agent;
        },
        set: function (agent) {
            this._agent = agent;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DwnManager.prototype, "dwn", {
        get: function () {
            return this._dwn;
        },
        enumerable: false,
        configurable: true
    });
    DwnManager.create = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, agent, dataPath, didResolver, dwn, dataStore, eventLog, messageStore;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = options !== null && options !== void 0 ? options : {}, agent = _a.agent, dataPath = _a.dataPath, didResolver = _a.didResolver, dwn = _a.dwn;
                        dataPath !== null && dataPath !== void 0 ? dataPath : (dataPath = 'DATA/AGENT');
                        if (!(dwn === undefined)) return [3 /*break*/, 2];
                        dataStore = new dwn_sdk_js_1.DataStoreLevel({
                            blockstoreLocation: "".concat(dataPath, "/DWN_DATASTORE")
                        });
                        eventLog = new dwn_sdk_js_1.EventLogLevel({
                            location: "".concat(dataPath, "/DWN_EVENTLOG")
                        });
                        messageStore = new dwn_sdk_js_1.MessageStoreLevel(({
                            blockstoreLocation: "".concat(dataPath, "/DWN_MESSAGESTORE"),
                            indexLocation: "".concat(dataPath, "/DWN_MESSAGEINDEX")
                        }));
                        return [4 /*yield*/, dwn_sdk_js_1.Dwn.create({
                                dataStore: dataStore,
                                // @ts-expect-error because `dwn-sdk-js` expects its internal DidResolver implementation.
                                didResolver: didResolver,
                                eventLog: eventLog,
                                messageStore: messageStore,
                            })];
                    case 1:
                        dwn = _b.sent();
                        _b.label = 2;
                    case 2: return [2 /*return*/, new DwnManager({ agent: agent, dwn: dwn })];
                }
            });
        });
    };
    DwnManager.prototype.processRequest = function (request) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, message, dataStream, reply;
            var _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0: return [4 /*yield*/, this.constructDwnMessage({ request: request })];
                    case 1:
                        _a = _c.sent(), message = _a.message, dataStream = _a.dataStream;
                        if (!(request.store !== false)) return [3 /*break*/, 3];
                        return [4 /*yield*/, this._dwn.processMessage(request.target, message, dataStream)];
                    case 2:
                        reply = _c.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        reply = { status: { code: 202, detail: 'Accepted' } };
                        _c.label = 4;
                    case 4:
                        _b = {
                            reply: reply,
                            message: message
                        };
                        return [4 /*yield*/, dwn_sdk_js_1.Message.getCid(message)];
                    case 5: return [2 /*return*/, (_b.messageCid = _c.sent(),
                            _b)];
                }
            });
        });
    };
    DwnManager.prototype.sendRequest = function (request) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function () {
            var dwnRpcRequest, messageData, _c, message, data, message, _d, didDocument, didResolutionMetadata, errorCode, defaultMessage, errorMessage, _e, service, dwnEndpointUrls, dwnReply, errorMessages, dwnEndpointUrls_1, dwnEndpointUrls_1_1, dwnUrl, error_1, message, e_1_1;
            var e_1, _f, _g;
            return __generator(this, function (_h) {
                switch (_h.label) {
                    case 0:
                        dwnRpcRequest = { targetDid: request.target };
                        if (!('messageCid' in request)) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.getDwnMessage({
                                author: request.author,
                                messageCid: request.messageCid,
                                messageType: request.messageType
                            })];
                    case 1:
                        _c = _h.sent(), message = _c.message, data = _c.data;
                        dwnRpcRequest.message = message;
                        messageData = data;
                        return [3 /*break*/, 4];
                    case 2: return [4 /*yield*/, this.constructDwnMessage({ request: request })];
                    case 3:
                        message = (_h.sent()).message;
                        dwnRpcRequest.message = message;
                        messageData = request.dataStream;
                        _h.label = 4;
                    case 4:
                        if (messageData) {
                            dwnRpcRequest.data = messageData;
                        }
                        return [4 /*yield*/, this.agent.didResolver.resolve(request.target)];
                    case 5:
                        _d = _h.sent(), didDocument = _d.didDocument, didResolutionMetadata = _d.didResolutionMetadata;
                        if (!didDocument) {
                            errorCode = (_a = "".concat(didResolutionMetadata === null || didResolutionMetadata === void 0 ? void 0 : didResolutionMetadata.error, ": ")) !== null && _a !== void 0 ? _a : '';
                            defaultMessage = "Unable to resolve target DID: ".concat(request.target);
                            errorMessage = (_b = didResolutionMetadata === null || didResolutionMetadata === void 0 ? void 0 : didResolutionMetadata.errorMessage) !== null && _b !== void 0 ? _b : defaultMessage;
                            throw new Error("DwnManager: ".concat(errorCode).concat(errorMessage));
                        }
                        _e = __read(dids_1.utils.getServices({ didDocument: didDocument, id: '#dwn' }), 1), service = _e[0];
                        if (!service) {
                            throw new Error("DwnManager: DID Document of '".concat(request.target, "' has no service endpoints with ID '#dwn'"));
                        }
                        if (!dids_1.utils.isDwnServiceEndpoint(service.serviceEndpoint)) {
                            throw new Error("DwnManager: Malformed '#dwn' service endpoint. Expected array of node addresses.");
                        }
                        dwnEndpointUrls = service.serviceEndpoint.nodes;
                        errorMessages = [];
                        _h.label = 6;
                    case 6:
                        _h.trys.push([6, 13, 14, 15]);
                        dwnEndpointUrls_1 = __values(dwnEndpointUrls), dwnEndpointUrls_1_1 = dwnEndpointUrls_1.next();
                        _h.label = 7;
                    case 7:
                        if (!!dwnEndpointUrls_1_1.done) return [3 /*break*/, 12];
                        dwnUrl = dwnEndpointUrls_1_1.value;
                        dwnRpcRequest.dwnUrl = dwnUrl;
                        _h.label = 8;
                    case 8:
                        _h.trys.push([8, 10, , 11]);
                        return [4 /*yield*/, this.agent.rpcClient.sendDwnRequest(dwnRpcRequest)];
                    case 9:
                        dwnReply = _h.sent();
                        return [3 /*break*/, 12];
                    case 10:
                        error_1 = _h.sent();
                        message = (error_1 instanceof Error) ? error_1.message : 'Uknown error';
                        errorMessages.push({ url: dwnUrl, message: message });
                        return [3 /*break*/, 11];
                    case 11:
                        dwnEndpointUrls_1_1 = dwnEndpointUrls_1.next();
                        return [3 /*break*/, 7];
                    case 12: return [3 /*break*/, 15];
                    case 13:
                        e_1_1 = _h.sent();
                        e_1 = { error: e_1_1 };
                        return [3 /*break*/, 15];
                    case 14:
                        try {
                            if (dwnEndpointUrls_1_1 && !dwnEndpointUrls_1_1.done && (_f = dwnEndpointUrls_1.return)) _f.call(dwnEndpointUrls_1);
                        }
                        finally { if (e_1) throw e_1.error; }
                        return [7 /*endfinally*/];
                    case 15:
                        if (!dwnReply) {
                            throw new Error(JSON.stringify(errorMessages));
                        }
                        _g = {
                            message: dwnRpcRequest.message
                        };
                        return [4 /*yield*/, dwn_sdk_js_1.Message.getCid(dwnRpcRequest.message)];
                    case 16: return [2 /*return*/, (_g.messageCid = _h.sent(),
                            _g.reply = dwnReply,
                            _g)];
                }
            });
        });
    };
    DwnManager.prototype.constructDwnMessage = function (options) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var request, readableStream, messageOptions, dataStream, isomorphicNodeReadable, _b, forCid, forProcessMessage, _c, dwnSigner, messageCreator, dwnMessage;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        request = options.request;
                        if (!(request.messageType === 'RecordsWrite')) return [3 /*break*/, 2];
                        messageOptions = request.messageOptions;
                        if (!(request.dataStream && !messageOptions.data)) return [3 /*break*/, 2];
                        dataStream = request.dataStream;
                        isomorphicNodeReadable = void 0;
                        if (dataStream instanceof Blob) {
                            isomorphicNodeReadable = (0, utils_js_2.blobToIsomorphicNodeReadable)(dataStream);
                            readableStream = (0, utils_js_2.blobToIsomorphicNodeReadable)(dataStream);
                        }
                        else if (dataStream instanceof ReadableStream) {
                            _b = __read(dataStream.tee(), 2), forCid = _b[0], forProcessMessage = _b[1];
                            isomorphicNodeReadable = (0, utils_js_2.webReadableToIsomorphicNodeReadable)(forCid);
                            readableStream = (0, utils_js_2.webReadableToIsomorphicNodeReadable)(forProcessMessage);
                        }
                        // @ts-ignore
                        _c = messageOptions;
                        return [4 /*yield*/, dwn_sdk_js_1.Cid.computeDagPbCidFromStream(isomorphicNodeReadable)];
                    case 1:
                        // @ts-ignore
                        _c.dataCid = _d.sent();
                        // @ts-ignore
                        (_a = messageOptions.dataSize) !== null && _a !== void 0 ? _a : (messageOptions.dataSize = isomorphicNodeReadable['bytesRead']);
                        _d.label = 2;
                    case 2: return [4 /*yield*/, this.constructDwnSigner(request.author)];
                    case 3:
                        dwnSigner = _d.sent();
                        messageCreator = dwnMessageCreators[request.messageType];
                        return [4 /*yield*/, messageCreator.create(__assign(__assign({}, request.messageOptions), { signer: dwnSigner }))];
                    case 4:
                        dwnMessage = _d.sent();
                        return [2 /*return*/, { message: dwnMessage.message, dataStream: readableStream }];
                }
            });
        });
    };
    DwnManager.prototype.getAuthorSigningKeyId = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var did, signingKeyId;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        did = options.did;
                        return [4 /*yield*/, this.agent.didManager.getDefaultSigningKey({ did: did })];
                    case 1:
                        signingKeyId = _a.sent();
                        if (!signingKeyId) {
                            throw new Error("DwnManager: Unable to determine signing key for author: '".concat(did, "'"));
                        }
                        return [2 /*return*/, signingKeyId];
                }
            });
        });
    };
    DwnManager.prototype.constructDwnSigner = function (author) {
        return __awaiter(this, void 0, void 0, function () {
            var signingKeyId, parsedDid, normalizedDid, normalizedSigningKeyId, signingKey, alg;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getAuthorSigningKeyId({ did: author })];
                    case 1:
                        signingKeyId = _a.sent();
                        parsedDid = dids_1.utils.parseDid({ didUrl: signingKeyId });
                        if (!parsedDid)
                            throw new Error("DidIonMethod: Unable to parse DID: ".concat(signingKeyId));
                        normalizedDid = parsedDid.did.split(':', 3).join(':');
                        normalizedSigningKeyId = "".concat(normalizedDid, "#").concat(parsedDid.fragment);
                        return [4 /*yield*/, this.agent.keyManager.getKey({ keyRef: normalizedSigningKeyId })];
                    case 2:
                        signingKey = _a.sent();
                        if (!(0, utils_js_1.isManagedKeyPair)(signingKey)) {
                            throw new Error("DwnManager: Signing key not found for author: '".concat(author, "'"));
                        }
                        alg = crypto_1.Jose.webCryptoToJose(signingKey.privateKey.algorithm).alg;
                        if (alg === undefined) {
                            throw Error("No algorithm provided to sign with key ID ".concat(signingKeyId));
                        }
                        return [2 /*return*/, {
                                keyId: signingKeyId,
                                algorithm: alg,
                                sign: function (content) { return __awaiter(_this, void 0, void 0, function () {
                                    return __generator(this, function (_a) {
                                        switch (_a.label) {
                                            case 0: return [4 /*yield*/, this.agent.keyManager.sign({
                                                    algorithm: signingKey.privateKey.algorithm,
                                                    data: content,
                                                    keyRef: normalizedSigningKeyId
                                                })];
                                            case 1: return [2 /*return*/, _a.sent()];
                                        }
                                    });
                                }); }
                            }];
                }
            });
        });
    };
    DwnManager.prototype.getDwnMessage = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var author, messageType, messageCid, dwnSigner, messagesGet, result, _a, messageEntry, message, dwnMessage, encodedData, writeMessage, dataBytes, recordsRead, reply, _b, code, detail, dataBytes;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        author = options.author, messageType = options.messageType, messageCid = options.messageCid;
                        return [4 /*yield*/, this.constructDwnSigner(author)];
                    case 1:
                        dwnSigner = _c.sent();
                        return [4 /*yield*/, dwn_sdk_js_1.MessagesGet.create({
                                messageCids: [messageCid],
                                signer: dwnSigner
                            })];
                    case 2:
                        messagesGet = _c.sent();
                        return [4 /*yield*/, this._dwn.processMessage(author, messagesGet.message)];
                    case 3:
                        result = _c.sent();
                        if (!(result.messages && result.messages.length === 1)) {
                            throw new Error('TODO: figure out error message');
                        }
                        _a = __read(result.messages, 1), messageEntry = _a[0];
                        message = messageEntry.message;
                        if (!message) {
                            throw new Error('TODO: message not found');
                        }
                        dwnMessage = { message: message };
                        if (!(messageType === 'RecordsWrite')) return [3 /*break*/, 9];
                        encodedData = messageEntry.encodedData;
                        writeMessage = message;
                        if (!encodedData) return [3 /*break*/, 4];
                        dataBytes = common_1.Convert.base64Url(encodedData).toUint8Array();
                        dwnMessage.data = new Blob([dataBytes]);
                        return [3 /*break*/, 9];
                    case 4: return [4 /*yield*/, dwn_sdk_js_1.RecordsRead.create({
                            filter: {
                                recordId: writeMessage.recordId
                            },
                            signer: dwnSigner
                        })];
                    case 5:
                        recordsRead = _c.sent();
                        return [4 /*yield*/, this._dwn.processMessage(author, recordsRead.message)];
                    case 6:
                        reply = _c.sent();
                        if (!(reply.status.code >= 400)) return [3 /*break*/, 7];
                        _b = reply.status, code = _b.code, detail = _b.detail;
                        throw new Error("(".concat(code, ") Failed to read data associated with record ").concat(writeMessage.recordId, ". ").concat(detail, "}"));
                    case 7:
                        if (!reply.record) return [3 /*break*/, 9];
                        return [4 /*yield*/, dwn_sdk_js_1.DataStream.toBytes(reply.record.data)];
                    case 8:
                        dataBytes = _c.sent();
                        dwnMessage.data = new Blob([dataBytes]);
                        _c.label = 9;
                    case 9: return [2 /*return*/, dwnMessage];
                }
            });
        });
    };
    /**
     * ADDED TO GET SYNC WORKING
     * - createMessage()
     * - processMessage()
     * - writePrunedRecord()
     */
    DwnManager.prototype.createMessage = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var author, messageOptions, messageType, dwnSigner, messageCreator, dwnMessage;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        author = options.author, messageOptions = options.messageOptions, messageType = options.messageType;
                        return [4 /*yield*/, this.constructDwnSigner(author)];
                    case 1:
                        dwnSigner = _a.sent();
                        messageCreator = dwnMessageCreators[messageType];
                        return [4 /*yield*/, messageCreator.create(__assign(__assign({}, messageOptions), { signer: dwnSigner }))];
                    case 2:
                        dwnMessage = _a.sent();
                        return [2 /*return*/, dwnMessage];
                }
            });
        });
    };
    /**
     * Writes a pruned initial `RecordsWrite` to a DWN without needing to supply associated data.
     * Note: This method should ONLY be used by a {@link SyncManager} implementation.
     *
     * @param options.targetDid - DID of the DWN tenant to write the pruned RecordsWrite to.
     * @returns DWN reply containing the status of processing request.
     */
    DwnManager.prototype.writePrunedRecord = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var targetDid, message;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        targetDid = options.targetDid, message = options.message;
                        return [4 /*yield*/, this._dwn.synchronizePrunedInitialRecordsWrite(targetDid, message)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    DwnManager.prototype.processMessage = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var dataStream, message, targetDid;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        dataStream = options.dataStream, message = options.message, targetDid = options.targetDid;
                        return [4 /*yield*/, this._dwn.processMessage(targetDid, message, dataStream)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    return DwnManager;
}());
exports.DwnManager = DwnManager;
//# sourceMappingURL=dwn-manager.js.map