"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.KeyManager = void 0;
var kms_local_js_1 = require("./kms-local.js");
var utils_js_1 = require("./utils.js");
var store_managed_key_js_1 = require("./store-managed-key.js");
/**
 * KeyManager
 *
 * This class orchestrates implementations of {@link KeyManagementSystem},
 * using a ManagedKeyStore to remember the link between a key reference,
 * its metadata, and the respective key management system that provides the
 * actual cryptographic capabilities.
 *
 * The methods of this class are used automatically by other Web5 Agent
 * components to perform their required cryptographic operations using
 * the managed keys.
 *
 * @public
 */
var KeyManager = /** @class */ (function () {
    function KeyManager(options) {
        var _a = options !== null && options !== void 0 ? options : {}, agent = _a.agent, kms = _a.kms, store = _a.store;
        this._agent = agent;
        this._store = store !== null && store !== void 0 ? store : new store_managed_key_js_1.KeyStoreMemory();
        kms !== null && kms !== void 0 ? kms : (kms = this.useMemoryKms());
        this._kms = new Map(Object.entries(kms));
    }
    Object.defineProperty(KeyManager.prototype, "agent", {
        /**
         * Retrieves the `Web5ManagedAgent` execution context.
         * If the `agent` instance proprety is undefined, it will throw an error.
         *
         * @returns The `Web5ManagedAgent` instance that represents the current execution
         * context.
         *
         * @throws Will throw an error if the `agent` instance property is undefined.
         */
        get: function () {
            if (this._agent === undefined) {
                throw new Error('KeyManager: Unable to determine agent execution context.');
            }
            return this._agent;
        },
        set: function (agent) {
            this._agent = agent;
            this._kms.forEach(function (kms) {
                kms.agent = agent;
            });
        },
        enumerable: false,
        configurable: true
    });
    KeyManager.prototype.decrypt = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var keyRef, decryptOptions, key, kmsName, kms, keyId, plaintext;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        keyRef = options.keyRef, decryptOptions = __rest(options, ["keyRef"]);
                        return [4 /*yield*/, this.getKey({ keyRef: keyRef })];
                    case 1:
                        key = _a.sent();
                        if (!(0, utils_js_1.isManagedKey)(key)) {
                            throw new Error("Key not found: '".concat(keyRef, "'"));
                        }
                        kmsName = key.kms;
                        kms = this.getKms(kmsName);
                        keyId = key.id;
                        return [4 /*yield*/, kms.decrypt(__assign({ keyRef: keyId }, decryptOptions))];
                    case 2:
                        plaintext = _a.sent();
                        return [2 /*return*/, plaintext];
                }
            });
        });
    };
    KeyManager.prototype.deriveBits = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var baseKeyRef, deriveBitsOptions, ownKeyPair, kmsName, kms, ownKeyId, sharedSecret;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        baseKeyRef = options.baseKeyRef, deriveBitsOptions = __rest(options, ["baseKeyRef"]);
                        return [4 /*yield*/, this.getKey({ keyRef: baseKeyRef })];
                    case 1:
                        ownKeyPair = _a.sent();
                        if (!(0, utils_js_1.isManagedKeyPair)(ownKeyPair)) {
                            throw new Error("Key not found: '".concat(baseKeyRef, "'"));
                        }
                        kmsName = ownKeyPair.privateKey.kms;
                        kms = this.getKms(kmsName);
                        ownKeyId = ownKeyPair.privateKey.id;
                        sharedSecret = kms.deriveBits(__assign({ baseKeyRef: ownKeyId }, deriveBitsOptions));
                        return [2 /*return*/, sharedSecret];
                }
            });
        });
    };
    KeyManager.prototype.encrypt = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var keyRef, encryptOptions, key, kmsName, kms, keyId, ciphertext;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        keyRef = options.keyRef, encryptOptions = __rest(options, ["keyRef"]);
                        return [4 /*yield*/, this.getKey({ keyRef: keyRef })];
                    case 1:
                        key = _a.sent();
                        if (!(0, utils_js_1.isManagedKey)(key)) {
                            throw new Error("Key not found: '".concat(keyRef, "'"));
                        }
                        kmsName = key.kms;
                        kms = this.getKms(kmsName);
                        keyId = key.id;
                        return [4 /*yield*/, kms.encrypt(__assign({ keyRef: keyId }, encryptOptions))];
                    case 2:
                        ciphertext = _a.sent();
                        return [2 /*return*/, ciphertext];
                }
            });
        });
    };
    KeyManager.prototype.generateKey = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var kmsName, generateKeyOptions, kms, keyOrKeyPair;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        kmsName = options.kms, generateKeyOptions = __rest(options, ["kms"]);
                        kms = this.getKms(kmsName);
                        return [4 /*yield*/, kms.generateKey(generateKeyOptions)];
                    case 1:
                        keyOrKeyPair = _a.sent();
                        // Store the ManagedKey or ManagedKeyPair in KeyManager's key store.
                        return [4 /*yield*/, this._store.importKey({ key: keyOrKeyPair, agent: this.agent })];
                    case 2:
                        // Store the ManagedKey or ManagedKeyPair in KeyManager's key store.
                        _a.sent();
                        return [2 /*return*/, keyOrKeyPair];
                }
            });
        });
    };
    KeyManager.prototype.getKey = function (_a) {
        var _b, _c;
        var keyRef = _a.keyRef;
        return __awaiter(this, void 0, void 0, function () {
            var keyOrKeyPair, defaultSigningKeyId, defaultSigningKeyAlias;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        defaultSigningKeyId = (_b = this._defaultSigningKey) === null || _b === void 0 ? void 0 : _b.publicKey.id;
                        defaultSigningKeyAlias = (_c = this._defaultSigningKey) === null || _c === void 0 ? void 0 : _c.publicKey.alias;
                        if (keyRef === defaultSigningKeyId || keyRef === defaultSigningKeyAlias) {
                            return [2 /*return*/, this._defaultSigningKey];
                        }
                        return [4 /*yield*/, this._store.getKey({ id: keyRef, agent: this.agent })];
                    case 1:
                        // Try to get key by ID.
                        keyOrKeyPair = _d.sent();
                        if (keyOrKeyPair)
                            return [2 /*return*/, keyOrKeyPair];
                        return [4 /*yield*/, this._store.findKey({ alias: keyRef, agent: this.agent })];
                    case 2:
                        // Try to find key by alias.
                        keyOrKeyPair = _d.sent();
                        if (keyOrKeyPair)
                            return [2 /*return*/, keyOrKeyPair];
                        return [2 /*return*/, undefined];
                }
            });
        });
    };
    KeyManager.prototype.importKey = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var kmsName, kms, importedKeyOrKeyPair;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        kmsName = ('privateKey' in options) ? options.privateKey.kms : options.kms;
                        kms = this.getKms(kmsName);
                        return [4 /*yield*/, kms.importKey(options)];
                    case 1:
                        importedKeyOrKeyPair = _a.sent();
                        // Store the ManagedKey or ManagedKeyPair in KeyManager's key store.
                        return [4 /*yield*/, this._store.importKey({ key: importedKeyOrKeyPair, agent: this.agent })];
                    case 2:
                        // Store the ManagedKey or ManagedKeyPair in KeyManager's key store.
                        _a.sent();
                        return [2 /*return*/, importedKeyOrKeyPair];
                }
            });
        });
    };
    KeyManager.prototype.listKms = function () {
        return Array.from(this._kms.keys());
    };
    KeyManager.prototype.setDefaultSigningKey = function (_a) {
        var key = _a.key;
        return __awaiter(this, void 0, void 0, function () {
            var kmsName, kms, importedDefaultSigningKey;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        kmsName = key.privateKey.kms;
                        kms = this.getKms(kmsName);
                        return [4 /*yield*/, kms.importKey(key)];
                    case 1:
                        importedDefaultSigningKey = _b.sent();
                        // Set the in-memory key to be KeyManager's default signing key.
                        this._defaultSigningKey = importedDefaultSigningKey;
                        return [2 /*return*/];
                }
            });
        });
    };
    KeyManager.prototype.sign = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var keyRef, signOptions, keyPair, kmsName, kms, keyId, signature;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        keyRef = options.keyRef, signOptions = __rest(options, ["keyRef"]);
                        return [4 /*yield*/, this.getKey({ keyRef: keyRef })];
                    case 1:
                        keyPair = _a.sent();
                        if (!(0, utils_js_1.isManagedKeyPair)(keyPair)) {
                            throw new Error("Key not found: '".concat(keyRef, "'"));
                        }
                        kmsName = keyPair.privateKey.kms;
                        kms = this.getKms(kmsName);
                        keyId = keyPair.privateKey.id;
                        return [4 /*yield*/, kms.sign(__assign({ keyRef: keyId }, signOptions))];
                    case 2:
                        signature = _a.sent();
                        return [2 /*return*/, signature];
                }
            });
        });
    };
    KeyManager.prototype.updateKey = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var keyRef, alias, metadata, keyOrKeyPair, _a, keyId, kmsName, kms, kmsUpdated;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        keyRef = options.keyRef, alias = options.alias, metadata = options.metadata;
                        return [4 /*yield*/, this.getKey({ keyRef: keyRef })];
                    case 1:
                        keyOrKeyPair = _b.sent();
                        if (!keyOrKeyPair) {
                            throw new Error("Key not found: '".concat(keyRef, "'"));
                        }
                        _a = ((0, utils_js_1.isManagedKeyPair)(keyOrKeyPair))
                            ? __assign({}, keyOrKeyPair.publicKey) : __assign({}, keyOrKeyPair), keyId = _a.id, kmsName = _a.kms;
                        kms = this.getKms(kmsName);
                        return [4 /*yield*/, kms.updateKey(options)];
                    case 2:
                        kmsUpdated = _b.sent();
                        if (!kmsUpdated)
                            return [2 /*return*/, false];
                        return [4 /*yield*/, this._store.updateKey({ id: keyId, alias: alias, metadata: metadata, agent: this.agent })];
                    case 3: 
                    // Since the KMS was successfully updated, update the KeyManager store.
                    return [2 /*return*/, _b.sent()];
                }
            });
        });
    };
    KeyManager.prototype.verify = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var keyRef, verifyOptions, keyPair, kmsName, kms, keyId, isValid;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        keyRef = options.keyRef, verifyOptions = __rest(options, ["keyRef"]);
                        return [4 /*yield*/, this.getKey({ keyRef: keyRef })];
                    case 1:
                        keyPair = _a.sent();
                        if (!(0, utils_js_1.isManagedKeyPair)(keyPair)) {
                            throw new Error("Key not found: '".concat(keyRef, "'"));
                        }
                        kmsName = keyPair.publicKey.kms;
                        kms = this.getKms(kmsName);
                        keyId = keyPair.publicKey.id;
                        return [4 /*yield*/, kms.verify(__assign({ keyRef: keyId }, verifyOptions))];
                    case 2:
                        isValid = _a.sent();
                        return [2 /*return*/, isValid];
                }
            });
        });
    };
    KeyManager.prototype.getKms = function (name) {
        // For developer convenience, if a KMS name isn't specified and KeyManager only has
        // one KMS defined, use it.  Otherwise, an exception will be thrown.
        name !== null && name !== void 0 ? name : (name = (this._kms.size === 1) ? this._kms.keys().next().value : '');
        var kms = this._kms.get(name);
        if (!kms) {
            throw Error("Unknown key management system: '".concat(name, "'"));
        }
        return kms;
    };
    KeyManager.prototype.useMemoryKms = function () {
        // Instantiate in-memory store for KMS key metadata and public keys.
        var keyStore = new store_managed_key_js_1.KeyStoreMemory();
        // Instantiate in-memory store for KMS private keys.
        var privateKeyStore = new store_managed_key_js_1.PrivateKeyStoreMemory();
        // Instantiate local KMS using in-memory key stores.
        var kms = new kms_local_js_1.LocalKms({ kmsName: 'memory', keyStore: keyStore, privateKeyStore: privateKeyStore });
        return { memory: kms };
    };
    return KeyManager;
}());
exports.KeyManager = KeyManager;
//# sourceMappingURL=key-manager.js.map