"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TestManagedAgent = void 0;
var level_1 = require("level");
var crypto_1 = require("@web5/crypto");
var dwn_sdk_js_1 = require("@tbd54566975/dwn-sdk-js");
var common_1 = require("@web5/common");
var dids_1 = require("@web5/dids");
var kms_local_js_1 = require("./kms-local.js");
var did_manager_js_1 = require("./did-manager.js");
var dwn_manager_js_1 = require("./dwn-manager.js");
var key_manager_js_1 = require("./key-manager.js");
var rpc_client_js_1 = require("./rpc-client.js");
var app_data_store_js_1 = require("./app-data-store.js");
var sync_manager_js_1 = require("./sync-manager.js");
var utils_js_1 = require("./utils.js");
var store_managed_did_js_1 = require("./store-managed-did.js");
var identity_manager_js_1 = require("./identity-manager.js");
var store_managed_identity_js_1 = require("./store-managed-identity.js");
var store_managed_key_js_1 = require("./store-managed-key.js");
var TestManagedAgent = /** @class */ (function () {
    function TestManagedAgent(options) {
        this.agent = options.agent;
        this.agentStores = options.agentStores;
        this.appDataStore = options.appDataStore;
        this.didResolverCache = options.didResolverCache;
        this.dwn = options.dwn;
        this.dwnDataStore = options.dwnDataStore;
        this.dwnEventLog = options.dwnEventLog;
        this.dwnMessageStore = options.dwnMessageStore;
        this.syncStore = options.syncStore;
    }
    TestManagedAgent.prototype.clearStorage = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a, didManager, identityManager, keyManager;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        this.agent.agentDid = undefined;
                        return [4 /*yield*/, this.appDataStore.clear()];
                    case 1:
                        _b.sent();
                        return [4 /*yield*/, this.didResolverCache.clear()];
                    case 2:
                        _b.sent();
                        return [4 /*yield*/, this.dwnDataStore.clear()];
                    case 3:
                        _b.sent();
                        return [4 /*yield*/, this.dwnEventLog.clear()];
                    case 4:
                        _b.sent();
                        return [4 /*yield*/, this.dwnMessageStore.clear()];
                    case 5:
                        _b.sent();
                        return [4 /*yield*/, this.syncStore.clear()];
                    case 6:
                        _b.sent();
                        /** Easiest way to start with fresh in-memory stores is to
                         * re-instantiate all of the managed agent components */
                        if (this.agentStores === 'memory') {
                            _a = TestManagedAgent.useMemoryStorage({ agent: this.agent }), didManager = _a.didManager, identityManager = _a.identityManager, keyManager = _a.keyManager;
                            this.agent.didManager = didManager;
                            this.agent.identityManager = identityManager;
                            this.agent.keyManager = keyManager;
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    TestManagedAgent.prototype.closeStorage = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.appDataStore.close()];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, this.didResolverCache.close()];
                    case 2:
                        _a.sent();
                        return [4 /*yield*/, this.dwnDataStore.close()];
                    case 3:
                        _a.sent();
                        return [4 /*yield*/, this.dwnEventLog.close()];
                    case 4:
                        _a.sent();
                        return [4 /*yield*/, this.dwnMessageStore.close()];
                    case 5:
                        _a.sent();
                        return [4 /*yield*/, this.syncStore.close()];
                    case 6:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    TestManagedAgent.create = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var agentClass, agentStores, testDataLocation, testDataPath, _a, appData, appDataStore, didManager, didResolverCache, identityManager, keyManager, didMethodApis, didResolver, dwnDataStore, dwnEventLog, dwnMessageStore, dwn, dwnManager, rpcClient, syncStore, syncManager, agent;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        agentClass = options.agentClass, agentStores = options.agentStores, testDataLocation = options.testDataLocation;
                        agentStores !== null && agentStores !== void 0 ? agentStores : (agentStores = 'memory');
                        testDataLocation !== null && testDataLocation !== void 0 ? testDataLocation : (testDataLocation = '__TESTDATA__');
                        testDataPath = function (path) { return "".concat(testDataLocation, "/").concat(path); };
                        _a = (agentStores === 'memory')
                            ? TestManagedAgent.useMemoryStorage()
                            : TestManagedAgent.useDiskStorage({ testDataLocation: testDataLocation }), appData = _a.appData, appDataStore = _a.appDataStore, didManager = _a.didManager, didResolverCache = _a.didResolverCache, identityManager = _a.identityManager, keyManager = _a.keyManager;
                        didMethodApis = [dids_1.DidIonMethod, dids_1.DidKeyMethod];
                        didResolver = new dids_1.DidResolver({
                            cache: didResolverCache,
                            didResolvers: didMethodApis
                        });
                        dwnDataStore = new dwn_sdk_js_1.DataStoreLevel({ blockstoreLocation: testDataPath('DWN_DATASTORE') });
                        dwnEventLog = new dwn_sdk_js_1.EventLogLevel({ location: testDataPath('DWN_EVENTLOG') });
                        dwnMessageStore = new dwn_sdk_js_1.MessageStoreLevel({
                            blockstoreLocation: testDataPath('DWN_MESSAGESTORE'),
                            indexLocation: testDataPath('DWN_MESSAGEINDEX')
                        });
                        return [4 /*yield*/, dwn_sdk_js_1.Dwn.create({
                                eventLog: dwnEventLog,
                                dataStore: dwnDataStore,
                                // @ts-expect-error because the Web5.js DidResolver implementation doesn't have the dump() method.
                                didResolver: didResolver,
                                messageStore: dwnMessageStore
                            })];
                    case 1:
                        dwn = _b.sent();
                        dwnManager = new dwn_manager_js_1.DwnManager({ dwn: dwn });
                        rpcClient = new rpc_client_js_1.Web5RpcClient();
                        syncStore = new level_1.Level(testDataPath('SYNC_STORE'));
                        syncManager = new sync_manager_js_1.SyncManagerLevel({ db: syncStore });
                        agent = new agentClass({
                            agentDid: '',
                            appData: appData,
                            didManager: didManager,
                            didResolver: didResolver,
                            dwnManager: dwnManager,
                            identityManager: identityManager,
                            keyManager: keyManager,
                            rpcClient: rpcClient,
                            syncManager: syncManager
                        });
                        return [2 /*return*/, new TestManagedAgent({
                                agent: agent,
                                agentStores: agentStores,
                                appDataStore: appDataStore,
                                didResolverCache: didResolverCache,
                                dwn: dwn,
                                dwnDataStore: dwnDataStore,
                                dwnEventLog: dwnEventLog,
                                dwnMessageStore: dwnMessageStore,
                                syncStore: syncStore,
                            })];
                }
            });
        });
    };
    TestManagedAgent.prototype.createAgentDid = function () {
        return __awaiter(this, void 0, void 0, function () {
            var agentDid, privateCryptoKey, publicCryptoKey, agentSigningKey, alias, defaultSigningKey;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, dids_1.DidKeyMethod.create({ keyAlgorithm: 'Ed25519' })];
                    case 1:
                        agentDid = _a.sent();
                        return [4 /*yield*/, crypto_1.Jose.jwkToCryptoKey({ key: agentDid.keySet.verificationMethodKeys[0].privateKeyJwk })];
                    case 2:
                        privateCryptoKey = _a.sent();
                        return [4 /*yield*/, crypto_1.Jose.jwkToCryptoKey({ key: agentDid.keySet.verificationMethodKeys[0].publicKeyJwk })];
                    case 3:
                        publicCryptoKey = _a.sent();
                        agentSigningKey = { privateKey: privateCryptoKey, publicKey: publicCryptoKey };
                        return [4 /*yield*/, this.agent.didManager.getDefaultSigningKey({ did: agentDid.did })];
                    case 4:
                        alias = _a.sent();
                        defaultSigningKey = (0, utils_js_1.cryptoToPortableKeyPair)({ cryptoKeyPair: agentSigningKey, keyData: { alias: alias, kms: 'memory' } });
                        return [4 /*yield*/, this.agent.keyManager.setDefaultSigningKey({ key: defaultSigningKey })];
                    case 5:
                        _a.sent();
                        // Set the DID as the Agent's DID.
                        this.agent.agentDid = agentDid.did;
                        return [2 /*return*/];
                }
            });
        });
    };
    TestManagedAgent.prototype.createIdentity = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var keyAlgorithm, testDwnUrls, didOptions, did, identity;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        keyAlgorithm = options.keyAlgorithm, testDwnUrls = options.testDwnUrls;
                        return [4 /*yield*/, dids_1.DidIonMethod.generateDwnOptions({
                                signingKeyAlgorithm: keyAlgorithm,
                                serviceEndpointNodes: testDwnUrls
                            })];
                    case 1:
                        didOptions = _a.sent();
                        return [4 /*yield*/, dids_1.DidIonMethod.create(__assign({ anchor: false }, didOptions))];
                    case 2:
                        did = _a.sent();
                        identity = {
                            did: did.did,
                            name: 'Test'
                        };
                        return [2 /*return*/, { did: did, identity: identity }];
                }
            });
        });
    };
    TestManagedAgent.useDiskStorage = function (options) {
        var agent = options.agent, testDataLocation = options.testDataLocation;
        var testDataPath = function (path) { return "".concat(testDataLocation, "/").concat(path); };
        var appDataStore = new common_1.LevelStore(testDataPath('APPDATA'));
        var appData = new app_data_store_js_1.AppDataVault({
            keyDerivationWorkFactor: 1,
            store: appDataStore
        });
        var didManager = new did_manager_js_1.DidManager({
            agent: agent,
            didMethods: [dids_1.DidIonMethod, dids_1.DidKeyMethod],
            store: new store_managed_did_js_1.DidStoreDwn()
        });
        var didResolverCache = new dids_1.DidResolverCacheLevel({
            location: testDataPath('DID_RESOLVERCACHE')
        });
        var identityManager = new identity_manager_js_1.IdentityManager({
            agent: agent,
            store: new store_managed_identity_js_1.IdentityStoreDwn()
        });
        var localKmsDwn = new kms_local_js_1.LocalKms({
            agent: agent,
            kmsName: 'local',
            keyStore: new store_managed_key_js_1.KeyStoreDwn({ schema: 'https://identity.foundation/schemas/web5/kms-key' }),
            privateKeyStore: new store_managed_key_js_1.PrivateKeyStoreDwn()
        });
        var localKmsMemory = new kms_local_js_1.LocalKms({
            agent: agent,
            kmsName: 'memory'
        });
        var keyManager = new key_manager_js_1.KeyManager({
            agent: agent,
            kms: {
                local: localKmsDwn,
                memory: localKmsMemory
            },
            store: new store_managed_key_js_1.KeyStoreDwn({ schema: 'https://identity.foundation/schemas/web5/managed-key' })
        });
        return { appData: appData, appDataStore: appDataStore, didManager: didManager, didResolverCache: didResolverCache, identityManager: identityManager, keyManager: keyManager };
    };
    TestManagedAgent.useMemoryStorage = function (options) {
        var agent = (options !== null && options !== void 0 ? options : {}).agent;
        var appDataStore = new common_1.MemoryStore();
        var appData = new app_data_store_js_1.AppDataVault({
            keyDerivationWorkFactor: 1,
            store: appDataStore
        });
        var didManager = new did_manager_js_1.DidManager({
            agent: agent,
            didMethods: [dids_1.DidIonMethod, dids_1.DidKeyMethod],
            store: new store_managed_did_js_1.DidStoreMemory()
        });
        var didResolverCache = new common_1.MemoryStore();
        var identityManager = new identity_manager_js_1.IdentityManager({
            agent: agent,
            store: new store_managed_identity_js_1.IdentityStoreMemory()
        });
        var localKmsDwn = new kms_local_js_1.LocalKms({
            agent: agent,
            kmsName: 'local',
            keyStore: new store_managed_key_js_1.KeyStoreMemory(),
            privateKeyStore: new store_managed_key_js_1.PrivateKeyStoreMemory()
        });
        var localKmsMemory = new kms_local_js_1.LocalKms({
            agent: agent,
            kmsName: 'memory'
        });
        var keyManager = new key_manager_js_1.KeyManager({
            agent: agent,
            kms: {
                local: localKmsDwn,
                memory: localKmsMemory
            },
            store: new store_managed_key_js_1.KeyStoreMemory()
        });
        return { appData: appData, appDataStore: appDataStore, didManager: didManager, didResolverCache: didResolverCache, identityManager: identityManager, keyManager: keyManager };
    };
    return TestManagedAgent;
}());
exports.TestManagedAgent = TestManagedAgent;
//# sourceMappingURL=test-managed-agent.js.map