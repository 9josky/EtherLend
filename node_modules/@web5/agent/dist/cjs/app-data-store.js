"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AppDataVault = void 0;
var dids_1 = require("@web5/dids");
var hkdf_1 = require("@noble/hashes/hkdf");
var sha256_1 = require("@noble/hashes/sha256");
var common_1 = require("@web5/common");
var crypto_1 = require("@web5/crypto");
var AppDataVault = /** @class */ (function () {
    function AppDataVault(options) {
        var _a, _b;
        this._vaultUnlockKey = new Uint8Array();
        this._keyDerivationWorkFactor = (_a = options === null || options === void 0 ? void 0 : options.keyDerivationWorkFactor) !== null && _a !== void 0 ? _a : 650000;
        this._store = (_b = options === null || options === void 0 ? void 0 : options.store) !== null && _b !== void 0 ? _b : new common_1.MemoryStore();
    }
    AppDataVault.prototype.backup = function (_options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                throw new Error('Not implemented');
            });
        });
    };
    AppDataVault.prototype.changePassphrase = function (_options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                throw new Error('Not implemented');
            });
        });
    };
    AppDataVault.prototype.generateVaultUnlockKey = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var passphrase, salt, vaultUnlockKey;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        passphrase = options.passphrase, salt = options.salt;
                        return [4 /*yield*/, crypto_1.Pbkdf2.deriveKey({
                                hash: 'SHA-512',
                                iterations: this._keyDerivationWorkFactor,
                                length: 256,
                                password: common_1.Convert.string(passphrase).toUint8Array(),
                                salt: salt
                            })];
                    case 1:
                        vaultUnlockKey = _a.sent();
                        return [2 /*return*/, vaultUnlockKey];
                }
            });
        });
    };
    AppDataVault.prototype.getDid = function () {
        return __awaiter(this, void 0, void 0, function () {
            var vaultKeySet, _a, protectedHeaderB64U, protectedHeader, publicKeyJwk, keySet, did;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this._store.get('vaultKeySet')];
                    case 1:
                        vaultKeySet = _b.sent();
                        _a = __read(vaultKeySet.split('.'), 1), protectedHeaderB64U = _a[0];
                        protectedHeader = common_1.Convert.base64Url(protectedHeaderB64U).toObject();
                        publicKeyJwk = protectedHeader.wrappedKey;
                        keySet = { verificationMethodKeys: [{ publicKeyJwk: publicKeyJwk, relationships: ['authentication'] }] };
                        return [4 /*yield*/, dids_1.DidKeyMethod.create({ keySet: keySet })];
                    case 2:
                        did = (_b.sent()).did;
                        return [2 /*return*/, did];
                }
            });
        });
    };
    AppDataVault.prototype.getPublicKey = function () {
        return __awaiter(this, void 0, void 0, function () {
            var vaultKeySet, _a, protectedHeaderB64U, protectedHeader, publicKeyJwk, cryptoKey;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this._store.get('vaultKeySet')];
                    case 1:
                        vaultKeySet = _b.sent();
                        _a = __read(vaultKeySet.split('.'), 1), protectedHeaderB64U = _a[0];
                        protectedHeader = common_1.Convert.base64Url(protectedHeaderB64U).toObject();
                        publicKeyJwk = protectedHeader.wrappedKey;
                        return [4 /*yield*/, crypto_1.Jose.jwkToCryptoKey({ key: publicKeyJwk })];
                    case 2:
                        cryptoKey = _b.sent();
                        return [2 /*return*/, cryptoKey];
                }
            });
        });
    };
    AppDataVault.prototype.getPrivateKey = function () {
        return __awaiter(this, void 0, void 0, function () {
            var vaultKeySet, _a, protectedHeaderB64U, encryptedKeyB64U, nonceB64U, _, tagB64U, protectedHeader, encryptedKey, nonce, tag, privateKeyMaterial, publicKey, privateKey;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this._store.get('vaultKeySet')];
                    case 1:
                        vaultKeySet = _b.sent();
                        _a = __read(vaultKeySet.split('.'), 5), protectedHeaderB64U = _a[0], encryptedKeyB64U = _a[1], nonceB64U = _a[2], _ = _a[3], tagB64U = _a[4];
                        protectedHeader = common_1.Convert.base64Url(protectedHeaderB64U).toObject();
                        encryptedKey = common_1.Convert.base64Url(encryptedKeyB64U).toUint8Array();
                        nonce = common_1.Convert.base64Url(nonceB64U).toUint8Array();
                        tag = common_1.Convert.base64Url(tagB64U).toUint8Array();
                        return [4 /*yield*/, crypto_1.XChaCha20Poly1305.decrypt({
                                additionalData: common_1.Convert.object(protectedHeader).toUint8Array(),
                                data: encryptedKey,
                                key: this._vaultUnlockKey,
                                nonce: nonce,
                                tag: tag
                            })];
                    case 2:
                        privateKeyMaterial = _b.sent();
                        return [4 /*yield*/, this.getPublicKey()];
                    case 3:
                        publicKey = _b.sent();
                        privateKey = new crypto_1.CryptoKey(publicKey.algorithm, publicKey.extractable, privateKeyMaterial, 'private', ['sign']);
                        return [2 /*return*/, privateKey];
                }
            });
        });
    };
    AppDataVault.prototype.getStatus = function () {
        return __awaiter(this, void 0, void 0, function () {
            var appDataStatus, error_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this._store.get('appDataStatus')];
                    case 1:
                        appDataStatus = _a.sent();
                        return [2 /*return*/, JSON.parse(appDataStatus)];
                    case 2:
                        error_1 = _a.sent();
                        return [2 /*return*/, {
                                initialized: false,
                                lastBackup: undefined,
                                lastRestore: undefined
                            }];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    AppDataVault.prototype.initialize = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var keyPair, passphrase, appDataStatus, publicKey, saltInput, algorithm, salt, _a, wrappedKey, protectedHeader, nonce, privateKey, _b, privateKeyCiphertext, privateKeyTag, vaultKeySet;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        keyPair = options.keyPair, passphrase = options.passphrase;
                        return [4 /*yield*/, this.getStatus()];
                    case 1:
                        appDataStatus = _c.sent();
                        // Throw if the data vault was previously initialized.
                        if (appDataStatus.initialized === true) {
                            throw new Error("Operation 'initialize' failed. Data vault already initialized.");
                        }
                        publicKey = keyPair.publicKey.material;
                        saltInput = (0, hkdf_1.hkdf)(sha256_1.sha256, // hash function
                        publicKey, // input keying material
                        undefined, // no salt because public key is already random
                        'vault_unlock_salt', // non-secret application specific information
                        32 // derived key length, in bytes
                        );
                        algorithm = common_1.Convert.string('PBES2-HS512+XC20PKW').toUint8Array();
                        salt = new Uint8Array(__spreadArray(__spreadArray(__spreadArray([], __read(algorithm), false), [0x00], false), __read(saltInput), false));
                        /**
                         * Generate a vault unlock key (VUK), which will be used as a
                         * key encryption key (KEK) for wrapping the private key */
                        _a = this;
                        return [4 /*yield*/, this.generateVaultUnlockKey({ passphrase: passphrase, salt: salt })];
                    case 2:
                        /**
                         * Generate a vault unlock key (VUK), which will be used as a
                         * key encryption key (KEK) for wrapping the private key */
                        _a._vaultUnlockKey = _c.sent();
                        return [4 /*yield*/, crypto_1.Jose.cryptoKeyToJwk({ key: keyPair.publicKey })];
                    case 3:
                        wrappedKey = _c.sent();
                        protectedHeader = {
                            alg: 'PBES2-HS512+XC20PKW',
                            crit: ['wrappedKey'],
                            enc: 'XC20P',
                            p2c: this._keyDerivationWorkFactor,
                            p2s: common_1.Convert.uint8Array(salt).toBase64Url(),
                            wrappedKey: wrappedKey
                        };
                        nonce = crypto_1.utils.randomBytes(24);
                        privateKey = keyPair.privateKey.material;
                        return [4 /*yield*/, crypto_1.XChaCha20Poly1305.encrypt({
                                additionalData: common_1.Convert.object(protectedHeader).toUint8Array(),
                                data: privateKey,
                                key: this._vaultUnlockKey,
                                nonce: nonce
                            })];
                    case 4:
                        _b = _c.sent(), privateKeyCiphertext = _b.ciphertext, privateKeyTag = _b.tag;
                        vaultKeySet = common_1.Convert.object(protectedHeader).toBase64Url() + '.' +
                            common_1.Convert.uint8Array(privateKeyCiphertext).toBase64Url() + '.' +
                            common_1.Convert.uint8Array(nonce).toBase64Url() + '.' +
                            common_1.Convert.string('unused').toBase64Url() + '.' +
                            common_1.Convert.uint8Array(privateKeyTag).toBase64Url();
                        /** Store the vault key set in the AppDataStore. */
                        return [4 /*yield*/, this._store.set('vaultKeySet', vaultKeySet)];
                    case 5:
                        /** Store the vault key set in the AppDataStore. */
                        _c.sent();
                        /** Set the vault to initialized. */
                        appDataStatus.initialized = true;
                        return [4 /*yield*/, this.setStatus(appDataStatus)];
                    case 6:
                        _c.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    AppDataVault.prototype.lock = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                this._vaultUnlockKey.fill(0);
                this._vaultUnlockKey = new Uint8Array();
                return [2 /*return*/];
            });
        });
    };
    AppDataVault.prototype.restore = function (_options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                throw new Error('Not implemented');
            });
        });
    };
    AppDataVault.prototype.setStatus = function (options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var appDataStatus;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0: return [4 /*yield*/, this.getStatus()];
                    case 1:
                        appDataStatus = _d.sent();
                        // Update the status properties with new values specified, if any.
                        appDataStatus.initialized = (_a = options.initialized) !== null && _a !== void 0 ? _a : appDataStatus.initialized;
                        appDataStatus.lastBackup = (_b = options.lastBackup) !== null && _b !== void 0 ? _b : appDataStatus.lastBackup;
                        appDataStatus.lastRestore = (_c = options.lastRestore) !== null && _c !== void 0 ? _c : appDataStatus.lastRestore;
                        // Write the changes to the store.
                        return [4 /*yield*/, this._store.set('appDataStatus', JSON.stringify(appDataStatus))];
                    case 2:
                        // Write the changes to the store.
                        _d.sent();
                        return [2 /*return*/, true];
                }
            });
        });
    };
    AppDataVault.prototype.unlock = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var passphrase, vaultKeySet, _a, protectedHeaderString, protectedHeader, salt, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        passphrase = options.passphrase;
                        return [4 /*yield*/, this._store.get('vaultKeySet')];
                    case 1:
                        vaultKeySet = _c.sent();
                        _a = __read(vaultKeySet.split('.'), 1), protectedHeaderString = _a[0];
                        protectedHeader = common_1.Convert.base64Url(protectedHeaderString).toObject();
                        if (!(protectedHeader.p2s !== undefined)) return [3 /*break*/, 3];
                        salt = common_1.Convert.base64Url(protectedHeader.p2s).toUint8Array();
                        _b = this;
                        return [4 /*yield*/, this.generateVaultUnlockKey({ passphrase: passphrase, salt: salt })];
                    case 2:
                        _b._vaultUnlockKey = _c.sent();
                        _c.label = 3;
                    case 3: return [2 /*return*/, true];
                }
            });
        });
    };
    return AppDataVault;
}());
exports.AppDataVault = AppDataVault;
//# sourceMappingURL=app-data-store.js.map