"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Web5RpcClient = exports.DidRpcMethod = void 0;
var crypto_1 = require("@web5/crypto");
var json_rpc_js_1 = require("./json-rpc.js");
var DidRpcMethod;
(function (DidRpcMethod) {
    DidRpcMethod["Create"] = "did.create";
    DidRpcMethod["Resolve"] = "did.resolve";
})(DidRpcMethod || (exports.DidRpcMethod = DidRpcMethod = {}));
/**
 * Client used to communicate with Dwn Servers
 */
var Web5RpcClient = /** @class */ (function () {
    function Web5RpcClient(clients) {
        var e_1, _a, e_2, _b;
        if (clients === void 0) { clients = []; }
        this.transportClients = new Map();
        // include http client as default. can be overwritten for 'http:' or 'https:' if instantiator provides
        // their own.
        clients = __spreadArray([new HttpWeb5RpcClient()], __read(clients), false);
        try {
            for (var clients_1 = __values(clients), clients_1_1 = clients_1.next(); !clients_1_1.done; clients_1_1 = clients_1.next()) {
                var client = clients_1_1.value;
                try {
                    for (var _c = (e_2 = void 0, __values(client.transportProtocols)), _d = _c.next(); !_d.done; _d = _c.next()) {
                        var transportScheme = _d.value;
                        this.transportClients.set(transportScheme, client);
                    }
                }
                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                finally {
                    try {
                        if (_d && !_d.done && (_b = _c.return)) _b.call(_c);
                    }
                    finally { if (e_2) throw e_2.error; }
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (clients_1_1 && !clients_1_1.done && (_a = clients_1.return)) _a.call(clients_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
    }
    Object.defineProperty(Web5RpcClient.prototype, "transportProtocols", {
        get: function () {
            return Array.from(this.transportClients.keys());
        },
        enumerable: false,
        configurable: true
    });
    Web5RpcClient.prototype.sendDidRequest = function (request) {
        return __awaiter(this, void 0, void 0, function () {
            var url, transportClient, error;
            return __generator(this, function (_a) {
                url = new URL(request.url);
                transportClient = this.transportClients.get(url.protocol);
                if (!transportClient) {
                    error = new Error("no ".concat(url.protocol, " transport client available"));
                    error.name = 'NO_TRANSPORT_CLIENT';
                    throw error;
                }
                return [2 /*return*/, transportClient.sendDidRequest(request)];
            });
        });
    };
    Web5RpcClient.prototype.sendDwnRequest = function (request) {
        // will throw if url is invalid
        var url = new URL(request.dwnUrl);
        var transportClient = this.transportClients.get(url.protocol);
        if (!transportClient) {
            var error = new Error("no ".concat(url.protocol, " transport client available"));
            error.name = 'NO_TRANSPORT_CLIENT';
            throw error;
        }
        return transportClient.sendDwnRequest(request);
    };
    return Web5RpcClient;
}());
exports.Web5RpcClient = Web5RpcClient;
// TODO: move to dwn-server repo. i wrote this here for expediency
/**
 * HTTP client that can be used to communicate with Dwn Servers
 */
var HttpDwnRpcClient = /** @class */ (function () {
    function HttpDwnRpcClient() {
    }
    Object.defineProperty(HttpDwnRpcClient.prototype, "transportProtocols", {
        get: function () { return ['http:', 'https:']; },
        enumerable: false,
        configurable: true
    });
    HttpDwnRpcClient.prototype.sendDwnRequest = function (request) {
        return __awaiter(this, void 0, void 0, function () {
            var requestId, jsonRpcRequest, fetchOpts, resp, dwnRpcResponse, dataStream, headers, jsonRpcResponse, responseBody, _a, code, message, reply;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        requestId = crypto_1.utils.randomUuid();
                        jsonRpcRequest = (0, json_rpc_js_1.createJsonRpcRequest)(requestId, 'dwn.processMessage', {
                            target: request.targetDid,
                            message: request.message
                        });
                        fetchOpts = {
                            method: 'POST',
                            headers: {
                                'dwn-request': JSON.stringify(jsonRpcRequest)
                            }
                        };
                        if (request.data) {
                            // @ts-expect-error TODO: REMOVE
                            fetchOpts.headers['content-type'] = 'application/octet-stream';
                            // @ts-expect-error TODO: REMOVE
                            fetchOpts['body'] = request.data;
                        }
                        return [4 /*yield*/, fetch(request.dwnUrl, fetchOpts)];
                    case 1:
                        resp = _b.sent();
                        headers = resp.headers;
                        if (!headers.has('dwn-response')) return [3 /*break*/, 2];
                        jsonRpcResponse = (0, json_rpc_js_1.parseJson)(headers.get('dwn-response'));
                        if (jsonRpcResponse == null) {
                            throw new Error("failed to parse json rpc response. dwn url: ".concat(request.dwnUrl));
                        }
                        dataStream = resp.body;
                        dwnRpcResponse = jsonRpcResponse;
                        return [3 /*break*/, 4];
                    case 2: return [4 /*yield*/, resp.text()];
                    case 3:
                        responseBody = _b.sent();
                        dwnRpcResponse = JSON.parse(responseBody);
                        _b.label = 4;
                    case 4:
                        if (dwnRpcResponse.error) {
                            _a = dwnRpcResponse.error, code = _a.code, message = _a.message;
                            throw new Error("(".concat(code, ") - ").concat(message));
                        }
                        reply = dwnRpcResponse.result.reply;
                        if (dataStream) {
                            reply['record']['data'] = dataStream;
                        }
                        return [2 /*return*/, reply];
                }
            });
        });
    };
    return HttpDwnRpcClient;
}());
var HttpWeb5RpcClient = /** @class */ (function (_super) {
    __extends(HttpWeb5RpcClient, _super);
    function HttpWeb5RpcClient() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    HttpWeb5RpcClient.prototype.sendDidRequest = function (request) {
        return __awaiter(this, void 0, void 0, function () {
            var requestId, jsonRpcRequest, httpRequest, jsonRpcResponse, response, _a, code, message, error_1;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        requestId = crypto_1.utils.randomUuid();
                        jsonRpcRequest = (0, json_rpc_js_1.createJsonRpcRequest)(requestId, request.method, {
                            data: request.data
                        });
                        httpRequest = new Request(request.url, {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify(jsonRpcRequest),
                        });
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 6, , 7]);
                        return [4 /*yield*/, fetch(httpRequest)];
                    case 2:
                        response = _b.sent();
                        if (!response.ok) return [3 /*break*/, 4];
                        return [4 /*yield*/, response.json()];
                    case 3:
                        jsonRpcResponse = _b.sent();
                        // If the response is an error, throw an error.
                        if (jsonRpcResponse.error) {
                            _a = jsonRpcResponse.error, code = _a.code, message = _a.message;
                            throw new Error("JSON RPC (".concat(code, ") - ").concat(message));
                        }
                        return [3 /*break*/, 5];
                    case 4: throw new Error("HTTP (".concat(response.status, ") - ").concat(response.statusText));
                    case 5: return [3 /*break*/, 7];
                    case 6:
                        error_1 = _b.sent();
                        throw new Error("Error encountered while processing response from ".concat(request.url, ": ").concat(error_1.message));
                    case 7: return [2 /*return*/, jsonRpcResponse.result];
                }
            });
        });
    };
    return HttpWeb5RpcClient;
}(HttpDwnRpcClient));
//# sourceMappingURL=rpc-client.js.map