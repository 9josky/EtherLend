"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.webReadableToIsomorphicNodeReadable = exports.managedToCryptoKey = exports.managedKeyToJwk = exports.isManagedKeyPair = exports.isManagedKey = exports.cryptoToPortableKeyPair = exports.cryptoToPortableKey = exports.cryptoToManagedKeyPair = exports.cryptoToManagedKey = exports.blobToIsomorphicNodeReadable = void 0;
var crypto_1 = require("@web5/crypto");
var readable_web_to_node_stream_1 = require("readable-web-to-node-stream");
function blobToIsomorphicNodeReadable(blob) {
    return webReadableToIsomorphicNodeReadable(blob.stream());
}
exports.blobToIsomorphicNodeReadable = blobToIsomorphicNodeReadable;
function cryptoToManagedKey(options) {
    var _a;
    var cryptoKey = options.cryptoKey, keyData = options.keyData;
    var managedKey = {
        id: (_a = keyData.id) !== null && _a !== void 0 ? _a : '',
        algorithm: cryptoKey.algorithm,
        alias: keyData.alias,
        extractable: cryptoKey.extractable,
        kms: keyData.kms,
        material: (cryptoKey.type === 'public') ? cryptoKey.material : undefined,
        metadata: keyData.metadata,
        state: 'Enabled',
        type: cryptoKey.type,
        usages: cryptoKey.usages
    };
    return managedKey;
}
exports.cryptoToManagedKey = cryptoToManagedKey;
function cryptoToManagedKeyPair(options) {
    var _a, _b;
    var cryptoKeyPair = options.cryptoKeyPair, keyData = options.keyData;
    var privateKey = cryptoKeyPair.privateKey;
    var publicKey = cryptoKeyPair.publicKey;
    var managedKeyPair = {
        privateKey: {
            id: (_a = keyData.id) !== null && _a !== void 0 ? _a : '',
            algorithm: privateKey.algorithm,
            alias: keyData.alias,
            extractable: privateKey.extractable,
            kms: keyData.kms,
            metadata: keyData.metadata,
            state: keyData.state,
            type: privateKey.type,
            usages: privateKey.usages
        },
        publicKey: {
            id: (_b = keyData.id) !== null && _b !== void 0 ? _b : '',
            algorithm: publicKey.algorithm,
            alias: keyData.alias,
            extractable: publicKey.extractable,
            kms: keyData.kms,
            material: publicKey.material,
            metadata: keyData.metadata,
            state: keyData.state,
            type: publicKey.type,
            usages: publicKey.usages
        },
    };
    return managedKeyPair;
}
exports.cryptoToManagedKeyPair = cryptoToManagedKeyPair;
function cryptoToPortableKey(options) {
    var _a;
    var cryptoKey = options.cryptoKey, keyData = options.keyData;
    var portableKey = {
        id: (_a = keyData.id) !== null && _a !== void 0 ? _a : '',
        algorithm: cryptoKey.algorithm,
        alias: keyData.alias,
        extractable: cryptoKey.extractable,
        kms: keyData.kms,
        material: cryptoKey.material,
        metadata: keyData.metadata,
        type: cryptoKey.type,
        usages: cryptoKey.usages
    };
    return portableKey;
}
exports.cryptoToPortableKey = cryptoToPortableKey;
function cryptoToPortableKeyPair(options) {
    var _a, _b;
    var cryptoKeyPair = options.cryptoKeyPair, keyData = options.keyData;
    var privateKey = cryptoKeyPair.privateKey;
    var publicKey = cryptoKeyPair.publicKey;
    var portableKeyPair = {
        privateKey: {
            id: (_a = keyData.id) !== null && _a !== void 0 ? _a : '',
            algorithm: privateKey.algorithm,
            alias: keyData.alias,
            extractable: privateKey.extractable,
            kms: keyData.kms,
            material: privateKey.material,
            metadata: keyData.metadata,
            type: privateKey.type,
            usages: privateKey.usages
        },
        publicKey: {
            id: (_b = keyData.id) !== null && _b !== void 0 ? _b : '',
            algorithm: publicKey.algorithm,
            alias: keyData.alias,
            extractable: publicKey.extractable,
            kms: keyData.kms,
            material: publicKey.material,
            metadata: keyData.metadata,
            type: publicKey.type,
            usages: publicKey.usages
        },
    };
    return portableKeyPair;
}
exports.cryptoToPortableKeyPair = cryptoToPortableKeyPair;
/**
 * Type guard function to check if the given key is a ManagedKey.
 *
 * @param key The key to check.
 * @returns True if the key is a ManagedKeyPair, false otherwise.
 */
function isManagedKey(key) {
    return key !== undefined && 'algorithm' in key && 'extractable' in key && 'type' in key && 'usages' in key;
}
exports.isManagedKey = isManagedKey;
/**
 * Type guard function to check if the given key is a ManagedKeyPair.
 *
 * @param key The key to check.
 * @returns True if the key is a ManagedKeyPair, false otherwise.
 */
function isManagedKeyPair(key) {
    return key !== undefined && 'privateKey' in key && 'publicKey' in key;
}
exports.isManagedKeyPair = isManagedKeyPair;
function managedKeyToJwk(_a) {
    var key = _a.key;
    return __awaiter(this, void 0, void 0, function () {
        var cryptoKey, jwk;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    if (key.material === undefined) {
                        throw new Error("Could not convert to JWK: 'material' is undefined.");
                    }
                    cryptoKey = {
                        algorithm: key.algorithm,
                        extractable: key.extractable,
                        material: key.material,
                        type: key.type,
                        usages: key.usages
                    };
                    return [4 /*yield*/, crypto_1.Jose.cryptoKeyToJwk({ key: cryptoKey })];
                case 1:
                    jwk = _b.sent();
                    return [2 /*return*/, jwk];
            }
        });
    });
}
exports.managedKeyToJwk = managedKeyToJwk;
function managedToCryptoKey(_a) {
    var key = _a.key;
    var cryptoKey = {
        algorithm: key.algorithm,
        extractable: key.extractable,
        material: key.material,
        type: key.type,
        usages: key.usages
    };
    return cryptoKey;
}
exports.managedToCryptoKey = managedToCryptoKey;
function webReadableToIsomorphicNodeReadable(webReadable) {
    return new readable_web_to_node_stream_1.ReadableWebToNodeStream(webReadable);
}
exports.webReadableToIsomorphicNodeReadable = webReadableToIsomorphicNodeReadable;
//# sourceMappingURL=utils.js.map