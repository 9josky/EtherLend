"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DidStoreMemory = exports.DidStoreDwn = void 0;
var common_1 = require("@web5/common");
/**
 *
 */
var DidStoreDwn = /** @class */ (function () {
    function DidStoreDwn() {
        this._didRecordProperties = {
            dataFormat: 'application/json',
            schema: 'https://identity.foundation/schemas/web5/managed-did'
        };
    }
    DidStoreDwn.prototype.deleteDid = function (options) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var agent, context, did, authorDid, queryReply, matchingRecordId, _b, _c, record, storedDid, status;
            var e_1, _d;
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0:
                        agent = options.agent, context = options.context, did = options.did;
                        return [4 /*yield*/, this.getAuthor({ agent: agent, context: context, did: did })];
                    case 1:
                        authorDid = _e.sent();
                        return [4 /*yield*/, agent.dwnManager.processRequest({
                                author: authorDid,
                                target: authorDid,
                                messageType: 'RecordsQuery',
                                messageOptions: {
                                    filter: __assign({}, this._didRecordProperties)
                                }
                            })];
                    case 2:
                        queryReply = (_e.sent()).reply;
                        try {
                            for (_b = __values((_a = queryReply.entries) !== null && _a !== void 0 ? _a : []), _c = _b.next(); !_c.done; _c = _b.next()) {
                                record = _c.value;
                                if (record.encodedData) {
                                    storedDid = common_1.Convert.base64Url(record.encodedData).toObject();
                                    if (storedDid && storedDid.did === did) {
                                        matchingRecordId = record.recordId;
                                        break;
                                    }
                                }
                            }
                        }
                        catch (e_1_1) { e_1 = { error: e_1_1 }; }
                        finally {
                            try {
                                if (_c && !_c.done && (_d = _b.return)) _d.call(_b);
                            }
                            finally { if (e_1) throw e_1.error; }
                        }
                        // Return undefined if the specified DID was not found in the store.
                        if (!matchingRecordId)
                            return [2 /*return*/, false];
                        return [4 /*yield*/, agent.dwnManager.processRequest({
                                author: authorDid,
                                target: authorDid,
                                messageType: 'RecordsDelete',
                                messageOptions: {
                                    recordId: matchingRecordId
                                }
                            })];
                    case 3:
                        status = (_e.sent()).reply.status;
                        // If the DID was successfully deleted, return true;
                        if (status.code === 202)
                            return [2 /*return*/, true];
                        // If the DID could not be deleted, return false;
                        return [2 /*return*/, false];
                }
            });
        });
    };
    DidStoreDwn.prototype.findDid = function (options) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var agent, alias, context, did, authorDid, queryReply, _b, _c, record, storedDid;
            var e_2, _d;
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0:
                        agent = options.agent, alias = options.alias, context = options.context, did = options.did;
                        return [4 /*yield*/, this.getAuthor({ agent: agent, context: context, did: did })];
                    case 1:
                        authorDid = _e.sent();
                        return [4 /*yield*/, agent.dwnManager.processRequest({
                                author: authorDid,
                                target: authorDid,
                                messageType: 'RecordsQuery',
                                messageOptions: {
                                    filter: __assign({}, this._didRecordProperties)
                                }
                            })];
                    case 2:
                        queryReply = (_e.sent()).reply;
                        try {
                            // Loop through all of the entries and return a match, if found.
                            for (_b = __values((_a = queryReply.entries) !== null && _a !== void 0 ? _a : []), _c = _b.next(); !_c.done; _c = _b.next()) {
                                record = _c.value;
                                if (record.encodedData) {
                                    storedDid = common_1.Convert.base64Url(record.encodedData).toObject();
                                    if (storedDid && storedDid.did === did)
                                        return [2 /*return*/, storedDid];
                                    if (storedDid && storedDid.alias === alias)
                                        return [2 /*return*/, storedDid];
                                }
                            }
                        }
                        catch (e_2_1) { e_2 = { error: e_2_1 }; }
                        finally {
                            try {
                                if (_c && !_c.done && (_d = _b.return)) _d.call(_b);
                            }
                            finally { if (e_2) throw e_2.error; }
                        }
                        // Return undefined if no matches were found.
                        return [2 /*return*/, undefined];
                }
            });
        });
    };
    DidStoreDwn.prototype.getDid = function (options) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var agent, context, did, authorDid, queryReply, _b, _c, record, storedDid;
            var e_3, _d;
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0:
                        agent = options.agent, context = options.context, did = options.did;
                        return [4 /*yield*/, this.getAuthor({ agent: agent, context: context, did: did })];
                    case 1:
                        authorDid = _e.sent();
                        return [4 /*yield*/, agent.dwnManager.processRequest({
                                author: authorDid,
                                target: authorDid,
                                messageType: 'RecordsQuery',
                                messageOptions: { filter: __assign({}, this._didRecordProperties) }
                            })];
                    case 2:
                        queryReply = (_e.sent()).reply;
                        try {
                            // Loop through all of the entries and return a match, if found.
                            for (_b = __values((_a = queryReply.entries) !== null && _a !== void 0 ? _a : []), _c = _b.next(); !_c.done; _c = _b.next()) {
                                record = _c.value;
                                if (record.encodedData) {
                                    storedDid = common_1.Convert.base64Url(record.encodedData).toObject();
                                    if (storedDid && storedDid.did === did)
                                        return [2 /*return*/, storedDid];
                                }
                            }
                        }
                        catch (e_3_1) { e_3 = { error: e_3_1 }; }
                        finally {
                            try {
                                if (_c && !_c.done && (_d = _b.return)) _d.call(_b);
                            }
                            finally { if (e_3) throw e_3.error; }
                        }
                        // Return undefined if no matches were found.
                        return [2 /*return*/, undefined];
                }
            });
        });
    };
    DidStoreDwn.prototype.importDid = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var agent, context, importDid, authorDid, duplicateFound, importDidU8A, status;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        agent = options.agent, context = options.context, importDid = options.did;
                        return [4 /*yield*/, this.getAuthor({ agent: agent, context: context, did: importDid.did })];
                    case 1:
                        authorDid = _a.sent();
                        return [4 /*yield*/, this.getDid({ agent: agent, context: context, did: importDid.did })];
                    case 2:
                        duplicateFound = _a.sent();
                        if (duplicateFound) {
                            throw new Error("DidStoreDwn: DID with ID already exists: '".concat(importDid.did, "'"));
                        }
                        importDidU8A = common_1.Convert.object(importDid).toUint8Array();
                        return [4 /*yield*/, agent.dwnManager.processRequest({
                                author: authorDid,
                                target: authorDid,
                                messageType: 'RecordsWrite',
                                messageOptions: __assign({}, this._didRecordProperties),
                                dataStream: new Blob([importDidU8A])
                            })];
                    case 3:
                        status = (_a.sent()).reply.status;
                        // If the write fails, throw an error.
                        if (status.code !== 202) {
                            throw new Error('DidStoreDwn: Failed to write imported DID to store.');
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    DidStoreDwn.prototype.listDids = function (options) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var agent, context, authorDid, queryReply, storedDids, _b, _c, record, storedDid;
            var e_4, _d;
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0:
                        agent = options.agent, context = options.context;
                        return [4 /*yield*/, this.getAuthor({ agent: agent, context: context })];
                    case 1:
                        authorDid = _e.sent();
                        return [4 /*yield*/, agent.dwnManager.processRequest({
                                author: authorDid,
                                target: authorDid,
                                messageType: 'RecordsQuery',
                                messageOptions: {
                                    filter: __assign({}, this._didRecordProperties)
                                }
                            })];
                    case 2:
                        queryReply = (_e.sent()).reply;
                        storedDids = [];
                        try {
                            for (_b = __values((_a = queryReply.entries) !== null && _a !== void 0 ? _a : []), _c = _b.next(); !_c.done; _c = _b.next()) {
                                record = _c.value;
                                if (record.encodedData) {
                                    storedDid = common_1.Convert.base64Url(record.encodedData).toObject();
                                    storedDids.push(storedDid);
                                }
                            }
                        }
                        catch (e_4_1) { e_4 = { error: e_4_1 }; }
                        finally {
                            try {
                                if (_c && !_c.done && (_d = _b.return)) _d.call(_b);
                            }
                            finally { if (e_4) throw e_4.error; }
                        }
                        return [2 /*return*/, storedDids];
                }
            });
        });
    };
    DidStoreDwn.prototype.getAuthor = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var context, did, agent, signingKeyId, keyPair, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        context = options.context, did = options.did, agent = options.agent;
                        // If `context` is specified, DWN messages will be signed by this DID.
                        if (context)
                            return [2 /*return*/, context];
                        // If Agent has an agentDid, use it to sign DWN messages.
                        if (agent.agentDid)
                            return [2 /*return*/, agent.agentDid];
                        // If `context`, `agent.agentDid`, and `did` are undefined, throw error.
                        if (!did) {
                            throw new Error("DidStoreDwn: Agent property 'agentDid' is undefined.");
                        }
                        return [4 /*yield*/, agent.didManager.getDefaultSigningKey({ did: did })];
                    case 1:
                        signingKeyId = _b.sent();
                        if (!(signingKeyId)) return [3 /*break*/, 3];
                        return [4 /*yield*/, agent.keyManager.getKey({ keyRef: signingKeyId })];
                    case 2:
                        _a = _b.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        _a = undefined;
                        _b.label = 4;
                    case 4:
                        keyPair = _a;
                        // If a key pair is found, use the `did` to sign messages.
                        if (keyPair)
                            return [2 /*return*/, did];
                        // If all else fails, throw an error.
                        throw new Error("DidStoreDwn: Agent property 'agentDid' is undefined and no keys were found for: '".concat(did, "'"));
                }
            });
        });
    };
    return DidStoreDwn;
}());
exports.DidStoreDwn = DidStoreDwn;
/**
 *
 */
var DidStoreMemory = /** @class */ (function () {
    function DidStoreMemory() {
        /**
         * A private field that contains the Map used as the in-memory key-value store.
         */
        this.store = new Map();
    }
    DidStoreMemory.prototype.deleteDid = function (_a) {
        var did = _a.did;
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_b) {
                if (this.store.has(did)) {
                    // DID with given identifier exists so proceed with delete.
                    this.store.delete(did);
                    return [2 /*return*/, true];
                }
                // DID with given identifier not present so delete operation not possible.
                return [2 /*return*/, false];
            });
        });
    };
    DidStoreMemory.prototype.getDid = function (_a) {
        var did = _a.did;
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_b) {
                return [2 /*return*/, this.store.get(did)];
            });
        });
    };
    DidStoreMemory.prototype.findDid = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var alias, did, _a, _b, did_1;
            var e_5, _c;
            return __generator(this, function (_d) {
                alias = options.alias, did = options.did;
                // Get DID by identifier.
                if (did)
                    return [2 /*return*/, this.store.get(did)];
                if (alias) {
                    try {
                        // Search through the store to find a matching entry
                        for (_a = __values(this.store.values()), _b = _a.next(); !_b.done; _b = _a.next()) {
                            did_1 = _b.value;
                            if (did_1.alias === alias)
                                return [2 /*return*/, did_1];
                        }
                    }
                    catch (e_5_1) { e_5 = { error: e_5_1 }; }
                    finally {
                        try {
                            if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                        }
                        finally { if (e_5) throw e_5.error; }
                    }
                }
                return [2 /*return*/, undefined];
            });
        });
    };
    DidStoreMemory.prototype.importDid = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var importDid, clonedDid;
            return __generator(this, function (_a) {
                importDid = options.did;
                if (this.store.has(importDid.did)) {
                    // DID with given identifier already exists so import operation cannot proceed.
                    throw new Error("DidStoreMemory: DID with ID already exists: '".concat(importDid.did, "'"));
                }
                clonedDid = structuredClone(importDid);
                this.store.set(importDid.did, clonedDid);
                return [2 /*return*/];
            });
        });
    };
    DidStoreMemory.prototype.listDids = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, Array.from(this.store.values())];
            });
        });
    };
    return DidStoreMemory;
}());
exports.DidStoreMemory = DidStoreMemory;
//# sourceMappingURL=store-managed-did.js.map