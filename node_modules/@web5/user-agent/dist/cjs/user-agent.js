"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Web5UserAgent = void 0;
var common_1 = require("@web5/common");
var crypto_1 = require("@web5/crypto");
var dids_1 = require("@web5/dids");
var agent_1 = require("@web5/agent");
var Web5UserAgent = /** @class */ (function () {
    function Web5UserAgent(options) {
        this.agentDid = options.agentDid;
        this.appData = options.appData;
        this.keyManager = options.keyManager;
        this.didManager = options.didManager;
        this.didResolver = options.didResolver;
        this.dwnManager = options.dwnManager;
        this.identityManager = options.identityManager;
        this.rpcClient = options.rpcClient;
        this.syncManager = options.syncManager;
        // Set this agent to be the default agent.
        this.didManager.agent = this;
        this.dwnManager.agent = this;
        this.identityManager.agent = this;
        this.keyManager.agent = this;
        this.syncManager.agent = this;
    }
    Web5UserAgent.create = function (options) {
        if (options === void 0) { options = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var agentDid, appData, didManager, didResolver, dwnManager, identityManager, keyManager, rpcClient, syncManager, localKmsDwn, localKmsMemory, agent;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        agentDid = options.agentDid, appData = options.appData, didManager = options.didManager, didResolver = options.didResolver, dwnManager = options.dwnManager, identityManager = options.identityManager, keyManager = options.keyManager, rpcClient = options.rpcClient, syncManager = options.syncManager;
                        if (agentDid === undefined) {
                            // An Agent DID was not specified, so set to empty string.
                            agentDid = '';
                        }
                        if (appData === undefined) {
                            /** A custom AppDataStore implementation was not specified, so
                             * instantiate a LevelDB backed secure AppDataVault. */
                            appData = new agent_1.AppDataVault({
                                store: new common_1.LevelStore('DATA/AGENT/APPDATA')
                            });
                        }
                        if (didManager === undefined) {
                            /** A custom DidManager implementation was not specified, so
                             * instantiate a default that uses a DWN-backed store. */
                            didManager = new agent_1.DidManager({
                                didMethods: [dids_1.DidIonMethod, dids_1.DidKeyMethod],
                                store: new agent_1.DidStoreDwn()
                            });
                        }
                        if (didResolver === undefined) {
                            /** A custom DidManager implementation was not specified, so
                             * instantiate a default that uses a DWN-backed store and
                             * LevelDB-backed resolution cache. */
                            didResolver = new dids_1.DidResolver({
                                cache: new dids_1.DidResolverCacheLevel(),
                                didResolvers: [dids_1.DidIonMethod, dids_1.DidKeyMethod]
                            });
                        }
                        if (!(dwnManager === undefined)) return [3 /*break*/, 2];
                        return [4 /*yield*/, agent_1.DwnManager.create({ didResolver: didResolver })];
                    case 1:
                        /** A custom DwnManager implementation was not specified, so
                         * instantiate a default. */
                        dwnManager = _a.sent();
                        _a.label = 2;
                    case 2:
                        if (identityManager === undefined) {
                            /** A custom IdentityManager implementation was not specified, so
                             * instantiate a default that uses a DWN-backed store. */
                            identityManager = new agent_1.IdentityManager({
                                store: new agent_1.IdentityStoreDwn()
                            });
                        }
                        if (keyManager === undefined) {
                            localKmsDwn = new agent_1.LocalKms({
                                kmsName: 'local',
                                keyStore: new agent_1.KeyStoreDwn({ schema: 'https://identity.foundation/schemas/web5/kms-key' }),
                                privateKeyStore: new agent_1.PrivateKeyStoreDwn()
                            });
                            localKmsMemory = new agent_1.LocalKms({
                                kmsName: 'memory'
                            });
                            keyManager = new agent_1.KeyManager({
                                kms: {
                                    local: localKmsDwn,
                                    memory: localKmsMemory
                                },
                                store: new agent_1.KeyStoreDwn({ schema: 'https://identity.foundation/schemas/web5/managed-key' })
                            });
                        }
                        if (rpcClient === undefined) {
                            // A custom RPC Client implementation was not specified, so
                            // instantiate a default.
                            rpcClient = new agent_1.Web5RpcClient();
                        }
                        if (syncManager === undefined) {
                            // A custom SyncManager implementation was not specified, so
                            // instantiate a LevelDB-backed default.
                            syncManager = new agent_1.SyncManagerLevel();
                        }
                        agent = new Web5UserAgent({
                            agentDid: agentDid,
                            appData: appData,
                            didManager: didManager,
                            didResolver: didResolver,
                            dwnManager: dwnManager,
                            keyManager: keyManager,
                            identityManager: identityManager,
                            rpcClient: rpcClient,
                            syncManager: syncManager
                        });
                        return [2 /*return*/, agent];
                }
            });
        });
    };
    Web5UserAgent.prototype.firstLaunch = function () {
        return __awaiter(this, void 0, void 0, function () {
            var initialized;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.appData.getStatus()];
                    case 1:
                        initialized = (_a.sent()).initialized;
                        return [2 /*return*/, initialized === false];
                }
            });
        });
    };
    /** Executed once the first time the Agent is launched.
     * The passphrase should be input by the end-user. */
    Web5UserAgent.prototype.initialize = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var passphrase, agentKeyPair;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        passphrase = options.passphrase;
                        return [4 /*yield*/, new crypto_1.EdDsaAlgorithm().generateKey({
                                algorithm: { name: 'EdDSA', namedCurve: 'Ed25519' },
                                extractable: true,
                                keyUsages: ['sign', 'verify']
                            })];
                    case 1:
                        agentKeyPair = _a.sent();
                        /** Initialize the AppDataStore with the Agent's
                         * private key and passphrase, which also unlocks the data vault. */
                        return [4 /*yield*/, this.appData.initialize({
                                passphrase: passphrase,
                                keyPair: agentKeyPair,
                            })];
                    case 2:
                        /** Initialize the AppDataStore with the Agent's
                         * private key and passphrase, which also unlocks the data vault. */
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    Web5UserAgent.prototype.processDidRequest = function (request) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, _b, didUrl, resolutionOptions, result;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        _a = request.messageType;
                        switch (_a) {
                            case agent_1.DidMessage.Resolve: return [3 /*break*/, 1];
                        }
                        return [3 /*break*/, 3];
                    case 1:
                        _b = request.messageOptions, didUrl = _b.didUrl, resolutionOptions = _b.resolutionOptions;
                        return [4 /*yield*/, this.didResolver.resolve(didUrl, resolutionOptions)];
                    case 2:
                        result = _c.sent();
                        return [2 /*return*/, { result: result }];
                    case 3:
                        {
                            return [2 /*return*/, this.didManager.processRequest(request)];
                        }
                        _c.label = 4;
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    Web5UserAgent.prototype.processDwnRequest = function (request) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.dwnManager.processRequest(request)];
            });
        });
    };
    Web5UserAgent.prototype.processVcRequest = function (_request) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                throw new Error('Not implemented');
            });
        });
    };
    Web5UserAgent.prototype.sendDidRequest = function (_request) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                throw new Error('Not implemented');
            });
        });
    };
    Web5UserAgent.prototype.sendDwnRequest = function (request) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.dwnManager.sendRequest(request)];
            });
        });
    };
    Web5UserAgent.prototype.sendVcRequest = function (_request) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                throw new Error('Not implemented');
            });
        });
    };
    Web5UserAgent.prototype.start = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var passphrase, _a, defaultSigningKey, _b;
            var _c, _d, _e;
            return __generator(this, function (_f) {
                switch (_f.label) {
                    case 0:
                        passphrase = options.passphrase;
                        return [4 /*yield*/, this.firstLaunch()];
                    case 1:
                        if (!_f.sent()) return [3 /*break*/, 3];
                        // 1A. Agent's first launch so initialize.
                        return [4 /*yield*/, this.initialize({ passphrase: passphrase })];
                    case 2:
                        // 1A. Agent's first launch so initialize.
                        _f.sent();
                        return [3 /*break*/, 5];
                    case 3: 
                    // 1B. Agent was previously initialized.
                    // Unlock the data vault and cache the vault unlock key (VUK) in memory.
                    return [4 /*yield*/, this.appData.unlock({ passphrase: passphrase })];
                    case 4:
                        // 1B. Agent was previously initialized.
                        // Unlock the data vault and cache the vault unlock key (VUK) in memory.
                        _f.sent();
                        _f.label = 5;
                    case 5:
                        // 2. Set the Agent's root did:key identifier.
                        _a = this;
                        return [4 /*yield*/, this.appData.getDid()];
                    case 6:
                        // 2. Set the Agent's root did:key identifier.
                        _a.agentDid = _f.sent();
                        _b = agent_1.cryptoToPortableKeyPair;
                        _c = {};
                        _d = {};
                        return [4 /*yield*/, this.appData.getPrivateKey()];
                    case 7:
                        _d.privateKey = _f.sent();
                        return [4 /*yield*/, this.appData.getPublicKey()];
                    case 8:
                        _c.cryptoKeyPair = (_d.publicKey = _f.sent(),
                            _d);
                        _e = {};
                        return [4 /*yield*/, this.didManager.getDefaultSigningKey({ did: this.agentDid })];
                    case 9:
                        defaultSigningKey = _b.apply(void 0, [(_c.keyData = (_e.alias = _f.sent(),
                                _e.kms = 'memory',
                                _e),
                                _c)]);
                        // Import the Agent's signing key pair to the in-memory KMS key stores.
                        return [4 /*yield*/, this.keyManager.setDefaultSigningKey({ key: defaultSigningKey })];
                    case 10:
                        // Import the Agent's signing key pair to the in-memory KMS key stores.
                        _f.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    return Web5UserAgent;
}());
exports.Web5UserAgent = Web5UserAgent;
//# sourceMappingURL=user-agent.js.map