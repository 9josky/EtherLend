{
  "version": 3,
  "sources": ["../esm/utils.js"],
  "sourcesContent": ["import { parse } from 'did-resolver';\nexport const DID_REGEX = /^did:([a-z0-9]+):((?:(?:[a-zA-Z0-9._-]|(?:%[0-9a-fA-F]{2}))*:)*((?:[a-zA-Z0-9._-]|(?:%[0-9a-fA-F]{2}))+))((;[a-zA-Z0-9_.:%-]+=[a-zA-Z0-9_.:%-]*)*)(\\/[^#?]*)?([?][^#]*)?(#.*)?$/;\n/**\n * Retrieves services from a given DID document based on provided options.\n * If no `id` or `type` filters are provided, all defined services are returned.\n *\n * Note: The DID document must adhere to the W3C DID specification.\n *\n * @param options - An object containing input parameters for retrieving services.\n * @param options.didDocument - The DID document from which services are retrieved.\n * @param options.id - Optional. A string representing the specific service ID to match. If provided, only the service with this ID will be returned.\n * @param options.type - Optional. A string representing the specific service type to match. If provided, only the service(s) of this type will be returned.\n *\n * @returns An array of services. If no matching service is found, an empty array is returned.\n *\n * @example\n *\n * const didDoc = { ... }; // W3C DID document\n * const services = getServices({ didDocument: didDoc, type: 'DecentralizedWebNode' });\n */\nexport function getServices(options) {\n    var _a, _b;\n    const { didDocument, id, type } = options !== null && options !== void 0 ? options : {};\n    return (_b = (_a = didDocument === null || didDocument === void 0 ? void 0 : didDocument.service) === null || _a === void 0 ? void 0 : _a.filter(service => {\n        if (id && service.id !== id)\n            return false;\n        if (type && service.type !== type)\n            return false;\n        return true;\n    })) !== null && _b !== void 0 ? _b : [];\n}\nexport function getVerificationMethodIds(options) {\n    const { didDocument, publicKeyJwk, publicKeyMultibase } = options;\n    if (!didDocument)\n        throw new Error(`Required parameter missing: 'didDocument'`);\n    if (!didDocument.verificationMethod)\n        throw new Error('Given `didDocument` is missing `verificationMethod` entries.');\n    for (let method of didDocument.verificationMethod) {\n        if (publicKeyMultibase && 'publicKeyMultibase' in method) {\n            if (publicKeyMultibase === method.publicKeyMultibase) {\n                return method.id;\n            }\n        }\n        else if (publicKeyJwk && 'crv' in publicKeyJwk &&\n            'publicKeyJwk' in method && 'crv' in method.publicKeyJwk) {\n            if (publicKeyJwk.crv === method.publicKeyJwk.crv &&\n                publicKeyJwk.x === method.publicKeyJwk.x) {\n                return method.id;\n            }\n        }\n    }\n}\n/**\n * Retrieves DID verification method types from a given DID document.\n *\n * Note: The DID document must adhere to the W3C DID specification.\n *\n * @param options - An object containing input parameters for retrieving types.\n * @param options.didDocument - The DID document from which types are retrieved.\n *\n * @returns An array of types. If no types were found, an empty array is returned.\n */\nexport function getVerificationMethodTypes(options) {\n    const { didDocument } = options;\n    let types = [];\n    for (let key in didDocument) {\n        if (typeof didDocument[key] === 'object') {\n            types = types.concat(getVerificationMethodTypes({\n                didDocument: didDocument[key]\n            }));\n        }\n        else if (key === 'type') {\n            types.push(didDocument[key]);\n        }\n    }\n    return [...new Set(types)]; // return only unique types\n}\n/**\n * Type guard function to check if the given endpoint is a DwnServiceEndpoint.\n *\n * @param key The endpoint to check.\n * @returns True if the endpoint is a DwnServiceEndpoint, false otherwise.\n */\nexport function isDwnServiceEndpoint(endpoint) {\n    return endpoint !== undefined &&\n        typeof endpoint !== 'string' &&\n        !Array.isArray(endpoint) &&\n        'nodes' in endpoint &&\n        'signingKeys' in endpoint;\n}\nexport function parseDid({ didUrl }) {\n    const parsedDid = parse(didUrl);\n    return parsedDid;\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAsB;AACf,IAAM,YAAY;AAmBlB,SAAS,YAAY,SAAS;AACjC,MAAI,IAAI;AACR,QAAM,EAAE,aAAa,IAAI,KAAK,IAAI,YAAY,QAAQ,YAAY,SAAS,UAAU,CAAC;AACtF,UAAQ,MAAM,KAAK,gBAAgB,QAAQ,gBAAgB,SAAS,SAAS,YAAY,aAAa,QAAQ,OAAO,SAAS,SAAS,GAAG,OAAO,aAAW;AACxJ,QAAI,MAAM,QAAQ,OAAO;AACrB,aAAO;AACX,QAAI,QAAQ,QAAQ,SAAS;AACzB,aAAO;AACX,WAAO;AAAA,EACX,CAAC,OAAO,QAAQ,OAAO,SAAS,KAAK,CAAC;AAC1C;AACO,SAAS,yBAAyB,SAAS;AAC9C,QAAM,EAAE,aAAa,cAAc,mBAAmB,IAAI;AAC1D,MAAI,CAAC;AACD,UAAM,IAAI,MAAM,2CAA2C;AAC/D,MAAI,CAAC,YAAY;AACb,UAAM,IAAI,MAAM,8DAA8D;AAClF,WAAS,UAAU,YAAY,oBAAoB;AAC/C,QAAI,sBAAsB,wBAAwB,QAAQ;AACtD,UAAI,uBAAuB,OAAO,oBAAoB;AAClD,eAAO,OAAO;AAAA,MAClB;AAAA,IACJ,WACS,gBAAgB,SAAS,gBAC9B,kBAAkB,UAAU,SAAS,OAAO,cAAc;AAC1D,UAAI,aAAa,QAAQ,OAAO,aAAa,OACzC,aAAa,MAAM,OAAO,aAAa,GAAG;AAC1C,eAAO,OAAO;AAAA,MAClB;AAAA,IACJ;AAAA,EACJ;AACJ;AAWO,SAAS,2BAA2B,SAAS;AAChD,QAAM,EAAE,YAAY,IAAI;AACxB,MAAI,QAAQ,CAAC;AACb,WAAS,OAAO,aAAa;AACzB,QAAI,OAAO,YAAY,GAAG,MAAM,UAAU;AACtC,cAAQ,MAAM,OAAO,2BAA2B;AAAA,QAC5C,aAAa,YAAY,GAAG;AAAA,MAChC,CAAC,CAAC;AAAA,IACN,WACS,QAAQ,QAAQ;AACrB,YAAM,KAAK,YAAY,GAAG,CAAC;AAAA,IAC/B;AAAA,EACJ;AACA,SAAO,CAAC,GAAG,IAAI,IAAI,KAAK,CAAC;AAC7B;AAOO,SAAS,qBAAqB,UAAU;AAC3C,SAAO,aAAa,UAChB,OAAO,aAAa,YACpB,CAAC,MAAM,QAAQ,QAAQ,KACvB,WAAW,YACX,iBAAiB;AACzB;AACO,SAAS,SAAS,EAAE,OAAO,GAAG;AACjC,QAAM,gBAAY,2BAAM,MAAM;AAC9B,SAAO;AACX;",
  "names": []
}
