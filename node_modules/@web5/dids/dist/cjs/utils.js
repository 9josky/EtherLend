var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// dist/esm/utils.js
var utils_exports = {};
__export(utils_exports, {
  DID_REGEX: () => DID_REGEX,
  getServices: () => getServices,
  getVerificationMethodIds: () => getVerificationMethodIds,
  getVerificationMethodTypes: () => getVerificationMethodTypes,
  isDwnServiceEndpoint: () => isDwnServiceEndpoint,
  parseDid: () => parseDid
});
module.exports = __toCommonJS(utils_exports);
var import_did_resolver = require("did-resolver");
var DID_REGEX = /^did:([a-z0-9]+):((?:(?:[a-zA-Z0-9._-]|(?:%[0-9a-fA-F]{2}))*:)*((?:[a-zA-Z0-9._-]|(?:%[0-9a-fA-F]{2}))+))((;[a-zA-Z0-9_.:%-]+=[a-zA-Z0-9_.:%-]*)*)(\/[^#?]*)?([?][^#]*)?(#.*)?$/;
function getServices(options) {
  var _a, _b;
  const { didDocument, id, type } = options !== null && options !== void 0 ? options : {};
  return (_b = (_a = didDocument === null || didDocument === void 0 ? void 0 : didDocument.service) === null || _a === void 0 ? void 0 : _a.filter((service) => {
    if (id && service.id !== id)
      return false;
    if (type && service.type !== type)
      return false;
    return true;
  })) !== null && _b !== void 0 ? _b : [];
}
function getVerificationMethodIds(options) {
  const { didDocument, publicKeyJwk, publicKeyMultibase } = options;
  if (!didDocument)
    throw new Error(`Required parameter missing: 'didDocument'`);
  if (!didDocument.verificationMethod)
    throw new Error("Given `didDocument` is missing `verificationMethod` entries.");
  for (let method of didDocument.verificationMethod) {
    if (publicKeyMultibase && "publicKeyMultibase" in method) {
      if (publicKeyMultibase === method.publicKeyMultibase) {
        return method.id;
      }
    } else if (publicKeyJwk && "crv" in publicKeyJwk && "publicKeyJwk" in method && "crv" in method.publicKeyJwk) {
      if (publicKeyJwk.crv === method.publicKeyJwk.crv && publicKeyJwk.x === method.publicKeyJwk.x) {
        return method.id;
      }
    }
  }
}
function getVerificationMethodTypes(options) {
  const { didDocument } = options;
  let types = [];
  for (let key in didDocument) {
    if (typeof didDocument[key] === "object") {
      types = types.concat(getVerificationMethodTypes({
        didDocument: didDocument[key]
      }));
    } else if (key === "type") {
      types.push(didDocument[key]);
    }
  }
  return [...new Set(types)];
}
function isDwnServiceEndpoint(endpoint) {
  return endpoint !== void 0 && typeof endpoint !== "string" && !Array.isArray(endpoint) && "nodes" in endpoint && "signingKeys" in endpoint;
}
function parseDid({ didUrl }) {
  const parsedDid = (0, import_did_resolver.parse)(didUrl);
  return parsedDid;
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  DID_REGEX,
  getServices,
  getVerificationMethodIds,
  getVerificationMethodTypes,
  isDwnServiceEndpoint,
  parseDid
});
//# sourceMappingURL=utils.js.map
