export type SignedPacket = import('./lib/signed_packet.js').default;
export const SignedPacket: typeof _SignedPacket;
export const z32: any;
export const dns: typeof _dns;
export const generateKeyPair: (seed?: Uint8Array) => import("./lib/tools.js").KeyPair;
export class Pkarr {
    static generateKeyPair: (seed?: Uint8Array) => import("./lib/tools.js").KeyPair;
    static generateSeed: typeof randomBytes;
    /**
     * Publishes a signed packet using relay. returns the Fetch response.
     *
     * @param {string} relay - Relay url
     * @param {SignedPacket} signedPacket
     */
    static relayPut(relay: string, signedPacket: SignedPacket): Promise<Response>;
    /**
     * Publishes a signed packet using relay. returns the Fetch response.
     *
     * @param {string} relay - Relay url
     * @param {Uint8Array} publicKey
     */
    static relayGet(relay: string, publicKey: Uint8Array): Promise<_SignedPacket>;
    /**
     * Publishes a signed packet to the DHT.
     * Throws an error in browser environment.
     *
     * @param {SignedPacket} signedPacket
     *
     * @returns {Promise<boolean>}
     */
    static publish(signedPacket: SignedPacket): Promise<boolean>;
    /**
     * Resolves a signed packet from the DHT.
     * Throws an error in browser environment.
     *
     * @param {Uint8Array | string} key
     * @param {object} [options]
     * @param {boolean} [options.fullLookup=false] - perform a full lookup through the DHT, defaults to false, meaning it will return the first result it finds
     *
     * @throws {Error<'Invalid key'>}
     * @returns {Promise<{signedPacket: SignedPacket, nodes: {host: string, port: number}[]} | null>}
     */
    static resolve(key: Uint8Array | string, options?: {
        fullLookup?: boolean;
    }): Promise<{
        signedPacket: SignedPacket;
        nodes: {
            host: string;
            port: number;
        }[];
    } | null>;
}
export default Pkarr;
export type Packet = import('./lib/signed_packet.js').Packet;
import _SignedPacket from './lib/signed_packet.js';
import _dns from 'dns-packet';
import { randomBytes } from './lib/tools.js';
//# sourceMappingURL=index.d.ts.map