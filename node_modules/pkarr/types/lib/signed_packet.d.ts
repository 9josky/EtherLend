export default class SignedPacket {
    /**
     * Creates a new SignedPacket from a Keypair and a DNS Packet.
     *
     * It will also normalize the names of the ResourceRecords to be relative to the origin, which would be the zbase32 encoded PublicKey of the Keypair used to sign the Packet.
     *
     * @param {Keypair} keypair
     * @param {Packet} packet
     *
     * @param {object} [options] - Optional arguments mostly useful for unit testing
     * @param {object} [options.timestamp] - timestamp in microseconds
     *
     * @returns {SignedPacket}
     */
    static fromPacket(keypair: Keypair, packet: Packet, options?: {
        timestamp?: object;
    }): SignedPacket;
    /**
     * Creates a new [SignedPacket] from a [PublicKey] and the concatenated 64 bytes Signature,
     * 8 bytes timestamp and encoded [Packet] as defined in the [relays](https://github.com/Nuhvi/pkarr/blob/main/design/relays.md) spec.
     *
     * @param {Uint8Array} publicKey
     * @param {Uint8Array} bytes
     */
    static fromBytes(publicKey: Uint8Array, bytes: Uint8Array): SignedPacket;
    /**
     * @param {Bep44Args} args
     */
    static fromBep44Args(args: Bep44Args): SignedPacket;
    /**
     * Returns a list of resource records with the target `name`.
     * `name` can be not normalized, for example `@` or `subdomain.`.
     *
     * @param {string} name
     */
    resourceRecords(name: string): dns.Answer[];
    /**
     * Returns the publicKey singing this packet
     *
     * @returns{Uint8Array}
     * */
    publicKey(): Uint8Array;
    /**
     * Returns the DNS packet
     *
     * @returns{Packet}
     * */
    packet(): Packet;
    /**
     * Returns the timestamp of the creation of the signed packet
     *
     * @returns {number}
     */
    timestamp(): number;
    /**
     * Returns the signature over the encoded DNS packet and timestamp as defined by BEP44
     *
     * @returns{Uint8Array}
     * */
    signature(): Uint8Array;
    /**
     * Returns the encoded signature, timestamp and packet as defined in the [relays](https://github.com/Nuhvi/pkarr/blob/main/design/relays.md) spec.
     *
     * @returns {Uint8Array}
     */
    bytes(): Uint8Array;
    /**
     * Returns BEP0044 arguments { seq, v, sig }
     *
     * @returns {Bep44Args}
     */
    bep44Args(): Bep44Args;
    /**
     * Returns the size of the encoded packet
     */
    size(): number;
    #private;
}
export type Packet = import('dns-packet').Packet;
export type Keypair = {
    secretKey: Uint8Array;
    publicKey: Uint8Array;
};
export type Bep44Args = {
    k: Uint8Array;
    seq: number;
    v: Uint8Array;
    sig: Uint8Array;
};
import dns from 'dns-packet';
//# sourceMappingURL=signed_packet.d.ts.map