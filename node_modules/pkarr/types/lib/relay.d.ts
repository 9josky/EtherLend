/// <reference types="node" />
export default class Server {
    /**
     * @param {object} [options]
     * @param {DHT} [options.dht]
     * @param {number} [options.port]
     */
    static start(options?: {
        dht?: DHT;
        port?: number;
    }): Promise<any>;
    /**
     * @param {object} [options]
     * @param {DHT} [options.dht]
     */
    constructor(options?: {
        dht?: DHT;
    });
    _server: http.Server;
    _dht: DHT;
    get port(): any;
    get address(): string;
    /**
     * Start a web relay listening on the provided port or default port 3000
     *
     * @param {number} [port]
     */
    listen(port?: number): Promise<any>;
    /**
     * Close the web relay
     */
    close(): Promise<http.Server>;
    /**
     * @param {http.IncomingMessage} req
     * @param {http.ServerResponse} res
     */
    _handle(req: http.IncomingMessage, res: http.ServerResponse): void;
    /**
     * Respond to preflight requests
     *
     * @param {http.IncomingMessage} _req
     * @param {http.ServerResponse} res
     */
    _OPTIONS(_req: http.IncomingMessage, res: http.ServerResponse): void;
    /**
     * @param {http.IncomingMessage} req
     * @param {http.ServerResponse} res
     * @param {Uint8Array} key
     */
    _PUT(req: http.IncomingMessage, res: http.ServerResponse, key: Uint8Array): Promise<void>;
    /**
     * @param {http.IncomingMessage} req
     * @param {http.ServerResponse} res
     * @param {Uint8Array} key
     */
    _GET(req: http.IncomingMessage, res: http.ServerResponse, key: Uint8Array): Promise<void>;
}
import http from 'http';
import DHT from './dht.js';
//# sourceMappingURL=relay.d.ts.map