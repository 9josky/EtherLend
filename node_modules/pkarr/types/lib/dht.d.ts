export class DHT {
    /**
     * @param {object} [options]
     * @param {{host:string, port:number}[]} [options.bootstrap] - List of bootstrap nodes. example [{host: "router.utorrent.com", port: 6881}]
     * @param {Storage} [options.storage]
     * @param {string} [options.storageLocation] - location to store bootstrap nodes at
     */
    constructor(options?: {
        bootstrap?: {
            host: string;
            port: number;
        }[];
        storage?: Storage;
        storageLocation?: string;
    });
    _dht: any;
    /**
     * Reguest a mutable value from the DHT.
     *
     * @param {Uint8Array} key
     * @param {object} [options]
     * @param {boolean} [options.fullLookup] - If true, will perform a full lookup, otherwise return the first valid result.
     *
     * @returns {Promise<{
     *  id: Uint8Array,
     *  k: Uint8Array,
     *  seq: number,
     *  v: Uint8Array,
     *  sig: Uint8Array,
     *  nodes?: Array<{ host: string, port: number, client?: string }>
     * }>}
     */
    get(key: Uint8Array, options?: {
        fullLookup?: boolean;
    }): Promise<{
        id: Uint8Array;
        k: Uint8Array;
        seq: number;
        v: Uint8Array;
        sig: Uint8Array;
        nodes?: Array<{
            host: string;
            port: number;
            client?: string;
        }>;
    }>;
    /**
     * @param  {object} args
     * @param  {Uint8Array} args.k
     * @param  {Uint8Array} args.v
     * @param  {Uint8Array} args.sig
     * @param  {number} args.seq
     *
     * @returns {Promise<{
     *  target: Uint8Array,
     *  nodes: Array<{ id: Uint8Array, host: string, port: number }>
     * }>}
     */
    put(args: {
        k: Uint8Array;
        v: Uint8Array;
        sig: Uint8Array;
        seq: number;
    }): Promise<{
        target: Uint8Array;
        nodes: Array<{
            id: Uint8Array;
            host: string;
            port: number;
        }>;
    }>;
    destroy(): Promise<any>;
}
export default DHT;
export type Node = {
    host: string;
    port: number;
    address?: string;
};
export type GenericResponse = {
    v: string;
    r: any;
};
export type PutRequest = {
    sig: Uint8Array;
    k: Uint8Array;
    seq: number;
    v: Uint8Array;
};
export type MutableGetResponse = GenericResponse & {
    r: PutRequest;
};
declare class Storage {
    /**
     * @param {string} location
     */
    constructor(location: string);
    _location: string;
    _loaded: any[];
    /**
     * @param {_DHT} dht
     */
    loadRoutingTable(dht: _DHT): void;
    /**
     * @param {_DHT} dht
     */
    saveRoutingTable(dht: _DHT): void;
}
//# sourceMappingURL=dht.d.ts.map