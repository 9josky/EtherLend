import type { PrivateJwk, PublicJwk } from '../types/jose-types.js';
export declare enum KeyDerivationScheme {
    /**
     * Key derivation using the `dataFormat` value for Flat-space records.
     */
    DataFormats = "dataFormats",
    ProtocolContext = "protocolContext",
    ProtocolPath = "protocolPath",
    /**
     * Key derivation using the `schema` value for Flat-space records.
     */
    Schemas = "schemas"
}
export type DerivedPrivateJwk = {
    rootKeyId: string;
    derivationScheme: KeyDerivationScheme;
    derivationPath?: string[];
    derivedPrivateKey: PrivateJwk;
};
/**
 * Class containing hierarchical deterministic key related utility methods used by the DWN.
 */
export declare class HdKey {
    /**
     * Derives a descendant private key.
     * NOTE: currently only supports SECP256K1 keys.
     */
    static derivePrivateKey(ancestorKey: DerivedPrivateJwk, subDerivationPath: string[]): Promise<DerivedPrivateJwk>;
    /**
     * Derives a descendant public key from an ancestor private key.
     * NOTE: currently only supports SECP256K1 keys.
     */
    static derivePublicKey(ancestorKey: DerivedPrivateJwk, subDerivationPath: string[]): Promise<PublicJwk>;
}
//# sourceMappingURL=hd-key.d.ts.map