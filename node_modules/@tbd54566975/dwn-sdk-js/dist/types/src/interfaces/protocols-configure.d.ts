import type { SignatureInput } from '../types/jws-types.js';
import type { ProtocolDefinition, ProtocolsConfigureMessage } from '../types/protocols-types.js';
import { Message } from '../core/message.js';
export type ProtocolsConfigureOptions = {
    messageTimestamp?: string;
    definition: ProtocolDefinition;
    authorizationSignatureInput: SignatureInput;
    permissionsGrantId?: string;
};
export declare class ProtocolsConfigure extends Message<ProtocolsConfigureMessage> {
    readonly author: string;
    static parse(message: ProtocolsConfigureMessage): Promise<ProtocolsConfigure>;
    static create(options: ProtocolsConfigureOptions): Promise<ProtocolsConfigure>;
    private static validateDefinitionNormalized;
    private static normalizeDefinition;
}
//# sourceMappingURL=protocols-configure.d.ts.map