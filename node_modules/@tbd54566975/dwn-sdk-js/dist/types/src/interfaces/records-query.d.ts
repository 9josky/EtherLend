import type { SignatureInput } from '../types/jws-types.js';
import type { Filter } from '../types/message-types.js';
import type { RecordsQueryFilter, RecordsQueryMessage } from '../types/records-types.js';
import { Message } from '../core/message.js';
export declare enum DateSort {
    CreatedAscending = "createdAscending",
    CreatedDescending = "createdDescending",
    PublishedAscending = "publishedAscending",
    PublishedDescending = "publishedDescending"
}
export type RecordsQueryOptions = {
    messageTimestamp?: string;
    filter: RecordsQueryFilter;
    dateSort?: DateSort;
    authorizationSignatureInput?: SignatureInput;
};
export declare class RecordsQuery extends Message<RecordsQueryMessage> {
    static parse(message: RecordsQueryMessage): Promise<RecordsQuery>;
    static create(options: RecordsQueryOptions): Promise<RecordsQuery>;
    static convertFilter(filter: RecordsQueryFilter): Filter;
    static normalizeFilter(filter: RecordsQueryFilter): RecordsQueryFilter;
}
//# sourceMappingURL=records-query.d.ts.map