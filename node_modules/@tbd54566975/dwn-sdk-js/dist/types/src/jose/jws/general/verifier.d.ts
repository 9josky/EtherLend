import type { Cache } from '../../../types/cache.js';
import type { GeneralJws } from '../../../types/jws-types.js';
import type { PublicJwk } from '../../../types/jose-types.js';
import type { DidResolver } from '../../../did/did-resolver.js';
type VerificationResult = {
    /** DIDs of all signers */
    signers: string[];
};
export declare class GeneralJwsVerifier {
    jws: GeneralJws;
    cache: Cache;
    constructor(jws: GeneralJws, cache?: Cache);
    verify(didResolver: DidResolver): Promise<VerificationResult>;
    /**
     * Gets the public key given a fully qualified key ID (`kid`).
     */
    static getPublicKey(kid: string, didResolver: DidResolver): Promise<PublicJwk>;
}
export {};
//# sourceMappingURL=verifier.d.ts.map