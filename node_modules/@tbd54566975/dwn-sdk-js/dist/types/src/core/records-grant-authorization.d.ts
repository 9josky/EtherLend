import type { MessageStore } from '../types/message-store.js';
import type { RecordsRead } from '../interfaces/records-read.js';
import type { RecordsWrite } from '../interfaces/records-write.js';
export declare class RecordsGrantAuthorization {
    /**
     * Authorizes the given RecordsWrite in the scope of the DID given.
     */
    static authorizeWrite(tenant: string, incomingMessage: RecordsWrite, author: string, messageStore: MessageStore): Promise<void>;
    /**
     * Authorizes the scope of a PermissionsGrant for RecordsRead.
     */
    static authorizeRead(tenant: string, incomingMessage: RecordsRead, newestRecordsWrite: RecordsWrite, author: string, messageStore: MessageStore): Promise<void>;
    /**
     * @param recordsWrite The source of the record being authorized. If the incoming message is a write,
     *                     then this is the incoming RecordsWrite. Otherwise, it is the newest existing RecordsWrite.
     */
    private static verifyScope;
    /**
     * Authorizes a grant scope for a protocol record
     */
    private static authorizeProtocolRecord;
    /**
     * Authorizes a grant scope for a non-protocol record
     */
    private static authorizeFlatRecord;
    /**
     * Verifies grant `conditions`.
     * Currently the only condition is `published` which only applies to RecordsWrites
     */
    private static verifyConditions;
    /**
     * Checks if scope has no restrictions beyond interface and method.
     * Grant-holder is authorized to access any record.
     */
    private static isUnrestrictedScope;
}
//# sourceMappingURL=records-grant-authorization.d.ts.map