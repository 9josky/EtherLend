/**
 * A class that represents a DWN error.
 */
export declare class DwnError extends Error {
    code: string;
    constructor(code: string, message: string);
}
/**
 * DWN SDK error codes.
 */
export declare enum DwnErrorCode {
    AuthenticateJwsMissing = "AuthenticateJwsMissing",
    AuthorizationUnknownAuthor = "AuthorizationUnknownAuthor",
    GeneralJwsVerifierInvalidSignature = "GeneralJwsVerifierInvalidSignature",
    GrantAuthorizationGrantExpired = "GrantAuthorizationGrantExpired",
    GrantAuthorizationGrantMissing = "GrantAuthorizationGrantMissing",
    GrantAuthorizationGrantRevoked = "GrantAuthorizationGrantRevoked",
    GrantAuthorizationInterfaceMismatch = "GrantAuthorizationInterfaceMismatch",
    GrantAuthorizationMethodMismatch = "GrantAuthorizationMethodMismatch",
    GrantAuthorizationNotGrantedForTenant = "GrantAuthorizationNotGrantedForTenant",
    GrantAuthorizationNotGrantedToAuthor = "GrantAuthorizationNotGrantedToAuthor",
    GrantAuthorizationGrantNotYetActive = "GrantAuthorizationGrantNotYetActive",
    HdKeyDerivationPathInvalid = "HdKeyDerivationPathInvalid",
    PermissionsGrantGrantedByMismatch = "PermissionsGrantGrantedByMismatch",
    PermissionsGrantScopeContextIdAndProtocolPath = "PermissionsGrantScopeContextIdAndProtocolPath",
    PermissionsGrantScopeSchemaProhibitedFields = "PermissionsGrantScopeSchemaProhibitedFields",
    PermissionsGrantUnauthorizedGrant = "PermissionsGrantUnauthorizedGrant",
    PermissionsRevokeMissingPermissionsGrant = "PermissionsRevokeMissingPermissionsGrant",
    PermissionsRevokeUnauthorizedRevoke = "PermissionsRevokeUnauthorizedRevoke",
    PrivateKeySignerUnableToDeduceAlgorithm = "PrivateKeySignerUnableToDeduceAlgorithm",
    PrivateKeySignerUnableToDeduceKeyId = "PrivateKeySignerUnableToDeduceKeyId",
    PrivateKeySignerUnsupportedCurve = "PrivateKeySignerUnsupportedCurve",
    ProtocolAuthorizationActionNotAllowed = "ProtocolAuthorizationActionNotAllowed",
    ProtocolAuthorizationDuplicateContextRoleRecipient = "ProtocolAuthorizationDuplicateContextRoleRecipient",
    ProtocolAuthorizationDuplicateGlobalRoleRecipient = "ProtocolAuthorizationDuplicateGlobalRoleRecipient",
    ProtocolAuthorizationIncorrectDataFormat = "ProtocolAuthorizationIncorrectDataFormat",
    ProtocolAuthorizationIncorrectProtocolPath = "ProtocolAuthorizationIncorrectProtocolPath",
    ProtocolAuthorizationInvalidSchema = "ProtocolAuthorizationInvalidSchema",
    ProtocolAuthorizationInvalidType = "ProtocolAuthorizationInvalidType",
    ProtocolAuthorizationMissingRole = "ProtocolAuthorizationMissingRole",
    ProtocolAuthorizationMissingRuleSet = "ProtocolAuthorizationMissingRuleSet",
    ProtocolAuthorizationNotARole = "ProtocolAuthorizationNotARole",
    ProtocolAuthorizationRoleMissingRecipient = "ProtocolAuthorizationRoleMissingRecipient",
    ProtocolsConfigureContextRoleAtProhibitedProtocolPath = "ProtocolsConfigureContextRoleAtProhibitedProtocolPath",
    ProtocolsConfigureGlobalRoleAtProhibitedProtocolPath = "ProtocolsConfigureGlobalRoleAtProhibitedProtocolPath",
    ProtocolsConfigureInvalidRole = "ProtocolsConfigureInvalidRole",
    ProtocolsConfigureInvalidActionMissingOf = "ProtocolsConfigureInvalidActionMissingOf",
    ProtocolsConfigureInvalidActionOfNotAllowed = "ProtocolsConfigureInvalidActionOfNotAllowed",
    ProtocolsConfigureUnauthorized = "ProtocolsConfigureUnauthorized",
    ProtocolsQueryUnauthorized = "ProtocolsQueryUnauthorized",
    RecordsDecryptNoMatchingKeyEncryptedFound = "RecordsDecryptNoMatchingKeyEncryptedFound",
    RecordsGrantAuthorizationConditionPublicationProhibited = "RecordsGrantAuthorizationConditionPublicationProhibited",
    RecordsGrantAuthorizationConditionPublicationRequired = "RecordsGrantAuthorizationConditionPublicationRequired",
    RecordsGrantAuthorizationScopeContextIdMismatch = "RecordsGrantAuthorizationScopeContextIdMismatch",
    RecordsGrantAuthorizationScopeNotProtocol = "RecordsGrantAuthorizationScopeNotProtocol",
    RecordsGrantAuthorizationScopeProtocolMismatch = "RecordsGrantAuthorizationScopeProtocolMismatch",
    RecordsGrantAuthorizationScopeProtocolPathMismatch = "RecordsGrantAuthorizationScopeProtocolPathMismatch",
    RecordsGrantAuthorizationScopeSchema = "RecordsGrantAuthorizationScopeSchema",
    RecordsDerivePrivateKeyUnSupportedCurve = "RecordsDerivePrivateKeyUnSupportedCurve",
    RecordsInvalidAncestorKeyDerivationSegment = "RecordsInvalidAncestorKeyDerivationSegment",
    RecordsProtocolContextDerivationSchemeMissingContextId = "RecordsProtocolContextDerivationSchemeMissingContextId",
    RecordsProtocolPathDerivationSchemeMissingProtocol = "RecordsProtocolPathDerivationSchemeMissingProtocol",
    RecordsReadReturnedMultiple = "RecordsReadReturnedMultiple",
    RecordsSchemasDerivationSchemeMissingSchema = "RecordsSchemasDerivationSchemeMissingSchema",
    RecordsWriteGetEntryIdUndefinedAuthor = "RecordsWriteGetEntryIdUndefinedAuthor",
    RecordsWriteDataCidMismatch = "RecordsWriteDataCidMismatch",
    RecordsWriteDataSizeMismatch = "RecordsWriteDataSizeMismatch",
    RecordsWriteMissingAuthorizationSigner = "RecordsWriteMissingAuthorizationSigner",
    RecordsWriteMissingDataInPrevious = "RecordsWriteMissingDataInPrevious",
    RecordsWriteMissingDataAssociation = "RecordsWriteMissingDataAssociation",
    RecordsWriteMissingDataStream = "RecordsWriteMissingDataStream",
    RecordsWriteMissingProtocol = "RecordsWriteMissingProtocol",
    RecordsWriteMissingSchema = "RecordsWriteMissingSchema",
    RecordsWriteOwnerAndTenantMismatch = "RecordsWriteOwnerAndTenantMismatch",
    RecordsWriteSignAsOwnerUnknownAuthor = "RecordsWriteSignAsOwnerUnknownAuthor",
    RecordsWriteValidateIntegrityEncryptionCidMismatch = "RecordsWriteValidateIntegrityEncryptionCidMismatch",
    Secp256k1KeyNotValid = "Secp256k1KeyNotValid",
    UrlProtocolNotNormalized = "UrlProtocolNotNormalized",
    UrlProtocolNotNormalizable = "UrlProtocolNotNormalizable",
    UrlSchemaNotNormalized = "UrlSchemaNotNormalized",
    UrlSchemaNotNormalizable = "UrlSchemaNotNormalizable"
}
//# sourceMappingURL=dwn-error.d.ts.map