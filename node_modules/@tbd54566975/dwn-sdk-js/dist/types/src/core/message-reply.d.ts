import type { QueryResultEntry } from '../types/message-types.js';
import type { Readable } from 'readable-stream';
type Status = {
    code: number;
    detail: string;
};
export type GenericMessageReply = {
    status: Status;
};
export declare function messageReplyFromError(e: unknown, code: number): GenericMessageReply;
/**
 * Catch-all message reply type. It is recommended to use GenericMessageReply or a message-specific reply type wherever possible.
 */
export type UnionMessageReply = GenericMessageReply & {
    /**
     * Resulting message entries or events returned from the invocation of the corresponding message.
     * e.g. the resulting messages from a RecordsQuery
     * Mutually exclusive with `data`.
     */
    entries?: QueryResultEntry[];
    /**
     * Data corresponding to the message received if applicable (e.g. RecordsRead).
     * Mutually exclusive with `entries`.
     */
    data?: Readable;
};
export {};
//# sourceMappingURL=message-reply.d.ts.map