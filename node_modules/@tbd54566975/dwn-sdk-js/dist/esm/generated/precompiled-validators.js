"use strict";
export const Authorization = validate10;
const schema11 = { "$id": "https://identity.foundation/dwn/json-schemas/authorization.json", "$schema": "http://json-schema.org/draft-07/schema#", "type": "object", "additionalProperties": false, "properties": { "authorSignature": { "$ref": "https://identity.foundation/dwn/json-schemas/general-jws.json" } } };
const schema12 = { "$id": "https://identity.foundation/dwn/json-schemas/general-jws.json", "$schema": "http://json-schema.org/draft-07/schema#", "type": "object", "additionalProperties": false, "properties": { "payload": { "$ref": "https://identity.foundation/dwn/json-schemas/defs.json#/definitions/base64url" }, "signatures": { "type": "array", "minItems": 1, "items": { "type": "object", "properties": { "protected": { "$ref": "https://identity.foundation/dwn/json-schemas/defs.json#/definitions/base64url" }, "signature": { "$ref": "https://identity.foundation/dwn/json-schemas/defs.json#/definitions/base64url" } } } } } };
const schema14 = { "type": "string", "pattern": "^[A-Za-z0-9_-]+$" };
const pattern0 = new RegExp("^[A-Za-z0-9_-]+$", "u");
function validate11(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) { /*# sourceURL="https://identity.foundation/dwn/json-schemas/general-jws.json" */ ; let vErrors = null; let errors = 0; if (errors === 0) {
    if (data && typeof data == "object" && !Array.isArray(data)) {
        const _errs1 = errors;
        for (const key0 in data) {
            if (!((key0 === "payload") || (key0 === "signatures"))) {
                validate11.errors = [{ instancePath, schemaPath: "#/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties" }];
                return false;
                break;
            }
        }
        if (_errs1 === errors) {
            if (data.payload !== undefined) {
                let data0 = data.payload;
                const _errs2 = errors;
                const _errs3 = errors;
                if (errors === _errs3) {
                    if (typeof data0 === "string") {
                        if (!pattern0.test(data0)) {
                            validate11.errors = [{ instancePath: instancePath + "/payload", schemaPath: "https://identity.foundation/dwn/json-schemas/defs.json#/definitions/base64url/pattern", keyword: "pattern", params: { pattern: "^[A-Za-z0-9_-]+$" }, message: "must match pattern \"" + "^[A-Za-z0-9_-]+$" + "\"" }];
                            return false;
                        }
                    }
                    else {
                        validate11.errors = [{ instancePath: instancePath + "/payload", schemaPath: "https://identity.foundation/dwn/json-schemas/defs.json#/definitions/base64url/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                        return false;
                    }
                }
                var valid0 = _errs2 === errors;
            }
            else {
                var valid0 = true;
            }
            if (valid0) {
                if (data.signatures !== undefined) {
                    let data1 = data.signatures;
                    const _errs5 = errors;
                    if (errors === _errs5) {
                        if (Array.isArray(data1)) {
                            if (data1.length < 1) {
                                validate11.errors = [{ instancePath: instancePath + "/signatures", schemaPath: "#/properties/signatures/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }];
                                return false;
                            }
                            else {
                                var valid2 = true;
                                const len0 = data1.length;
                                for (let i0 = 0; i0 < len0; i0++) {
                                    let data2 = data1[i0];
                                    const _errs7 = errors;
                                    if (errors === _errs7) {
                                        if (data2 && typeof data2 == "object" && !Array.isArray(data2)) {
                                            if (data2.protected !== undefined) {
                                                let data3 = data2.protected;
                                                const _errs9 = errors;
                                                const _errs10 = errors;
                                                if (errors === _errs10) {
                                                    if (typeof data3 === "string") {
                                                        if (!pattern0.test(data3)) {
                                                            validate11.errors = [{ instancePath: instancePath + "/signatures/" + i0 + "/protected", schemaPath: "https://identity.foundation/dwn/json-schemas/defs.json#/definitions/base64url/pattern", keyword: "pattern", params: { pattern: "^[A-Za-z0-9_-]+$" }, message: "must match pattern \"" + "^[A-Za-z0-9_-]+$" + "\"" }];
                                                            return false;
                                                        }
                                                    }
                                                    else {
                                                        validate11.errors = [{ instancePath: instancePath + "/signatures/" + i0 + "/protected", schemaPath: "https://identity.foundation/dwn/json-schemas/defs.json#/definitions/base64url/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                        return false;
                                                    }
                                                }
                                                var valid3 = _errs9 === errors;
                                            }
                                            else {
                                                var valid3 = true;
                                            }
                                            if (valid3) {
                                                if (data2.signature !== undefined) {
                                                    let data4 = data2.signature;
                                                    const _errs12 = errors;
                                                    const _errs13 = errors;
                                                    if (errors === _errs13) {
                                                        if (typeof data4 === "string") {
                                                            if (!pattern0.test(data4)) {
                                                                validate11.errors = [{ instancePath: instancePath + "/signatures/" + i0 + "/signature", schemaPath: "https://identity.foundation/dwn/json-schemas/defs.json#/definitions/base64url/pattern", keyword: "pattern", params: { pattern: "^[A-Za-z0-9_-]+$" }, message: "must match pattern \"" + "^[A-Za-z0-9_-]+$" + "\"" }];
                                                                return false;
                                                            }
                                                        }
                                                        else {
                                                            validate11.errors = [{ instancePath: instancePath + "/signatures/" + i0 + "/signature", schemaPath: "https://identity.foundation/dwn/json-schemas/defs.json#/definitions/base64url/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                            return false;
                                                        }
                                                    }
                                                    var valid3 = _errs12 === errors;
                                                }
                                                else {
                                                    var valid3 = true;
                                                }
                                            }
                                        }
                                        else {
                                            validate11.errors = [{ instancePath: instancePath + "/signatures/" + i0, schemaPath: "#/properties/signatures/items/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
                                            return false;
                                        }
                                    }
                                    var valid2 = _errs7 === errors;
                                    if (!valid2) {
                                        break;
                                    }
                                }
                            }
                        }
                        else {
                            validate11.errors = [{ instancePath: instancePath + "/signatures", schemaPath: "#/properties/signatures/type", keyword: "type", params: { type: "array" }, message: "must be array" }];
                            return false;
                        }
                    }
                    var valid0 = _errs5 === errors;
                }
                else {
                    var valid0 = true;
                }
            }
        }
    }
    else {
        validate11.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
        return false;
    }
} validate11.errors = vErrors; return errors === 0; }
function validate10(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) { /*# sourceURL="https://identity.foundation/dwn/json-schemas/authorization.json" */ ; let vErrors = null; let errors = 0; if (errors === 0) {
    if (data && typeof data == "object" && !Array.isArray(data)) {
        const _errs1 = errors;
        for (const key0 in data) {
            if (!(key0 === "authorSignature")) {
                validate10.errors = [{ instancePath, schemaPath: "#/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties" }];
                return false;
                break;
            }
        }
        if (_errs1 === errors) {
            if (data.authorSignature !== undefined) {
                if (!(validate11(data.authorSignature, { instancePath: instancePath + "/authorSignature", parentData: data, parentDataProperty: "authorSignature", rootData }))) {
                    vErrors = vErrors === null ? validate11.errors : vErrors.concat(validate11.errors);
                    errors = vErrors.length;
                }
            }
        }
    }
    else {
        validate10.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
        return false;
    }
} validate10.errors = vErrors; return errors === 0; }
export const AuthorizationOwner = validate14;
const schema17 = { "$id": "https://identity.foundation/dwn/json-schemas/authorization-owner.json", "$schema": "http://json-schema.org/draft-07/schema#", "type": "object", "additionalProperties": false, "properties": { "authorSignature": { "$ref": "https://identity.foundation/dwn/json-schemas/general-jws.json" }, "ownerSignature": { "$ref": "https://identity.foundation/dwn/json-schemas/general-jws.json" } }, "description": "`authorSignature` can exist by itself. But if `ownerSignature` is present, then `authorSignature` must also exist", "dependencies": { "ownerSignature": ["authorSignature"] } };
function validate14(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) {
    ;
    let vErrors = null;
    let errors = 0;
    if (errors === 0) {
        if (data && typeof data == "object" && !Array.isArray(data)) {
            const _errs1 = errors;
            for (const key0 in data) {
                if (!((key0 === "authorSignature") || (key0 === "ownerSignature"))) {
                    validate14.errors = [{ instancePath, schemaPath: "#/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties" }];
                    return false;
                    break;
                }
            }
            if (_errs1 === errors) {
                let missing0;
                if (data.ownerSignature !== undefined && ((data.authorSignature === undefined) && (missing0 = "authorSignature"))) {
                    validate14.errors = [{ instancePath, schemaPath: "#/dependencies", keyword: "dependencies", params: { property: "ownerSignature",
                                missingProperty: missing0,
                                depsCount: 1,
                                deps: "authorSignature" }, message: "must have property authorSignature when property ownerSignature is present" }];
                    return false;
                }
                else {
                    if (data.authorSignature !== undefined) {
                        const _errs2 = errors;
                        if (!(validate11(data.authorSignature, { instancePath: instancePath + "/authorSignature", parentData: data, parentDataProperty: "authorSignature", rootData }))) {
                            vErrors = vErrors === null ? validate11.errors : vErrors.concat(validate11.errors);
                            errors = vErrors.length;
                        }
                        var valid1 = _errs2 === errors;
                    }
                    else {
                        var valid1 = true;
                    }
                    if (valid1) {
                        if (data.ownerSignature !== undefined) {
                            const _errs3 = errors;
                            if (!(validate11(data.ownerSignature, { instancePath: instancePath + "/ownerSignature", parentData: data, parentDataProperty: "ownerSignature", rootData }))) {
                                vErrors = vErrors === null ? validate11.errors : vErrors.concat(validate11.errors);
                                errors = vErrors.length;
                            }
                            var valid1 = _errs3 === errors;
                        }
                        else {
                            var valid1 = true;
                        }
                    }
                }
            }
        }
        else {
            validate14.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
            return false;
        }
    }
    validate14.errors = vErrors;
    return errors === 0;
}
export const RecordsDelete = validate17;
const schema18 = { "$schema": "http://json-schema.org/draft-07/schema#", "$id": "https://identity.foundation/dwn/json-schemas/records-delete.json", "type": "object", "additionalProperties": false, "required": ["authorization", "descriptor"], "properties": { "authorization": { "$ref": "https://identity.foundation/dwn/json-schemas/authorization.json" }, "descriptor": { "type": "object", "additionalProperties": false, "required": ["interface", "method", "messageTimestamp", "recordId"], "properties": { "interface": { "enum": ["Records"], "type": "string" }, "method": { "enum": ["Delete"], "type": "string" }, "messageTimestamp": { "type": "string" }, "recordId": { "type": "string" } } } } };
function validate17(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) { /*# sourceURL="https://identity.foundation/dwn/json-schemas/records-delete.json" */ ; let vErrors = null; let errors = 0; if (errors === 0) {
    if (data && typeof data == "object" && !Array.isArray(data)) {
        let missing0;
        if (((data.authorization === undefined) && (missing0 = "authorization")) || ((data.descriptor === undefined) && (missing0 = "descriptor"))) {
            validate17.errors = [{ instancePath, schemaPath: "#/required", keyword: "required", params: { missingProperty: missing0 }, message: "must have required property '" + missing0 + "'" }];
            return false;
        }
        else {
            const _errs1 = errors;
            for (const key0 in data) {
                if (!((key0 === "authorization") || (key0 === "descriptor"))) {
                    validate17.errors = [{ instancePath, schemaPath: "#/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties" }];
                    return false;
                    break;
                }
            }
            if (_errs1 === errors) {
                if (data.authorization !== undefined) {
                    const _errs2 = errors;
                    if (!(validate10(data.authorization, { instancePath: instancePath + "/authorization", parentData: data, parentDataProperty: "authorization", rootData }))) {
                        vErrors = vErrors === null ? validate10.errors : vErrors.concat(validate10.errors);
                        errors = vErrors.length;
                    }
                    var valid0 = _errs2 === errors;
                }
                else {
                    var valid0 = true;
                }
                if (valid0) {
                    if (data.descriptor !== undefined) {
                        let data1 = data.descriptor;
                        const _errs3 = errors;
                        if (errors === _errs3) {
                            if (data1 && typeof data1 == "object" && !Array.isArray(data1)) {
                                let missing1;
                                if (((((data1.interface === undefined) && (missing1 = "interface")) || ((data1.method === undefined) && (missing1 = "method"))) || ((data1.messageTimestamp === undefined) && (missing1 = "messageTimestamp"))) || ((data1.recordId === undefined) && (missing1 = "recordId"))) {
                                    validate17.errors = [{ instancePath: instancePath + "/descriptor", schemaPath: "#/properties/descriptor/required", keyword: "required", params: { missingProperty: missing1 }, message: "must have required property '" + missing1 + "'" }];
                                    return false;
                                }
                                else {
                                    const _errs5 = errors;
                                    for (const key1 in data1) {
                                        if (!((((key1 === "interface") || (key1 === "method")) || (key1 === "messageTimestamp")) || (key1 === "recordId"))) {
                                            validate17.errors = [{ instancePath: instancePath + "/descriptor", schemaPath: "#/properties/descriptor/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key1 }, message: "must NOT have additional properties" }];
                                            return false;
                                            break;
                                        }
                                    }
                                    if (_errs5 === errors) {
                                        if (data1.interface !== undefined) {
                                            let data2 = data1.interface;
                                            const _errs6 = errors;
                                            if (typeof data2 !== "string") {
                                                validate17.errors = [{ instancePath: instancePath + "/descriptor/interface", schemaPath: "#/properties/descriptor/properties/interface/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                return false;
                                            }
                                            if (!(data2 === "Records")) {
                                                validate17.errors = [{ instancePath: instancePath + "/descriptor/interface", schemaPath: "#/properties/descriptor/properties/interface/enum", keyword: "enum", params: { allowedValues: schema18.properties.descriptor.properties.interface.enum }, message: "must be equal to one of the allowed values" }];
                                                return false;
                                            }
                                            var valid1 = _errs6 === errors;
                                        }
                                        else {
                                            var valid1 = true;
                                        }
                                        if (valid1) {
                                            if (data1.method !== undefined) {
                                                let data3 = data1.method;
                                                const _errs8 = errors;
                                                if (typeof data3 !== "string") {
                                                    validate17.errors = [{ instancePath: instancePath + "/descriptor/method", schemaPath: "#/properties/descriptor/properties/method/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                    return false;
                                                }
                                                if (!(data3 === "Delete")) {
                                                    validate17.errors = [{ instancePath: instancePath + "/descriptor/method", schemaPath: "#/properties/descriptor/properties/method/enum", keyword: "enum", params: { allowedValues: schema18.properties.descriptor.properties.method.enum }, message: "must be equal to one of the allowed values" }];
                                                    return false;
                                                }
                                                var valid1 = _errs8 === errors;
                                            }
                                            else {
                                                var valid1 = true;
                                            }
                                            if (valid1) {
                                                if (data1.messageTimestamp !== undefined) {
                                                    const _errs10 = errors;
                                                    if (typeof data1.messageTimestamp !== "string") {
                                                        validate17.errors = [{ instancePath: instancePath + "/descriptor/messageTimestamp", schemaPath: "#/properties/descriptor/properties/messageTimestamp/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                        return false;
                                                    }
                                                    var valid1 = _errs10 === errors;
                                                }
                                                else {
                                                    var valid1 = true;
                                                }
                                                if (valid1) {
                                                    if (data1.recordId !== undefined) {
                                                        const _errs12 = errors;
                                                        if (typeof data1.recordId !== "string") {
                                                            validate17.errors = [{ instancePath: instancePath + "/descriptor/recordId", schemaPath: "#/properties/descriptor/properties/recordId/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                            return false;
                                                        }
                                                        var valid1 = _errs12 === errors;
                                                    }
                                                    else {
                                                        var valid1 = true;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            else {
                                validate17.errors = [{ instancePath: instancePath + "/descriptor", schemaPath: "#/properties/descriptor/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
                                return false;
                            }
                        }
                        var valid0 = _errs3 === errors;
                    }
                    else {
                        var valid0 = true;
                    }
                }
            }
        }
    }
    else {
        validate17.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
        return false;
    }
} validate17.errors = vErrors; return errors === 0; }
export const RecordsQuery = validate19;
const schema19 = { "$schema": "http://json-schema.org/draft-07/schema#", "$id": "https://identity.foundation/dwn/json-schemas/records-query.json", "type": "object", "additionalProperties": false, "required": ["descriptor"], "properties": { "authorization": { "$ref": "https://identity.foundation/dwn/json-schemas/authorization.json" }, "descriptor": { "type": "object", "additionalProperties": false, "required": ["interface", "method", "messageTimestamp", "filter"], "properties": { "interface": { "enum": ["Records"], "type": "string" }, "method": { "enum": ["Query"], "type": "string" }, "messageTimestamp": { "$ref": "https://identity.foundation/dwn/json-schemas/defs.json#/definitions/date-time" }, "filter": { "$ref": "https://identity.foundation/dwn/json-schemas/records-filter.json" }, "pagination": { "type": "object", "additionalProperties": false, "properties": { "limit": { "type": "number", "minimum": 1 }, "messageCid": { "type": "string" } } }, "dateSort": { "enum": ["createdAscending", "createdDescending", "publishedAscending", "publishedDescending"], "type": "string" } } } } };
const schema20 = { "type": "string", "pattern": "^\\d{4}-[0-1]\\d-[0-3]\\dT(?:[0-2]\\d:[0-5]\\d:[0-5]\\d|23:59:60)\\.\\d{6}Z$" };
const schema21 = { "$schema": "http://json-schema.org/draft-07/schema#", "$id": "https://identity.foundation/dwn/json-schemas/records-filter.json", "type": "object", "minProperties": 1, "additionalProperties": false, "properties": { "protocol": { "type": "string" }, "protocolPath": { "type": "string" }, "attester": { "$ref": "https://identity.foundation/dwn/json-schemas/defs.json#/definitions/did" }, "recipient": { "$ref": "https://identity.foundation/dwn/json-schemas/defs.json#/definitions/did" }, "contextId": { "type": "string" }, "schema": { "type": "string" }, "recordId": { "type": "string" }, "parentId": { "type": "string" }, "dataFormat": { "type": "string" }, "dateCreated": { "type": "object", "minProperties": 1, "additionalProperties": false, "properties": { "from": { "$ref": "https://identity.foundation/dwn/json-schemas/defs.json#/definitions/date-time" }, "to": { "$ref": "https://identity.foundation/dwn/json-schemas/defs.json#/definitions/date-time" } } } } };
const schema22 = { "type": "string", "pattern": "^did:([a-z0-9]+):((?:(?:[a-zA-Z0-9._-]|(?:%[0-9a-fA-F]{2}))*:)*((?:[a-zA-Z0-9._-]|(?:%[0-9a-fA-F]{2}))+))((;[a-zA-Z0-9_.:%-]+=[a-zA-Z0-9_.:%-]*)*)(/[^#?]*)?([?][^#]*)?(#.*)?$" };
const func2 = Object.prototype.hasOwnProperty;
const pattern4 = new RegExp("^did:([a-z0-9]+):((?:(?:[a-zA-Z0-9._-]|(?:%[0-9a-fA-F]{2}))*:)*((?:[a-zA-Z0-9._-]|(?:%[0-9a-fA-F]{2}))+))((;[a-zA-Z0-9_.:%-]+=[a-zA-Z0-9_.:%-]*)*)(/[^#?]*)?([?][^#]*)?(#.*)?$", "u");
const pattern3 = new RegExp("^\\d{4}-[0-1]\\d-[0-3]\\dT(?:[0-2]\\d:[0-5]\\d:[0-5]\\d|23:59:60)\\.\\d{6}Z$", "u");
function validate21(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) { /*# sourceURL="https://identity.foundation/dwn/json-schemas/records-filter.json" */ ; let vErrors = null; let errors = 0; if (errors === 0) {
    if (data && typeof data == "object" && !Array.isArray(data)) {
        if (Object.keys(data).length < 1) {
            validate21.errors = [{ instancePath, schemaPath: "#/minProperties", keyword: "minProperties", params: { limit: 1 }, message: "must NOT have fewer than 1 properties" }];
            return false;
        }
        else {
            const _errs1 = errors;
            for (const key0 in data) {
                if (!(func2.call(schema21.properties, key0))) {
                    validate21.errors = [{ instancePath, schemaPath: "#/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties" }];
                    return false;
                    break;
                }
            }
            if (_errs1 === errors) {
                if (data.protocol !== undefined) {
                    const _errs2 = errors;
                    if (typeof data.protocol !== "string") {
                        validate21.errors = [{ instancePath: instancePath + "/protocol", schemaPath: "#/properties/protocol/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                        return false;
                    }
                    var valid0 = _errs2 === errors;
                }
                else {
                    var valid0 = true;
                }
                if (valid0) {
                    if (data.protocolPath !== undefined) {
                        const _errs4 = errors;
                        if (typeof data.protocolPath !== "string") {
                            validate21.errors = [{ instancePath: instancePath + "/protocolPath", schemaPath: "#/properties/protocolPath/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                            return false;
                        }
                        var valid0 = _errs4 === errors;
                    }
                    else {
                        var valid0 = true;
                    }
                    if (valid0) {
                        if (data.attester !== undefined) {
                            let data2 = data.attester;
                            const _errs6 = errors;
                            const _errs7 = errors;
                            if (errors === _errs7) {
                                if (typeof data2 === "string") {
                                    if (!pattern4.test(data2)) {
                                        validate21.errors = [{ instancePath: instancePath + "/attester", schemaPath: "https://identity.foundation/dwn/json-schemas/defs.json#/definitions/did/pattern", keyword: "pattern", params: { pattern: "^did:([a-z0-9]+):((?:(?:[a-zA-Z0-9._-]|(?:%[0-9a-fA-F]{2}))*:)*((?:[a-zA-Z0-9._-]|(?:%[0-9a-fA-F]{2}))+))((;[a-zA-Z0-9_.:%-]+=[a-zA-Z0-9_.:%-]*)*)(/[^#?]*)?([?][^#]*)?(#.*)?$" }, message: "must match pattern \"" + "^did:([a-z0-9]+):((?:(?:[a-zA-Z0-9._-]|(?:%[0-9a-fA-F]{2}))*:)*((?:[a-zA-Z0-9._-]|(?:%[0-9a-fA-F]{2}))+))((;[a-zA-Z0-9_.:%-]+=[a-zA-Z0-9_.:%-]*)*)(/[^#?]*)?([?][^#]*)?(#.*)?$" + "\"" }];
                                        return false;
                                    }
                                }
                                else {
                                    validate21.errors = [{ instancePath: instancePath + "/attester", schemaPath: "https://identity.foundation/dwn/json-schemas/defs.json#/definitions/did/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                    return false;
                                }
                            }
                            var valid0 = _errs6 === errors;
                        }
                        else {
                            var valid0 = true;
                        }
                        if (valid0) {
                            if (data.recipient !== undefined) {
                                let data3 = data.recipient;
                                const _errs9 = errors;
                                const _errs10 = errors;
                                if (errors === _errs10) {
                                    if (typeof data3 === "string") {
                                        if (!pattern4.test(data3)) {
                                            validate21.errors = [{ instancePath: instancePath + "/recipient", schemaPath: "https://identity.foundation/dwn/json-schemas/defs.json#/definitions/did/pattern", keyword: "pattern", params: { pattern: "^did:([a-z0-9]+):((?:(?:[a-zA-Z0-9._-]|(?:%[0-9a-fA-F]{2}))*:)*((?:[a-zA-Z0-9._-]|(?:%[0-9a-fA-F]{2}))+))((;[a-zA-Z0-9_.:%-]+=[a-zA-Z0-9_.:%-]*)*)(/[^#?]*)?([?][^#]*)?(#.*)?$" }, message: "must match pattern \"" + "^did:([a-z0-9]+):((?:(?:[a-zA-Z0-9._-]|(?:%[0-9a-fA-F]{2}))*:)*((?:[a-zA-Z0-9._-]|(?:%[0-9a-fA-F]{2}))+))((;[a-zA-Z0-9_.:%-]+=[a-zA-Z0-9_.:%-]*)*)(/[^#?]*)?([?][^#]*)?(#.*)?$" + "\"" }];
                                            return false;
                                        }
                                    }
                                    else {
                                        validate21.errors = [{ instancePath: instancePath + "/recipient", schemaPath: "https://identity.foundation/dwn/json-schemas/defs.json#/definitions/did/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                        return false;
                                    }
                                }
                                var valid0 = _errs9 === errors;
                            }
                            else {
                                var valid0 = true;
                            }
                            if (valid0) {
                                if (data.contextId !== undefined) {
                                    const _errs12 = errors;
                                    if (typeof data.contextId !== "string") {
                                        validate21.errors = [{ instancePath: instancePath + "/contextId", schemaPath: "#/properties/contextId/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                        return false;
                                    }
                                    var valid0 = _errs12 === errors;
                                }
                                else {
                                    var valid0 = true;
                                }
                                if (valid0) {
                                    if (data.schema !== undefined) {
                                        const _errs14 = errors;
                                        if (typeof data.schema !== "string") {
                                            validate21.errors = [{ instancePath: instancePath + "/schema", schemaPath: "#/properties/schema/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                            return false;
                                        }
                                        var valid0 = _errs14 === errors;
                                    }
                                    else {
                                        var valid0 = true;
                                    }
                                    if (valid0) {
                                        if (data.recordId !== undefined) {
                                            const _errs16 = errors;
                                            if (typeof data.recordId !== "string") {
                                                validate21.errors = [{ instancePath: instancePath + "/recordId", schemaPath: "#/properties/recordId/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                return false;
                                            }
                                            var valid0 = _errs16 === errors;
                                        }
                                        else {
                                            var valid0 = true;
                                        }
                                        if (valid0) {
                                            if (data.parentId !== undefined) {
                                                const _errs18 = errors;
                                                if (typeof data.parentId !== "string") {
                                                    validate21.errors = [{ instancePath: instancePath + "/parentId", schemaPath: "#/properties/parentId/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                    return false;
                                                }
                                                var valid0 = _errs18 === errors;
                                            }
                                            else {
                                                var valid0 = true;
                                            }
                                            if (valid0) {
                                                if (data.dataFormat !== undefined) {
                                                    const _errs20 = errors;
                                                    if (typeof data.dataFormat !== "string") {
                                                        validate21.errors = [{ instancePath: instancePath + "/dataFormat", schemaPath: "#/properties/dataFormat/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                        return false;
                                                    }
                                                    var valid0 = _errs20 === errors;
                                                }
                                                else {
                                                    var valid0 = true;
                                                }
                                                if (valid0) {
                                                    if (data.dateCreated !== undefined) {
                                                        let data9 = data.dateCreated;
                                                        const _errs22 = errors;
                                                        if (errors === _errs22) {
                                                            if (data9 && typeof data9 == "object" && !Array.isArray(data9)) {
                                                                if (Object.keys(data9).length < 1) {
                                                                    validate21.errors = [{ instancePath: instancePath + "/dateCreated", schemaPath: "#/properties/dateCreated/minProperties", keyword: "minProperties", params: { limit: 1 }, message: "must NOT have fewer than 1 properties" }];
                                                                    return false;
                                                                }
                                                                else {
                                                                    const _errs24 = errors;
                                                                    for (const key1 in data9) {
                                                                        if (!((key1 === "from") || (key1 === "to"))) {
                                                                            validate21.errors = [{ instancePath: instancePath + "/dateCreated", schemaPath: "#/properties/dateCreated/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key1 }, message: "must NOT have additional properties" }];
                                                                            return false;
                                                                            break;
                                                                        }
                                                                    }
                                                                    if (_errs24 === errors) {
                                                                        if (data9.from !== undefined) {
                                                                            let data10 = data9.from;
                                                                            const _errs25 = errors;
                                                                            const _errs26 = errors;
                                                                            if (errors === _errs26) {
                                                                                if (typeof data10 === "string") {
                                                                                    if (!pattern3.test(data10)) {
                                                                                        validate21.errors = [{ instancePath: instancePath + "/dateCreated/from", schemaPath: "https://identity.foundation/dwn/json-schemas/defs.json#/definitions/date-time/pattern", keyword: "pattern", params: { pattern: "^\\d{4}-[0-1]\\d-[0-3]\\dT(?:[0-2]\\d:[0-5]\\d:[0-5]\\d|23:59:60)\\.\\d{6}Z$" }, message: "must match pattern \"" + "^\\d{4}-[0-1]\\d-[0-3]\\dT(?:[0-2]\\d:[0-5]\\d:[0-5]\\d|23:59:60)\\.\\d{6}Z$" + "\"" }];
                                                                                        return false;
                                                                                    }
                                                                                }
                                                                                else {
                                                                                    validate21.errors = [{ instancePath: instancePath + "/dateCreated/from", schemaPath: "https://identity.foundation/dwn/json-schemas/defs.json#/definitions/date-time/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                                                    return false;
                                                                                }
                                                                            }
                                                                            var valid3 = _errs25 === errors;
                                                                        }
                                                                        else {
                                                                            var valid3 = true;
                                                                        }
                                                                        if (valid3) {
                                                                            if (data9.to !== undefined) {
                                                                                let data11 = data9.to;
                                                                                const _errs28 = errors;
                                                                                const _errs29 = errors;
                                                                                if (errors === _errs29) {
                                                                                    if (typeof data11 === "string") {
                                                                                        if (!pattern3.test(data11)) {
                                                                                            validate21.errors = [{ instancePath: instancePath + "/dateCreated/to", schemaPath: "https://identity.foundation/dwn/json-schemas/defs.json#/definitions/date-time/pattern", keyword: "pattern", params: { pattern: "^\\d{4}-[0-1]\\d-[0-3]\\dT(?:[0-2]\\d:[0-5]\\d:[0-5]\\d|23:59:60)\\.\\d{6}Z$" }, message: "must match pattern \"" + "^\\d{4}-[0-1]\\d-[0-3]\\dT(?:[0-2]\\d:[0-5]\\d:[0-5]\\d|23:59:60)\\.\\d{6}Z$" + "\"" }];
                                                                                            return false;
                                                                                        }
                                                                                    }
                                                                                    else {
                                                                                        validate21.errors = [{ instancePath: instancePath + "/dateCreated/to", schemaPath: "https://identity.foundation/dwn/json-schemas/defs.json#/definitions/date-time/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                                                        return false;
                                                                                    }
                                                                                }
                                                                                var valid3 = _errs28 === errors;
                                                                            }
                                                                            else {
                                                                                var valid3 = true;
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            else {
                                                                validate21.errors = [{ instancePath: instancePath + "/dateCreated", schemaPath: "#/properties/dateCreated/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
                                                                return false;
                                                            }
                                                        }
                                                        var valid0 = _errs22 === errors;
                                                    }
                                                    else {
                                                        var valid0 = true;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    else {
        validate21.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
        return false;
    }
} validate21.errors = vErrors; return errors === 0; }
function validate19(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) { /*# sourceURL="https://identity.foundation/dwn/json-schemas/records-query.json" */ ; let vErrors = null; let errors = 0; if (errors === 0) {
    if (data && typeof data == "object" && !Array.isArray(data)) {
        let missing0;
        if ((data.descriptor === undefined) && (missing0 = "descriptor")) {
            validate19.errors = [{ instancePath, schemaPath: "#/required", keyword: "required", params: { missingProperty: missing0 }, message: "must have required property '" + missing0 + "'" }];
            return false;
        }
        else {
            const _errs1 = errors;
            for (const key0 in data) {
                if (!((key0 === "authorization") || (key0 === "descriptor"))) {
                    validate19.errors = [{ instancePath, schemaPath: "#/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties" }];
                    return false;
                    break;
                }
            }
            if (_errs1 === errors) {
                if (data.authorization !== undefined) {
                    const _errs2 = errors;
                    if (!(validate10(data.authorization, { instancePath: instancePath + "/authorization", parentData: data, parentDataProperty: "authorization", rootData }))) {
                        vErrors = vErrors === null ? validate10.errors : vErrors.concat(validate10.errors);
                        errors = vErrors.length;
                    }
                    var valid0 = _errs2 === errors;
                }
                else {
                    var valid0 = true;
                }
                if (valid0) {
                    if (data.descriptor !== undefined) {
                        let data1 = data.descriptor;
                        const _errs3 = errors;
                        if (errors === _errs3) {
                            if (data1 && typeof data1 == "object" && !Array.isArray(data1)) {
                                let missing1;
                                if (((((data1.interface === undefined) && (missing1 = "interface")) || ((data1.method === undefined) && (missing1 = "method"))) || ((data1.messageTimestamp === undefined) && (missing1 = "messageTimestamp"))) || ((data1.filter === undefined) && (missing1 = "filter"))) {
                                    validate19.errors = [{ instancePath: instancePath + "/descriptor", schemaPath: "#/properties/descriptor/required", keyword: "required", params: { missingProperty: missing1 }, message: "must have required property '" + missing1 + "'" }];
                                    return false;
                                }
                                else {
                                    const _errs5 = errors;
                                    for (const key1 in data1) {
                                        if (!((((((key1 === "interface") || (key1 === "method")) || (key1 === "messageTimestamp")) || (key1 === "filter")) || (key1 === "pagination")) || (key1 === "dateSort"))) {
                                            validate19.errors = [{ instancePath: instancePath + "/descriptor", schemaPath: "#/properties/descriptor/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key1 }, message: "must NOT have additional properties" }];
                                            return false;
                                            break;
                                        }
                                    }
                                    if (_errs5 === errors) {
                                        if (data1.interface !== undefined) {
                                            let data2 = data1.interface;
                                            const _errs6 = errors;
                                            if (typeof data2 !== "string") {
                                                validate19.errors = [{ instancePath: instancePath + "/descriptor/interface", schemaPath: "#/properties/descriptor/properties/interface/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                return false;
                                            }
                                            if (!(data2 === "Records")) {
                                                validate19.errors = [{ instancePath: instancePath + "/descriptor/interface", schemaPath: "#/properties/descriptor/properties/interface/enum", keyword: "enum", params: { allowedValues: schema19.properties.descriptor.properties.interface.enum }, message: "must be equal to one of the allowed values" }];
                                                return false;
                                            }
                                            var valid1 = _errs6 === errors;
                                        }
                                        else {
                                            var valid1 = true;
                                        }
                                        if (valid1) {
                                            if (data1.method !== undefined) {
                                                let data3 = data1.method;
                                                const _errs8 = errors;
                                                if (typeof data3 !== "string") {
                                                    validate19.errors = [{ instancePath: instancePath + "/descriptor/method", schemaPath: "#/properties/descriptor/properties/method/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                    return false;
                                                }
                                                if (!(data3 === "Query")) {
                                                    validate19.errors = [{ instancePath: instancePath + "/descriptor/method", schemaPath: "#/properties/descriptor/properties/method/enum", keyword: "enum", params: { allowedValues: schema19.properties.descriptor.properties.method.enum }, message: "must be equal to one of the allowed values" }];
                                                    return false;
                                                }
                                                var valid1 = _errs8 === errors;
                                            }
                                            else {
                                                var valid1 = true;
                                            }
                                            if (valid1) {
                                                if (data1.messageTimestamp !== undefined) {
                                                    let data4 = data1.messageTimestamp;
                                                    const _errs10 = errors;
                                                    const _errs11 = errors;
                                                    if (errors === _errs11) {
                                                        if (typeof data4 === "string") {
                                                            if (!pattern3.test(data4)) {
                                                                validate19.errors = [{ instancePath: instancePath + "/descriptor/messageTimestamp", schemaPath: "https://identity.foundation/dwn/json-schemas/defs.json#/definitions/date-time/pattern", keyword: "pattern", params: { pattern: "^\\d{4}-[0-1]\\d-[0-3]\\dT(?:[0-2]\\d:[0-5]\\d:[0-5]\\d|23:59:60)\\.\\d{6}Z$" }, message: "must match pattern \"" + "^\\d{4}-[0-1]\\d-[0-3]\\dT(?:[0-2]\\d:[0-5]\\d:[0-5]\\d|23:59:60)\\.\\d{6}Z$" + "\"" }];
                                                                return false;
                                                            }
                                                        }
                                                        else {
                                                            validate19.errors = [{ instancePath: instancePath + "/descriptor/messageTimestamp", schemaPath: "https://identity.foundation/dwn/json-schemas/defs.json#/definitions/date-time/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                            return false;
                                                        }
                                                    }
                                                    var valid1 = _errs10 === errors;
                                                }
                                                else {
                                                    var valid1 = true;
                                                }
                                                if (valid1) {
                                                    if (data1.filter !== undefined) {
                                                        const _errs13 = errors;
                                                        if (!(validate21(data1.filter, { instancePath: instancePath + "/descriptor/filter", parentData: data1, parentDataProperty: "filter", rootData }))) {
                                                            vErrors = vErrors === null ? validate21.errors : vErrors.concat(validate21.errors);
                                                            errors = vErrors.length;
                                                        }
                                                        var valid1 = _errs13 === errors;
                                                    }
                                                    else {
                                                        var valid1 = true;
                                                    }
                                                    if (valid1) {
                                                        if (data1.pagination !== undefined) {
                                                            let data6 = data1.pagination;
                                                            const _errs14 = errors;
                                                            if (errors === _errs14) {
                                                                if (data6 && typeof data6 == "object" && !Array.isArray(data6)) {
                                                                    const _errs16 = errors;
                                                                    for (const key2 in data6) {
                                                                        if (!((key2 === "limit") || (key2 === "messageCid"))) {
                                                                            validate19.errors = [{ instancePath: instancePath + "/descriptor/pagination", schemaPath: "#/properties/descriptor/properties/pagination/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key2 }, message: "must NOT have additional properties" }];
                                                                            return false;
                                                                            break;
                                                                        }
                                                                    }
                                                                    if (_errs16 === errors) {
                                                                        if (data6.limit !== undefined) {
                                                                            let data7 = data6.limit;
                                                                            const _errs17 = errors;
                                                                            if (errors === _errs17) {
                                                                                if ((typeof data7 == "number") && (isFinite(data7))) {
                                                                                    if (data7 < 1 || isNaN(data7)) {
                                                                                        validate19.errors = [{ instancePath: instancePath + "/descriptor/pagination/limit", schemaPath: "#/properties/descriptor/properties/pagination/properties/limit/minimum", keyword: "minimum", params: { comparison: ">=", limit: 1 }, message: "must be >= 1" }];
                                                                                        return false;
                                                                                    }
                                                                                }
                                                                                else {
                                                                                    validate19.errors = [{ instancePath: instancePath + "/descriptor/pagination/limit", schemaPath: "#/properties/descriptor/properties/pagination/properties/limit/type", keyword: "type", params: { type: "number" }, message: "must be number" }];
                                                                                    return false;
                                                                                }
                                                                            }
                                                                            var valid3 = _errs17 === errors;
                                                                        }
                                                                        else {
                                                                            var valid3 = true;
                                                                        }
                                                                        if (valid3) {
                                                                            if (data6.messageCid !== undefined) {
                                                                                const _errs19 = errors;
                                                                                if (typeof data6.messageCid !== "string") {
                                                                                    validate19.errors = [{ instancePath: instancePath + "/descriptor/pagination/messageCid", schemaPath: "#/properties/descriptor/properties/pagination/properties/messageCid/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                                                    return false;
                                                                                }
                                                                                var valid3 = _errs19 === errors;
                                                                            }
                                                                            else {
                                                                                var valid3 = true;
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                                else {
                                                                    validate19.errors = [{ instancePath: instancePath + "/descriptor/pagination", schemaPath: "#/properties/descriptor/properties/pagination/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
                                                                    return false;
                                                                }
                                                            }
                                                            var valid1 = _errs14 === errors;
                                                        }
                                                        else {
                                                            var valid1 = true;
                                                        }
                                                        if (valid1) {
                                                            if (data1.dateSort !== undefined) {
                                                                let data9 = data1.dateSort;
                                                                const _errs21 = errors;
                                                                if (typeof data9 !== "string") {
                                                                    validate19.errors = [{ instancePath: instancePath + "/descriptor/dateSort", schemaPath: "#/properties/descriptor/properties/dateSort/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                                    return false;
                                                                }
                                                                if (!((((data9 === "createdAscending") || (data9 === "createdDescending")) || (data9 === "publishedAscending")) || (data9 === "publishedDescending"))) {
                                                                    validate19.errors = [{ instancePath: instancePath + "/descriptor/dateSort", schemaPath: "#/properties/descriptor/properties/dateSort/enum", keyword: "enum", params: { allowedValues: schema19.properties.descriptor.properties.dateSort.enum }, message: "must be equal to one of the allowed values" }];
                                                                    return false;
                                                                }
                                                                var valid1 = _errs21 === errors;
                                                            }
                                                            else {
                                                                var valid1 = true;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            else {
                                validate19.errors = [{ instancePath: instancePath + "/descriptor", schemaPath: "#/properties/descriptor/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
                                return false;
                            }
                        }
                        var valid0 = _errs3 === errors;
                    }
                    else {
                        var valid0 = true;
                    }
                }
            }
        }
    }
    else {
        validate19.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
        return false;
    }
} validate19.errors = vErrors; return errors === 0; }
export const RecordsWrite = validate23;
const schema26 = { "$ref": "https://identity.foundation/dwn/json-schemas/records-write-unidentified.json", "allOf": [{ "type": "object", "required": ["recordId", "authorization"] }] };
const schema27 = { "$schema": "http://json-schema.org/draft-07/schema#", "$id": "https://identity.foundation/dwn/json-schemas/records-write-unidentified.json", "type": "object", "additionalProperties": false, "required": ["descriptor"], "properties": { "recordId": { "type": "string" }, "contextId": { "type": "string" }, "attestation": { "$ref": "https://identity.foundation/dwn/json-schemas/general-jws.json" }, "authorization": { "$ref": "https://identity.foundation/dwn/json-schemas/authorization-owner.json" }, "encryption": { "type": "object", "properties": { "algorithm": { "type": "string", "enum": ["A256CTR"] }, "initializationVector": { "$ref": "https://identity.foundation/dwn/json-schemas/defs.json#/definitions/base64url" }, "keyEncryption": { "type": "array", "minItems": 1, "items": { "type": "object", "properties": { "rootKeyId": { "type": "string" }, "derivationScheme": { "type": "string", "enum": ["dataFormats", "protocolContext", "protocolPath", "schemas"] }, "derivedPublicKey": { "$ref": "https://identity.foundation/dwn/json-schemas/public-jwk.json" }, "algorithm": { "type": "string", "enum": ["ECIES-ES256K"] }, "encryptedKey": { "$ref": "https://identity.foundation/dwn/json-schemas/defs.json#/definitions/base64url" }, "initializationVector": { "$ref": "https://identity.foundation/dwn/json-schemas/defs.json#/definitions/base64url" }, "ephemeralPublicKey": { "$ref": "https://identity.foundation/dwn/json-schemas/public-jwk.json" }, "messageAuthenticationCode": { "$ref": "https://identity.foundation/dwn/json-schemas/defs.json#/definitions/base64url" } }, "additionalProperties": false, "required": ["rootKeyId", "derivationScheme", "algorithm", "encryptedKey", "initializationVector", "ephemeralPublicKey", "messageAuthenticationCode"] } } }, "additionalProperties": false, "required": ["algorithm", "initializationVector", "keyEncryption"] }, "descriptor": { "type": "object", "properties": { "interface": { "enum": ["Records"], "type": "string" }, "method": { "enum": ["Write"], "type": "string" }, "recipient": { "$ref": "https://identity.foundation/dwn/json-schemas/defs.json#/definitions/did" }, "protocol": { "type": "string" }, "protocolPath": { "type": "string", "pattern": "^[a-zA-Z]+(/[a-zA-Z]+)*$" }, "schema": { "type": "string" }, "parentId": { "type": "string" }, "dataCid": { "type": "string" }, "dataSize": { "type": "number" }, "dateCreated": { "$ref": "https://identity.foundation/dwn/json-schemas/defs.json#/definitions/date-time" }, "messageTimestamp": { "$ref": "https://identity.foundation/dwn/json-schemas/defs.json#/definitions/date-time" }, "published": { "type": "boolean" }, "datePublished": { "$ref": "https://identity.foundation/dwn/json-schemas/defs.json#/definitions/date-time" }, "dataFormat": { "type": "string" } }, "additionalProperties": false, "required": ["interface", "method", "dataCid", "dataSize", "dateCreated", "messageTimestamp", "dataFormat"], "dependencies": { "parentId": ["protocol"] }, "allOf": [{ "$comment": "rule defining `published` and `datePublished` relationship", "anyOf": [{ "properties": { "published": { "type": "boolean", "enum": [true] } }, "required": ["published", "datePublished"] }, { "properties": { "published": { "type": "boolean", "enum": [false] } }, "not": { "required": ["datePublished"] } }, { "allOf": [{ "not": { "required": ["published"] } }, { "not": { "required": ["datePublished"] } }] }] }] } }, "$comment": "rule defining `protocol` and `contextId` relationship", "anyOf": [{ "properties": { "descriptor": { "type": "object", "required": ["protocol", "protocolPath", "schema"] } }, "required": ["contextId"] }, { "allOf": [{ "not": { "required": ["contextId"] } }, { "properties": { "descriptor": { "type": "object", "not": { "required": ["protocol"] } } } }, { "properties": { "descriptor": { "type": "object", "not": { "required": ["protocolPath"] } } } }] }] };
const schema29 = { "$id": "https://identity.foundation/dwn/json-schemas/public-jwk.json", "$schema": "http://json-schema.org/draft-07/schema#", "$ref": "https://identity.foundation/dwn/json-schemas/general-jwk.json", "not": { "anyOf": [{ "type": "object", "properties": { "kty": { "const": "EC" } }, "anyOf": [{ "required": ["d"] }] }, { "type": "object", "properties": { "kty": { "const": "OKP" } }, "anyOf": [{ "required": ["d"] }] }, { "type": "object", "properties": { "kty": { "const": "RSA" }, "d": {}, "p": {}, "q": {}, "dp": {}, "dq": {}, "qi": {}, "oth": { "type": "object" } }, "anyOf": [{ "required": ["d"] }, { "required": ["p"] }, { "required": ["q"] }, { "required": ["dp"] }, { "required": ["dq"] }, { "required": ["qi"] }, { "required": ["oth"] }] }] } };
const schema30 = { "$id": "https://identity.foundation/dwn/json-schemas/general-jwk.json", "$schema": "http://json-schema.org/draft-07/schema#", "type": "object", "required": ["kty"], "properties": { "alg": { "type": "string" }, "kid": { "type": "string" }, "kty": { "enum": ["EC", "RSA", "oct", "OKP"] }, "crv": { "type": "string" }, "use": { "type": "string" }, "key_ops": { "type": "string" }, "x5u": { "type": "string" }, "x5c": { "type": "string" }, "x5t": { "type": "string" }, "x5t#S256": { "type": "string" } }, "oneOf": [{ "properties": { "kty": { "const": "EC" }, "crv": { "type": "string" }, "x": { "type": "string" }, "y": { "type": "string" }, "d": { "type": "string" } }, "required": ["crv", "x"] }, { "properties": { "kty": { "const": "OKP" }, "crv": { "type": "string" }, "x": { "type": "string" }, "d": { "type": "string" } }, "required": ["crv", "x"] }, { "properties": { "kty": { "const": "RSA" }, "n": { "type": "string" }, "e": { "type": "string" }, "d": { "type": "string" }, "p": { "type": "string" }, "q": { "type": "string" }, "dp": { "type": "string" }, "dq": { "type": "string" }, "qi": { "type": "string" }, "oth": { "type": "object" } }, "required": ["n", "e"] }, { "properties": { "kty": { "const": "oct" }, "k": { "type": "string" } }, "required": ["k"] }] };
function validate27(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) { /*# sourceURL="https://identity.foundation/dwn/json-schemas/public-jwk.json" */ ; let vErrors = null; let errors = 0; const _errs0 = errors; const _errs2 = errors; let valid1 = false; let passing0 = null; const _errs3 = errors; if (data && typeof data == "object" && !Array.isArray(data)) {
    let missing0;
    if (((data.crv === undefined) && (missing0 = "crv")) || ((data.x === undefined) && (missing0 = "x"))) {
        const err0 = { instancePath, schemaPath: "https://identity.foundation/dwn/json-schemas/general-jwk.json/oneOf/0/required", keyword: "required", params: { missingProperty: missing0 }, message: "must have required property '" + missing0 + "'" };
        if (vErrors === null) {
            vErrors = [err0];
        }
        else {
            vErrors.push(err0);
        }
        errors++;
    }
    else {
        if (data.kty !== undefined) {
            const _errs4 = errors;
            if ("EC" !== data.kty) {
                const err1 = { instancePath: instancePath + "/kty", schemaPath: "https://identity.foundation/dwn/json-schemas/general-jwk.json/oneOf/0/properties/kty/const", keyword: "const", params: { allowedValue: "EC" }, message: "must be equal to constant" };
                if (vErrors === null) {
                    vErrors = [err1];
                }
                else {
                    vErrors.push(err1);
                }
                errors++;
            }
            var valid2 = _errs4 === errors;
        }
        else {
            var valid2 = true;
        }
        if (valid2) {
            if (data.crv !== undefined) {
                const _errs5 = errors;
                if (typeof data.crv !== "string") {
                    const err2 = { instancePath: instancePath + "/crv", schemaPath: "https://identity.foundation/dwn/json-schemas/general-jwk.json/oneOf/0/properties/crv/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                    if (vErrors === null) {
                        vErrors = [err2];
                    }
                    else {
                        vErrors.push(err2);
                    }
                    errors++;
                }
                var valid2 = _errs5 === errors;
            }
            else {
                var valid2 = true;
            }
            if (valid2) {
                if (data.x !== undefined) {
                    const _errs7 = errors;
                    if (typeof data.x !== "string") {
                        const err3 = { instancePath: instancePath + "/x", schemaPath: "https://identity.foundation/dwn/json-schemas/general-jwk.json/oneOf/0/properties/x/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                        if (vErrors === null) {
                            vErrors = [err3];
                        }
                        else {
                            vErrors.push(err3);
                        }
                        errors++;
                    }
                    var valid2 = _errs7 === errors;
                }
                else {
                    var valid2 = true;
                }
                if (valid2) {
                    if (data.y !== undefined) {
                        const _errs9 = errors;
                        if (typeof data.y !== "string") {
                            const err4 = { instancePath: instancePath + "/y", schemaPath: "https://identity.foundation/dwn/json-schemas/general-jwk.json/oneOf/0/properties/y/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                            if (vErrors === null) {
                                vErrors = [err4];
                            }
                            else {
                                vErrors.push(err4);
                            }
                            errors++;
                        }
                        var valid2 = _errs9 === errors;
                    }
                    else {
                        var valid2 = true;
                    }
                    if (valid2) {
                        if (data.d !== undefined) {
                            const _errs11 = errors;
                            if (typeof data.d !== "string") {
                                const err5 = { instancePath: instancePath + "/d", schemaPath: "https://identity.foundation/dwn/json-schemas/general-jwk.json/oneOf/0/properties/d/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                                if (vErrors === null) {
                                    vErrors = [err5];
                                }
                                else {
                                    vErrors.push(err5);
                                }
                                errors++;
                            }
                            var valid2 = _errs11 === errors;
                        }
                        else {
                            var valid2 = true;
                        }
                    }
                }
            }
        }
    }
} var _valid0 = _errs3 === errors; if (_valid0) {
    valid1 = true;
    passing0 = 0;
} const _errs13 = errors; if (data && typeof data == "object" && !Array.isArray(data)) {
    let missing1;
    if (((data.crv === undefined) && (missing1 = "crv")) || ((data.x === undefined) && (missing1 = "x"))) {
        const err6 = { instancePath, schemaPath: "https://identity.foundation/dwn/json-schemas/general-jwk.json/oneOf/1/required", keyword: "required", params: { missingProperty: missing1 }, message: "must have required property '" + missing1 + "'" };
        if (vErrors === null) {
            vErrors = [err6];
        }
        else {
            vErrors.push(err6);
        }
        errors++;
    }
    else {
        if (data.kty !== undefined) {
            const _errs14 = errors;
            if ("OKP" !== data.kty) {
                const err7 = { instancePath: instancePath + "/kty", schemaPath: "https://identity.foundation/dwn/json-schemas/general-jwk.json/oneOf/1/properties/kty/const", keyword: "const", params: { allowedValue: "OKP" }, message: "must be equal to constant" };
                if (vErrors === null) {
                    vErrors = [err7];
                }
                else {
                    vErrors.push(err7);
                }
                errors++;
            }
            var valid3 = _errs14 === errors;
        }
        else {
            var valid3 = true;
        }
        if (valid3) {
            if (data.crv !== undefined) {
                const _errs15 = errors;
                if (typeof data.crv !== "string") {
                    const err8 = { instancePath: instancePath + "/crv", schemaPath: "https://identity.foundation/dwn/json-schemas/general-jwk.json/oneOf/1/properties/crv/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                    if (vErrors === null) {
                        vErrors = [err8];
                    }
                    else {
                        vErrors.push(err8);
                    }
                    errors++;
                }
                var valid3 = _errs15 === errors;
            }
            else {
                var valid3 = true;
            }
            if (valid3) {
                if (data.x !== undefined) {
                    const _errs17 = errors;
                    if (typeof data.x !== "string") {
                        const err9 = { instancePath: instancePath + "/x", schemaPath: "https://identity.foundation/dwn/json-schemas/general-jwk.json/oneOf/1/properties/x/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                        if (vErrors === null) {
                            vErrors = [err9];
                        }
                        else {
                            vErrors.push(err9);
                        }
                        errors++;
                    }
                    var valid3 = _errs17 === errors;
                }
                else {
                    var valid3 = true;
                }
                if (valid3) {
                    if (data.d !== undefined) {
                        const _errs19 = errors;
                        if (typeof data.d !== "string") {
                            const err10 = { instancePath: instancePath + "/d", schemaPath: "https://identity.foundation/dwn/json-schemas/general-jwk.json/oneOf/1/properties/d/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                            if (vErrors === null) {
                                vErrors = [err10];
                            }
                            else {
                                vErrors.push(err10);
                            }
                            errors++;
                        }
                        var valid3 = _errs19 === errors;
                    }
                    else {
                        var valid3 = true;
                    }
                }
            }
        }
    }
} var _valid0 = _errs13 === errors; if (_valid0 && valid1) {
    valid1 = false;
    passing0 = [passing0, 1];
}
else {
    if (_valid0) {
        valid1 = true;
        passing0 = 1;
    }
    const _errs21 = errors;
    if (data && typeof data == "object" && !Array.isArray(data)) {
        let missing2;
        if (((data.n === undefined) && (missing2 = "n")) || ((data.e === undefined) && (missing2 = "e"))) {
            const err11 = { instancePath, schemaPath: "https://identity.foundation/dwn/json-schemas/general-jwk.json/oneOf/2/required", keyword: "required", params: { missingProperty: missing2 }, message: "must have required property '" + missing2 + "'" };
            if (vErrors === null) {
                vErrors = [err11];
            }
            else {
                vErrors.push(err11);
            }
            errors++;
        }
        else {
            if (data.kty !== undefined) {
                const _errs22 = errors;
                if ("RSA" !== data.kty) {
                    const err12 = { instancePath: instancePath + "/kty", schemaPath: "https://identity.foundation/dwn/json-schemas/general-jwk.json/oneOf/2/properties/kty/const", keyword: "const", params: { allowedValue: "RSA" }, message: "must be equal to constant" };
                    if (vErrors === null) {
                        vErrors = [err12];
                    }
                    else {
                        vErrors.push(err12);
                    }
                    errors++;
                }
                var valid4 = _errs22 === errors;
            }
            else {
                var valid4 = true;
            }
            if (valid4) {
                if (data.n !== undefined) {
                    const _errs23 = errors;
                    if (typeof data.n !== "string") {
                        const err13 = { instancePath: instancePath + "/n", schemaPath: "https://identity.foundation/dwn/json-schemas/general-jwk.json/oneOf/2/properties/n/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                        if (vErrors === null) {
                            vErrors = [err13];
                        }
                        else {
                            vErrors.push(err13);
                        }
                        errors++;
                    }
                    var valid4 = _errs23 === errors;
                }
                else {
                    var valid4 = true;
                }
                if (valid4) {
                    if (data.e !== undefined) {
                        const _errs25 = errors;
                        if (typeof data.e !== "string") {
                            const err14 = { instancePath: instancePath + "/e", schemaPath: "https://identity.foundation/dwn/json-schemas/general-jwk.json/oneOf/2/properties/e/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                            if (vErrors === null) {
                                vErrors = [err14];
                            }
                            else {
                                vErrors.push(err14);
                            }
                            errors++;
                        }
                        var valid4 = _errs25 === errors;
                    }
                    else {
                        var valid4 = true;
                    }
                    if (valid4) {
                        if (data.d !== undefined) {
                            const _errs27 = errors;
                            if (typeof data.d !== "string") {
                                const err15 = { instancePath: instancePath + "/d", schemaPath: "https://identity.foundation/dwn/json-schemas/general-jwk.json/oneOf/2/properties/d/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                                if (vErrors === null) {
                                    vErrors = [err15];
                                }
                                else {
                                    vErrors.push(err15);
                                }
                                errors++;
                            }
                            var valid4 = _errs27 === errors;
                        }
                        else {
                            var valid4 = true;
                        }
                        if (valid4) {
                            if (data.p !== undefined) {
                                const _errs29 = errors;
                                if (typeof data.p !== "string") {
                                    const err16 = { instancePath: instancePath + "/p", schemaPath: "https://identity.foundation/dwn/json-schemas/general-jwk.json/oneOf/2/properties/p/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                                    if (vErrors === null) {
                                        vErrors = [err16];
                                    }
                                    else {
                                        vErrors.push(err16);
                                    }
                                    errors++;
                                }
                                var valid4 = _errs29 === errors;
                            }
                            else {
                                var valid4 = true;
                            }
                            if (valid4) {
                                if (data.q !== undefined) {
                                    const _errs31 = errors;
                                    if (typeof data.q !== "string") {
                                        const err17 = { instancePath: instancePath + "/q", schemaPath: "https://identity.foundation/dwn/json-schemas/general-jwk.json/oneOf/2/properties/q/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                                        if (vErrors === null) {
                                            vErrors = [err17];
                                        }
                                        else {
                                            vErrors.push(err17);
                                        }
                                        errors++;
                                    }
                                    var valid4 = _errs31 === errors;
                                }
                                else {
                                    var valid4 = true;
                                }
                                if (valid4) {
                                    if (data.dp !== undefined) {
                                        const _errs33 = errors;
                                        if (typeof data.dp !== "string") {
                                            const err18 = { instancePath: instancePath + "/dp", schemaPath: "https://identity.foundation/dwn/json-schemas/general-jwk.json/oneOf/2/properties/dp/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                                            if (vErrors === null) {
                                                vErrors = [err18];
                                            }
                                            else {
                                                vErrors.push(err18);
                                            }
                                            errors++;
                                        }
                                        var valid4 = _errs33 === errors;
                                    }
                                    else {
                                        var valid4 = true;
                                    }
                                    if (valid4) {
                                        if (data.dq !== undefined) {
                                            const _errs35 = errors;
                                            if (typeof data.dq !== "string") {
                                                const err19 = { instancePath: instancePath + "/dq", schemaPath: "https://identity.foundation/dwn/json-schemas/general-jwk.json/oneOf/2/properties/dq/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                                                if (vErrors === null) {
                                                    vErrors = [err19];
                                                }
                                                else {
                                                    vErrors.push(err19);
                                                }
                                                errors++;
                                            }
                                            var valid4 = _errs35 === errors;
                                        }
                                        else {
                                            var valid4 = true;
                                        }
                                        if (valid4) {
                                            if (data.qi !== undefined) {
                                                const _errs37 = errors;
                                                if (typeof data.qi !== "string") {
                                                    const err20 = { instancePath: instancePath + "/qi", schemaPath: "https://identity.foundation/dwn/json-schemas/general-jwk.json/oneOf/2/properties/qi/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                                                    if (vErrors === null) {
                                                        vErrors = [err20];
                                                    }
                                                    else {
                                                        vErrors.push(err20);
                                                    }
                                                    errors++;
                                                }
                                                var valid4 = _errs37 === errors;
                                            }
                                            else {
                                                var valid4 = true;
                                            }
                                            if (valid4) {
                                                if (data.oth !== undefined) {
                                                    let data18 = data.oth;
                                                    const _errs39 = errors;
                                                    if (!(data18 && typeof data18 == "object" && !Array.isArray(data18))) {
                                                        const err21 = { instancePath: instancePath + "/oth", schemaPath: "https://identity.foundation/dwn/json-schemas/general-jwk.json/oneOf/2/properties/oth/type", keyword: "type", params: { type: "object" }, message: "must be object" };
                                                        if (vErrors === null) {
                                                            vErrors = [err21];
                                                        }
                                                        else {
                                                            vErrors.push(err21);
                                                        }
                                                        errors++;
                                                    }
                                                    var valid4 = _errs39 === errors;
                                                }
                                                else {
                                                    var valid4 = true;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    var _valid0 = _errs21 === errors;
    if (_valid0 && valid1) {
        valid1 = false;
        passing0 = [passing0, 2];
    }
    else {
        if (_valid0) {
            valid1 = true;
            passing0 = 2;
        }
        const _errs41 = errors;
        if (data && typeof data == "object" && !Array.isArray(data)) {
            let missing3;
            if ((data.k === undefined) && (missing3 = "k")) {
                const err22 = { instancePath, schemaPath: "https://identity.foundation/dwn/json-schemas/general-jwk.json/oneOf/3/required", keyword: "required", params: { missingProperty: missing3 }, message: "must have required property '" + missing3 + "'" };
                if (vErrors === null) {
                    vErrors = [err22];
                }
                else {
                    vErrors.push(err22);
                }
                errors++;
            }
            else {
                if (data.kty !== undefined) {
                    const _errs42 = errors;
                    if ("oct" !== data.kty) {
                        const err23 = { instancePath: instancePath + "/kty", schemaPath: "https://identity.foundation/dwn/json-schemas/general-jwk.json/oneOf/3/properties/kty/const", keyword: "const", params: { allowedValue: "oct" }, message: "must be equal to constant" };
                        if (vErrors === null) {
                            vErrors = [err23];
                        }
                        else {
                            vErrors.push(err23);
                        }
                        errors++;
                    }
                    var valid5 = _errs42 === errors;
                }
                else {
                    var valid5 = true;
                }
                if (valid5) {
                    if (data.k !== undefined) {
                        const _errs43 = errors;
                        if (typeof data.k !== "string") {
                            const err24 = { instancePath: instancePath + "/k", schemaPath: "https://identity.foundation/dwn/json-schemas/general-jwk.json/oneOf/3/properties/k/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                            if (vErrors === null) {
                                vErrors = [err24];
                            }
                            else {
                                vErrors.push(err24);
                            }
                            errors++;
                        }
                        var valid5 = _errs43 === errors;
                    }
                    else {
                        var valid5 = true;
                    }
                }
            }
        }
        var _valid0 = _errs41 === errors;
        if (_valid0 && valid1) {
            valid1 = false;
            passing0 = [passing0, 3];
        }
        else {
            if (_valid0) {
                valid1 = true;
                passing0 = 3;
            }
        }
    }
} if (!valid1) {
    const err25 = { instancePath, schemaPath: "https://identity.foundation/dwn/json-schemas/general-jwk.json/oneOf", keyword: "oneOf", params: { passingSchemas: passing0 }, message: "must match exactly one schema in oneOf" };
    if (vErrors === null) {
        vErrors = [err25];
    }
    else {
        vErrors.push(err25);
    }
    errors++;
    validate27.errors = vErrors;
    return false;
}
else {
    errors = _errs2;
    if (vErrors !== null) {
        if (_errs2) {
            vErrors.length = _errs2;
        }
        else {
            vErrors = null;
        }
    }
} if (errors === _errs0) {
    if (data && typeof data == "object" && !Array.isArray(data)) {
        let missing4;
        if ((data.kty === undefined) && (missing4 = "kty")) {
            validate27.errors = [{ instancePath, schemaPath: "https://identity.foundation/dwn/json-schemas/general-jwk.json/required", keyword: "required", params: { missingProperty: missing4 }, message: "must have required property '" + missing4 + "'" }];
            return false;
        }
        else {
            if (data.alg !== undefined) {
                const _errs45 = errors;
                if (typeof data.alg !== "string") {
                    validate27.errors = [{ instancePath: instancePath + "/alg", schemaPath: "https://identity.foundation/dwn/json-schemas/general-jwk.json/properties/alg/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                    return false;
                }
                var valid6 = _errs45 === errors;
            }
            else {
                var valid6 = true;
            }
            if (valid6) {
                if (data.kid !== undefined) {
                    const _errs47 = errors;
                    if (typeof data.kid !== "string") {
                        validate27.errors = [{ instancePath: instancePath + "/kid", schemaPath: "https://identity.foundation/dwn/json-schemas/general-jwk.json/properties/kid/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                        return false;
                    }
                    var valid6 = _errs47 === errors;
                }
                else {
                    var valid6 = true;
                }
                if (valid6) {
                    if (data.kty !== undefined) {
                        let data23 = data.kty;
                        const _errs49 = errors;
                        if (!((((data23 === "EC") || (data23 === "RSA")) || (data23 === "oct")) || (data23 === "OKP"))) {
                            validate27.errors = [{ instancePath: instancePath + "/kty", schemaPath: "https://identity.foundation/dwn/json-schemas/general-jwk.json/properties/kty/enum", keyword: "enum", params: { allowedValues: schema30.properties.kty.enum }, message: "must be equal to one of the allowed values" }];
                            return false;
                        }
                        var valid6 = _errs49 === errors;
                    }
                    else {
                        var valid6 = true;
                    }
                    if (valid6) {
                        if (data.crv !== undefined) {
                            const _errs50 = errors;
                            if (typeof data.crv !== "string") {
                                validate27.errors = [{ instancePath: instancePath + "/crv", schemaPath: "https://identity.foundation/dwn/json-schemas/general-jwk.json/properties/crv/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                return false;
                            }
                            var valid6 = _errs50 === errors;
                        }
                        else {
                            var valid6 = true;
                        }
                        if (valid6) {
                            if (data.use !== undefined) {
                                const _errs52 = errors;
                                if (typeof data.use !== "string") {
                                    validate27.errors = [{ instancePath: instancePath + "/use", schemaPath: "https://identity.foundation/dwn/json-schemas/general-jwk.json/properties/use/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                    return false;
                                }
                                var valid6 = _errs52 === errors;
                            }
                            else {
                                var valid6 = true;
                            }
                            if (valid6) {
                                if (data.key_ops !== undefined) {
                                    const _errs54 = errors;
                                    if (typeof data.key_ops !== "string") {
                                        validate27.errors = [{ instancePath: instancePath + "/key_ops", schemaPath: "https://identity.foundation/dwn/json-schemas/general-jwk.json/properties/key_ops/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                        return false;
                                    }
                                    var valid6 = _errs54 === errors;
                                }
                                else {
                                    var valid6 = true;
                                }
                                if (valid6) {
                                    if (data.x5u !== undefined) {
                                        const _errs56 = errors;
                                        if (typeof data.x5u !== "string") {
                                            validate27.errors = [{ instancePath: instancePath + "/x5u", schemaPath: "https://identity.foundation/dwn/json-schemas/general-jwk.json/properties/x5u/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                            return false;
                                        }
                                        var valid6 = _errs56 === errors;
                                    }
                                    else {
                                        var valid6 = true;
                                    }
                                    if (valid6) {
                                        if (data.x5c !== undefined) {
                                            const _errs58 = errors;
                                            if (typeof data.x5c !== "string") {
                                                validate27.errors = [{ instancePath: instancePath + "/x5c", schemaPath: "https://identity.foundation/dwn/json-schemas/general-jwk.json/properties/x5c/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                return false;
                                            }
                                            var valid6 = _errs58 === errors;
                                        }
                                        else {
                                            var valid6 = true;
                                        }
                                        if (valid6) {
                                            if (data.x5t !== undefined) {
                                                const _errs60 = errors;
                                                if (typeof data.x5t !== "string") {
                                                    validate27.errors = [{ instancePath: instancePath + "/x5t", schemaPath: "https://identity.foundation/dwn/json-schemas/general-jwk.json/properties/x5t/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                    return false;
                                                }
                                                var valid6 = _errs60 === errors;
                                            }
                                            else {
                                                var valid6 = true;
                                            }
                                            if (valid6) {
                                                if (data["x5t#S256"] !== undefined) {
                                                    const _errs62 = errors;
                                                    if (typeof data["x5t#S256"] !== "string") {
                                                        validate27.errors = [{ instancePath: instancePath + "/x5t#S256", schemaPath: "https://identity.foundation/dwn/json-schemas/general-jwk.json/properties/x5t%23S256/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                        return false;
                                                    }
                                                    var valid6 = _errs62 === errors;
                                                }
                                                else {
                                                    var valid6 = true;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    else {
        validate27.errors = [{ instancePath, schemaPath: "https://identity.foundation/dwn/json-schemas/general-jwk.json/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
        return false;
    }
} var valid0 = _errs0 === errors; if (valid0) {
    const _errs64 = errors;
    const _errs65 = errors;
    const _errs66 = errors;
    let valid8 = false;
    const _errs67 = errors;
    const _errs69 = errors;
    let valid9 = false;
    const _errs70 = errors;
    if (data && typeof data == "object" && !Array.isArray(data)) {
        let missing5;
        if ((data.d === undefined) && (missing5 = "d")) {
            const err26 = {};
            if (vErrors === null) {
                vErrors = [err26];
            }
            else {
                vErrors.push(err26);
            }
            errors++;
        }
    }
    var _valid2 = _errs70 === errors;
    valid9 = valid9 || _valid2;
    if (!valid9) {
        const err27 = {};
        if (vErrors === null) {
            vErrors = [err27];
        }
        else {
            vErrors.push(err27);
        }
        errors++;
    }
    else {
        errors = _errs69;
        if (vErrors !== null) {
            if (_errs69) {
                vErrors.length = _errs69;
            }
            else {
                vErrors = null;
            }
        }
    }
    if (errors === _errs67) {
        if (data && typeof data == "object" && !Array.isArray(data)) {
            if (data.kty !== undefined) {
                if ("EC" !== data.kty) {
                    const err28 = {};
                    if (vErrors === null) {
                        vErrors = [err28];
                    }
                    else {
                        vErrors.push(err28);
                    }
                    errors++;
                }
            }
        }
        else {
            const err29 = {};
            if (vErrors === null) {
                vErrors = [err29];
            }
            else {
                vErrors.push(err29);
            }
            errors++;
        }
    }
    var _valid1 = _errs67 === errors;
    valid8 = valid8 || _valid1;
    if (!valid8) {
        const _errs72 = errors;
        const _errs74 = errors;
        let valid11 = false;
        const _errs75 = errors;
        if (data && typeof data == "object" && !Array.isArray(data)) {
            let missing6;
            if ((data.d === undefined) && (missing6 = "d")) {
                const err30 = {};
                if (vErrors === null) {
                    vErrors = [err30];
                }
                else {
                    vErrors.push(err30);
                }
                errors++;
            }
        }
        var _valid3 = _errs75 === errors;
        valid11 = valid11 || _valid3;
        if (!valid11) {
            const err31 = {};
            if (vErrors === null) {
                vErrors = [err31];
            }
            else {
                vErrors.push(err31);
            }
            errors++;
        }
        else {
            errors = _errs74;
            if (vErrors !== null) {
                if (_errs74) {
                    vErrors.length = _errs74;
                }
                else {
                    vErrors = null;
                }
            }
        }
        if (errors === _errs72) {
            if (data && typeof data == "object" && !Array.isArray(data)) {
                if (data.kty !== undefined) {
                    if ("OKP" !== data.kty) {
                        const err32 = {};
                        if (vErrors === null) {
                            vErrors = [err32];
                        }
                        else {
                            vErrors.push(err32);
                        }
                        errors++;
                    }
                }
            }
            else {
                const err33 = {};
                if (vErrors === null) {
                    vErrors = [err33];
                }
                else {
                    vErrors.push(err33);
                }
                errors++;
            }
        }
        var _valid1 = _errs72 === errors;
        valid8 = valid8 || _valid1;
        if (!valid8) {
            const _errs77 = errors;
            const _errs79 = errors;
            let valid13 = false;
            const _errs80 = errors;
            if (data && typeof data == "object" && !Array.isArray(data)) {
                let missing7;
                if ((data.d === undefined) && (missing7 = "d")) {
                    const err34 = {};
                    if (vErrors === null) {
                        vErrors = [err34];
                    }
                    else {
                        vErrors.push(err34);
                    }
                    errors++;
                }
            }
            var _valid4 = _errs80 === errors;
            valid13 = valid13 || _valid4;
            if (!valid13) {
                const _errs81 = errors;
                if (data && typeof data == "object" && !Array.isArray(data)) {
                    let missing8;
                    if ((data.p === undefined) && (missing8 = "p")) {
                        const err35 = {};
                        if (vErrors === null) {
                            vErrors = [err35];
                        }
                        else {
                            vErrors.push(err35);
                        }
                        errors++;
                    }
                }
                var _valid4 = _errs81 === errors;
                valid13 = valid13 || _valid4;
                if (!valid13) {
                    const _errs82 = errors;
                    if (data && typeof data == "object" && !Array.isArray(data)) {
                        let missing9;
                        if ((data.q === undefined) && (missing9 = "q")) {
                            const err36 = {};
                            if (vErrors === null) {
                                vErrors = [err36];
                            }
                            else {
                                vErrors.push(err36);
                            }
                            errors++;
                        }
                    }
                    var _valid4 = _errs82 === errors;
                    valid13 = valid13 || _valid4;
                    if (!valid13) {
                        const _errs83 = errors;
                        if (data && typeof data == "object" && !Array.isArray(data)) {
                            let missing10;
                            if ((data.dp === undefined) && (missing10 = "dp")) {
                                const err37 = {};
                                if (vErrors === null) {
                                    vErrors = [err37];
                                }
                                else {
                                    vErrors.push(err37);
                                }
                                errors++;
                            }
                        }
                        var _valid4 = _errs83 === errors;
                        valid13 = valid13 || _valid4;
                        if (!valid13) {
                            const _errs84 = errors;
                            if (data && typeof data == "object" && !Array.isArray(data)) {
                                let missing11;
                                if ((data.dq === undefined) && (missing11 = "dq")) {
                                    const err38 = {};
                                    if (vErrors === null) {
                                        vErrors = [err38];
                                    }
                                    else {
                                        vErrors.push(err38);
                                    }
                                    errors++;
                                }
                            }
                            var _valid4 = _errs84 === errors;
                            valid13 = valid13 || _valid4;
                            if (!valid13) {
                                const _errs85 = errors;
                                if (data && typeof data == "object" && !Array.isArray(data)) {
                                    let missing12;
                                    if ((data.qi === undefined) && (missing12 = "qi")) {
                                        const err39 = {};
                                        if (vErrors === null) {
                                            vErrors = [err39];
                                        }
                                        else {
                                            vErrors.push(err39);
                                        }
                                        errors++;
                                    }
                                }
                                var _valid4 = _errs85 === errors;
                                valid13 = valid13 || _valid4;
                                if (!valid13) {
                                    const _errs86 = errors;
                                    if (data && typeof data == "object" && !Array.isArray(data)) {
                                        let missing13;
                                        if ((data.oth === undefined) && (missing13 = "oth")) {
                                            const err40 = {};
                                            if (vErrors === null) {
                                                vErrors = [err40];
                                            }
                                            else {
                                                vErrors.push(err40);
                                            }
                                            errors++;
                                        }
                                    }
                                    var _valid4 = _errs86 === errors;
                                    valid13 = valid13 || _valid4;
                                }
                            }
                        }
                    }
                }
            }
            if (!valid13) {
                const err41 = {};
                if (vErrors === null) {
                    vErrors = [err41];
                }
                else {
                    vErrors.push(err41);
                }
                errors++;
            }
            else {
                errors = _errs79;
                if (vErrors !== null) {
                    if (_errs79) {
                        vErrors.length = _errs79;
                    }
                    else {
                        vErrors = null;
                    }
                }
            }
            if (errors === _errs77) {
                if (data && typeof data == "object" && !Array.isArray(data)) {
                    if (data.kty !== undefined) {
                        const _errs87 = errors;
                        if ("RSA" !== data.kty) {
                            const err42 = {};
                            if (vErrors === null) {
                                vErrors = [err42];
                            }
                            else {
                                vErrors.push(err42);
                            }
                            errors++;
                        }
                        var valid14 = _errs87 === errors;
                    }
                    else {
                        var valid14 = true;
                    }
                    if (valid14) {
                        if (data.oth !== undefined) {
                            let data34 = data.oth;
                            const _errs88 = errors;
                            if (!(data34 && typeof data34 == "object" && !Array.isArray(data34))) {
                                const err43 = {};
                                if (vErrors === null) {
                                    vErrors = [err43];
                                }
                                else {
                                    vErrors.push(err43);
                                }
                                errors++;
                            }
                            var valid14 = _errs88 === errors;
                        }
                        else {
                            var valid14 = true;
                        }
                    }
                }
                else {
                    const err44 = {};
                    if (vErrors === null) {
                        vErrors = [err44];
                    }
                    else {
                        vErrors.push(err44);
                    }
                    errors++;
                }
            }
            var _valid1 = _errs77 === errors;
            valid8 = valid8 || _valid1;
        }
    }
    if (!valid8) {
        const err45 = {};
        if (vErrors === null) {
            vErrors = [err45];
        }
        else {
            vErrors.push(err45);
        }
        errors++;
    }
    else {
        errors = _errs66;
        if (vErrors !== null) {
            if (_errs66) {
                vErrors.length = _errs66;
            }
            else {
                vErrors = null;
            }
        }
    }
    var valid7 = _errs65 === errors;
    if (valid7) {
        validate27.errors = [{ instancePath, schemaPath: "#/not", keyword: "not", params: {}, message: "must NOT be valid" }];
        return false;
    }
    else {
        errors = _errs64;
        if (vErrors !== null) {
            if (_errs64) {
                vErrors.length = _errs64;
            }
            else {
                vErrors = null;
            }
        }
    }
} validate27.errors = vErrors; return errors === 0; }
const pattern13 = new RegExp("^[a-zA-Z]+(/[a-zA-Z]+)*$", "u");
function validate24(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) {
    ;
    let vErrors = null;
    let errors = 0;
    const _errs2 = errors;
    let valid0 = false;
    const _errs3 = errors;
    if (data && typeof data == "object" && !Array.isArray(data)) {
        let missing0;
        if ((data.contextId === undefined) && (missing0 = "contextId")) {
            const err0 = { instancePath, schemaPath: "#/anyOf/0/required", keyword: "required", params: { missingProperty: missing0 }, message: "must have required property '" + missing0 + "'" };
            if (vErrors === null) {
                vErrors = [err0];
            }
            else {
                vErrors.push(err0);
            }
            errors++;
        }
        else {
            if (data.descriptor !== undefined) {
                let data0 = data.descriptor;
                const _errs4 = errors;
                if (errors === _errs4) {
                    if (data0 && typeof data0 == "object" && !Array.isArray(data0)) {
                        let missing1;
                        if ((((data0.protocol === undefined) && (missing1 = "protocol")) || ((data0.protocolPath === undefined) && (missing1 = "protocolPath"))) || ((data0.schema === undefined) && (missing1 = "schema"))) {
                            const err1 = { instancePath: instancePath + "/descriptor", schemaPath: "#/anyOf/0/properties/descriptor/required", keyword: "required", params: { missingProperty: missing1 }, message: "must have required property '" + missing1 + "'" };
                            if (vErrors === null) {
                                vErrors = [err1];
                            }
                            else {
                                vErrors.push(err1);
                            }
                            errors++;
                        }
                    }
                    else {
                        const err2 = { instancePath: instancePath + "/descriptor", schemaPath: "#/anyOf/0/properties/descriptor/type", keyword: "type", params: { type: "object" }, message: "must be object" };
                        if (vErrors === null) {
                            vErrors = [err2];
                        }
                        else {
                            vErrors.push(err2);
                        }
                        errors++;
                    }
                }
            }
        }
    }
    var _valid0 = _errs3 === errors;
    valid0 = valid0 || _valid0;
    if (!valid0) {
        const _errs6 = errors;
        const _errs7 = errors;
        const _errs8 = errors;
        const _errs9 = errors;
        if (data && typeof data == "object" && !Array.isArray(data)) {
            let missing2;
            if ((data.contextId === undefined) && (missing2 = "contextId")) {
                const err3 = {};
                if (vErrors === null) {
                    vErrors = [err3];
                }
                else {
                    vErrors.push(err3);
                }
                errors++;
            }
        }
        var valid3 = _errs9 === errors;
        if (valid3) {
            const err4 = { instancePath, schemaPath: "#/anyOf/1/allOf/0/not", keyword: "not", params: {}, message: "must NOT be valid" };
            if (vErrors === null) {
                vErrors = [err4];
            }
            else {
                vErrors.push(err4);
            }
            errors++;
        }
        else {
            errors = _errs8;
            if (vErrors !== null) {
                if (_errs8) {
                    vErrors.length = _errs8;
                }
                else {
                    vErrors = null;
                }
            }
        }
        var valid2 = _errs7 === errors;
        if (valid2) {
            const _errs10 = errors;
            if (data && typeof data == "object" && !Array.isArray(data)) {
                if (data.descriptor !== undefined) {
                    let data1 = data.descriptor;
                    if (!(data1 && typeof data1 == "object" && !Array.isArray(data1))) {
                        const err5 = { instancePath: instancePath + "/descriptor", schemaPath: "#/anyOf/1/allOf/1/properties/descriptor/type", keyword: "type", params: { type: "object" }, message: "must be object" };
                        if (vErrors === null) {
                            vErrors = [err5];
                        }
                        else {
                            vErrors.push(err5);
                        }
                        errors++;
                    }
                    const _errs13 = errors;
                    const _errs14 = errors;
                    if (data1 && typeof data1 == "object" && !Array.isArray(data1)) {
                        let missing3;
                        if ((data1.protocol === undefined) && (missing3 = "protocol")) {
                            const err6 = {};
                            if (vErrors === null) {
                                vErrors = [err6];
                            }
                            else {
                                vErrors.push(err6);
                            }
                            errors++;
                        }
                    }
                    var valid5 = _errs14 === errors;
                    if (valid5) {
                        const err7 = { instancePath: instancePath + "/descriptor", schemaPath: "#/anyOf/1/allOf/1/properties/descriptor/not", keyword: "not", params: {}, message: "must NOT be valid" };
                        if (vErrors === null) {
                            vErrors = [err7];
                        }
                        else {
                            vErrors.push(err7);
                        }
                        errors++;
                    }
                    else {
                        errors = _errs13;
                        if (vErrors !== null) {
                            if (_errs13) {
                                vErrors.length = _errs13;
                            }
                            else {
                                vErrors = null;
                            }
                        }
                    }
                }
            }
            var valid2 = _errs10 === errors;
            if (valid2) {
                const _errs15 = errors;
                if (data && typeof data == "object" && !Array.isArray(data)) {
                    if (data.descriptor !== undefined) {
                        let data2 = data.descriptor;
                        if (!(data2 && typeof data2 == "object" && !Array.isArray(data2))) {
                            const err8 = { instancePath: instancePath + "/descriptor", schemaPath: "#/anyOf/1/allOf/2/properties/descriptor/type", keyword: "type", params: { type: "object" }, message: "must be object" };
                            if (vErrors === null) {
                                vErrors = [err8];
                            }
                            else {
                                vErrors.push(err8);
                            }
                            errors++;
                        }
                        const _errs18 = errors;
                        const _errs19 = errors;
                        if (data2 && typeof data2 == "object" && !Array.isArray(data2)) {
                            let missing4;
                            if ((data2.protocolPath === undefined) && (missing4 = "protocolPath")) {
                                const err9 = {};
                                if (vErrors === null) {
                                    vErrors = [err9];
                                }
                                else {
                                    vErrors.push(err9);
                                }
                                errors++;
                            }
                        }
                        var valid7 = _errs19 === errors;
                        if (valid7) {
                            const err10 = { instancePath: instancePath + "/descriptor", schemaPath: "#/anyOf/1/allOf/2/properties/descriptor/not", keyword: "not", params: {}, message: "must NOT be valid" };
                            if (vErrors === null) {
                                vErrors = [err10];
                            }
                            else {
                                vErrors.push(err10);
                            }
                            errors++;
                        }
                        else {
                            errors = _errs18;
                            if (vErrors !== null) {
                                if (_errs18) {
                                    vErrors.length = _errs18;
                                }
                                else {
                                    vErrors = null;
                                }
                            }
                        }
                    }
                }
                var valid2 = _errs15 === errors;
            }
        }
        var _valid0 = _errs6 === errors;
        valid0 = valid0 || _valid0;
    }
    if (!valid0) {
        const err11 = { instancePath, schemaPath: "#/anyOf", keyword: "anyOf", params: {}, message: "must match a schema in anyOf" };
        if (vErrors === null) {
            vErrors = [err11];
        }
        else {
            vErrors.push(err11);
        }
        errors++;
        validate24.errors = vErrors;
        return false;
    }
    else {
        errors = _errs2;
        if (vErrors !== null) {
            if (_errs2) {
                vErrors.length = _errs2;
            }
            else {
                vErrors = null;
            }
        }
    }
    if (errors === 0) {
        if (data && typeof data == "object" && !Array.isArray(data)) {
            let missing5;
            if ((data.descriptor === undefined) && (missing5 = "descriptor")) {
                validate24.errors = [{ instancePath, schemaPath: "#/required", keyword: "required", params: { missingProperty: missing5 }, message: "must have required property '" + missing5 + "'" }];
                return false;
            }
            else {
                const _errs20 = errors;
                for (const key0 in data) {
                    if (!((((((key0 === "recordId") || (key0 === "contextId")) || (key0 === "attestation")) || (key0 === "authorization")) || (key0 === "encryption")) || (key0 === "descriptor"))) {
                        validate24.errors = [{ instancePath, schemaPath: "#/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties" }];
                        return false;
                        break;
                    }
                }
                if (_errs20 === errors) {
                    if (data.recordId !== undefined) {
                        const _errs21 = errors;
                        if (typeof data.recordId !== "string") {
                            validate24.errors = [{ instancePath: instancePath + "/recordId", schemaPath: "#/properties/recordId/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                            return false;
                        }
                        var valid8 = _errs21 === errors;
                    }
                    else {
                        var valid8 = true;
                    }
                    if (valid8) {
                        if (data.contextId !== undefined) {
                            const _errs23 = errors;
                            if (typeof data.contextId !== "string") {
                                validate24.errors = [{ instancePath: instancePath + "/contextId", schemaPath: "#/properties/contextId/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                return false;
                            }
                            var valid8 = _errs23 === errors;
                        }
                        else {
                            var valid8 = true;
                        }
                        if (valid8) {
                            if (data.attestation !== undefined) {
                                const _errs25 = errors;
                                if (!(validate11(data.attestation, { instancePath: instancePath + "/attestation", parentData: data, parentDataProperty: "attestation", rootData }))) {
                                    vErrors = vErrors === null ? validate11.errors : vErrors.concat(validate11.errors);
                                    errors = vErrors.length;
                                }
                                var valid8 = _errs25 === errors;
                            }
                            else {
                                var valid8 = true;
                            }
                            if (valid8) {
                                if (data.authorization !== undefined) {
                                    const _errs26 = errors;
                                    if (!(validate14(data.authorization, { instancePath: instancePath + "/authorization", parentData: data, parentDataProperty: "authorization", rootData }))) {
                                        vErrors = vErrors === null ? validate14.errors : vErrors.concat(validate14.errors);
                                        errors = vErrors.length;
                                    }
                                    var valid8 = _errs26 === errors;
                                }
                                else {
                                    var valid8 = true;
                                }
                                if (valid8) {
                                    if (data.encryption !== undefined) {
                                        let data7 = data.encryption;
                                        const _errs27 = errors;
                                        if (errors === _errs27) {
                                            if (data7 && typeof data7 == "object" && !Array.isArray(data7)) {
                                                let missing6;
                                                if ((((data7.algorithm === undefined) && (missing6 = "algorithm")) || ((data7.initializationVector === undefined) && (missing6 = "initializationVector"))) || ((data7.keyEncryption === undefined) && (missing6 = "keyEncryption"))) {
                                                    validate24.errors = [{ instancePath: instancePath + "/encryption", schemaPath: "#/properties/encryption/required", keyword: "required", params: { missingProperty: missing6 }, message: "must have required property '" + missing6 + "'" }];
                                                    return false;
                                                }
                                                else {
                                                    const _errs29 = errors;
                                                    for (const key1 in data7) {
                                                        if (!(((key1 === "algorithm") || (key1 === "initializationVector")) || (key1 === "keyEncryption"))) {
                                                            validate24.errors = [{ instancePath: instancePath + "/encryption", schemaPath: "#/properties/encryption/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key1 }, message: "must NOT have additional properties" }];
                                                            return false;
                                                            break;
                                                        }
                                                    }
                                                    if (_errs29 === errors) {
                                                        if (data7.algorithm !== undefined) {
                                                            let data8 = data7.algorithm;
                                                            const _errs30 = errors;
                                                            if (typeof data8 !== "string") {
                                                                validate24.errors = [{ instancePath: instancePath + "/encryption/algorithm", schemaPath: "#/properties/encryption/properties/algorithm/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                                return false;
                                                            }
                                                            if (!(data8 === "A256CTR")) {
                                                                validate24.errors = [{ instancePath: instancePath + "/encryption/algorithm", schemaPath: "#/properties/encryption/properties/algorithm/enum", keyword: "enum", params: { allowedValues: schema27.properties.encryption.properties.algorithm.enum }, message: "must be equal to one of the allowed values" }];
                                                                return false;
                                                            }
                                                            var valid9 = _errs30 === errors;
                                                        }
                                                        else {
                                                            var valid9 = true;
                                                        }
                                                        if (valid9) {
                                                            if (data7.initializationVector !== undefined) {
                                                                let data9 = data7.initializationVector;
                                                                const _errs32 = errors;
                                                                const _errs33 = errors;
                                                                if (errors === _errs33) {
                                                                    if (typeof data9 === "string") {
                                                                        if (!pattern0.test(data9)) {
                                                                            validate24.errors = [{ instancePath: instancePath + "/encryption/initializationVector", schemaPath: "https://identity.foundation/dwn/json-schemas/defs.json#/definitions/base64url/pattern", keyword: "pattern", params: { pattern: "^[A-Za-z0-9_-]+$" }, message: "must match pattern \"" + "^[A-Za-z0-9_-]+$" + "\"" }];
                                                                            return false;
                                                                        }
                                                                    }
                                                                    else {
                                                                        validate24.errors = [{ instancePath: instancePath + "/encryption/initializationVector", schemaPath: "https://identity.foundation/dwn/json-schemas/defs.json#/definitions/base64url/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                                        return false;
                                                                    }
                                                                }
                                                                var valid9 = _errs32 === errors;
                                                            }
                                                            else {
                                                                var valid9 = true;
                                                            }
                                                            if (valid9) {
                                                                if (data7.keyEncryption !== undefined) {
                                                                    let data10 = data7.keyEncryption;
                                                                    const _errs35 = errors;
                                                                    if (errors === _errs35) {
                                                                        if (Array.isArray(data10)) {
                                                                            if (data10.length < 1) {
                                                                                validate24.errors = [{ instancePath: instancePath + "/encryption/keyEncryption", schemaPath: "#/properties/encryption/properties/keyEncryption/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }];
                                                                                return false;
                                                                            }
                                                                            else {
                                                                                var valid11 = true;
                                                                                const len0 = data10.length;
                                                                                for (let i0 = 0; i0 < len0; i0++) {
                                                                                    let data11 = data10[i0];
                                                                                    const _errs37 = errors;
                                                                                    if (errors === _errs37) {
                                                                                        if (data11 && typeof data11 == "object" && !Array.isArray(data11)) {
                                                                                            let missing7;
                                                                                            if ((((((((data11.rootKeyId === undefined) && (missing7 = "rootKeyId")) || ((data11.derivationScheme === undefined) && (missing7 = "derivationScheme"))) || ((data11.algorithm === undefined) && (missing7 = "algorithm"))) || ((data11.encryptedKey === undefined) && (missing7 = "encryptedKey"))) || ((data11.initializationVector === undefined) && (missing7 = "initializationVector"))) || ((data11.ephemeralPublicKey === undefined) && (missing7 = "ephemeralPublicKey"))) || ((data11.messageAuthenticationCode === undefined) && (missing7 = "messageAuthenticationCode"))) {
                                                                                                validate24.errors = [{ instancePath: instancePath + "/encryption/keyEncryption/" + i0, schemaPath: "#/properties/encryption/properties/keyEncryption/items/required", keyword: "required", params: { missingProperty: missing7 }, message: "must have required property '" + missing7 + "'" }];
                                                                                                return false;
                                                                                            }
                                                                                            else {
                                                                                                const _errs39 = errors;
                                                                                                for (const key2 in data11) {
                                                                                                    if (!((((((((key2 === "rootKeyId") || (key2 === "derivationScheme")) || (key2 === "derivedPublicKey")) || (key2 === "algorithm")) || (key2 === "encryptedKey")) || (key2 === "initializationVector")) || (key2 === "ephemeralPublicKey")) || (key2 === "messageAuthenticationCode"))) {
                                                                                                        validate24.errors = [{ instancePath: instancePath + "/encryption/keyEncryption/" + i0, schemaPath: "#/properties/encryption/properties/keyEncryption/items/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key2 }, message: "must NOT have additional properties" }];
                                                                                                        return false;
                                                                                                        break;
                                                                                                    }
                                                                                                }
                                                                                                if (_errs39 === errors) {
                                                                                                    if (data11.rootKeyId !== undefined) {
                                                                                                        const _errs40 = errors;
                                                                                                        if (typeof data11.rootKeyId !== "string") {
                                                                                                            validate24.errors = [{ instancePath: instancePath + "/encryption/keyEncryption/" + i0 + "/rootKeyId", schemaPath: "#/properties/encryption/properties/keyEncryption/items/properties/rootKeyId/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                                                                            return false;
                                                                                                        }
                                                                                                        var valid12 = _errs40 === errors;
                                                                                                    }
                                                                                                    else {
                                                                                                        var valid12 = true;
                                                                                                    }
                                                                                                    if (valid12) {
                                                                                                        if (data11.derivationScheme !== undefined) {
                                                                                                            let data13 = data11.derivationScheme;
                                                                                                            const _errs42 = errors;
                                                                                                            if (typeof data13 !== "string") {
                                                                                                                validate24.errors = [{ instancePath: instancePath + "/encryption/keyEncryption/" + i0 + "/derivationScheme", schemaPath: "#/properties/encryption/properties/keyEncryption/items/properties/derivationScheme/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                                                                                return false;
                                                                                                            }
                                                                                                            if (!((((data13 === "dataFormats") || (data13 === "protocolContext")) || (data13 === "protocolPath")) || (data13 === "schemas"))) {
                                                                                                                validate24.errors = [{ instancePath: instancePath + "/encryption/keyEncryption/" + i0 + "/derivationScheme", schemaPath: "#/properties/encryption/properties/keyEncryption/items/properties/derivationScheme/enum", keyword: "enum", params: { allowedValues: schema27.properties.encryption.properties.keyEncryption.items.properties.derivationScheme.enum }, message: "must be equal to one of the allowed values" }];
                                                                                                                return false;
                                                                                                            }
                                                                                                            var valid12 = _errs42 === errors;
                                                                                                        }
                                                                                                        else {
                                                                                                            var valid12 = true;
                                                                                                        }
                                                                                                        if (valid12) {
                                                                                                            if (data11.derivedPublicKey !== undefined) {
                                                                                                                const _errs44 = errors;
                                                                                                                if (!(validate27(data11.derivedPublicKey, { instancePath: instancePath + "/encryption/keyEncryption/" + i0 + "/derivedPublicKey", parentData: data11, parentDataProperty: "derivedPublicKey", rootData }))) {
                                                                                                                    vErrors = vErrors === null ? validate27.errors : vErrors.concat(validate27.errors);
                                                                                                                    errors = vErrors.length;
                                                                                                                }
                                                                                                                var valid12 = _errs44 === errors;
                                                                                                            }
                                                                                                            else {
                                                                                                                var valid12 = true;
                                                                                                            }
                                                                                                            if (valid12) {
                                                                                                                if (data11.algorithm !== undefined) {
                                                                                                                    let data15 = data11.algorithm;
                                                                                                                    const _errs45 = errors;
                                                                                                                    if (typeof data15 !== "string") {
                                                                                                                        validate24.errors = [{ instancePath: instancePath + "/encryption/keyEncryption/" + i0 + "/algorithm", schemaPath: "#/properties/encryption/properties/keyEncryption/items/properties/algorithm/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                                                                                        return false;
                                                                                                                    }
                                                                                                                    if (!(data15 === "ECIES-ES256K")) {
                                                                                                                        validate24.errors = [{ instancePath: instancePath + "/encryption/keyEncryption/" + i0 + "/algorithm", schemaPath: "#/properties/encryption/properties/keyEncryption/items/properties/algorithm/enum", keyword: "enum", params: { allowedValues: schema27.properties.encryption.properties.keyEncryption.items.properties.algorithm.enum }, message: "must be equal to one of the allowed values" }];
                                                                                                                        return false;
                                                                                                                    }
                                                                                                                    var valid12 = _errs45 === errors;
                                                                                                                }
                                                                                                                else {
                                                                                                                    var valid12 = true;
                                                                                                                }
                                                                                                                if (valid12) {
                                                                                                                    if (data11.encryptedKey !== undefined) {
                                                                                                                        let data16 = data11.encryptedKey;
                                                                                                                        const _errs47 = errors;
                                                                                                                        const _errs48 = errors;
                                                                                                                        if (errors === _errs48) {
                                                                                                                            if (typeof data16 === "string") {
                                                                                                                                if (!pattern0.test(data16)) {
                                                                                                                                    validate24.errors = [{ instancePath: instancePath + "/encryption/keyEncryption/" + i0 + "/encryptedKey", schemaPath: "https://identity.foundation/dwn/json-schemas/defs.json#/definitions/base64url/pattern", keyword: "pattern", params: { pattern: "^[A-Za-z0-9_-]+$" }, message: "must match pattern \"" + "^[A-Za-z0-9_-]+$" + "\"" }];
                                                                                                                                    return false;
                                                                                                                                }
                                                                                                                            }
                                                                                                                            else {
                                                                                                                                validate24.errors = [{ instancePath: instancePath + "/encryption/keyEncryption/" + i0 + "/encryptedKey", schemaPath: "https://identity.foundation/dwn/json-schemas/defs.json#/definitions/base64url/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                                                                                                return false;
                                                                                                                            }
                                                                                                                        }
                                                                                                                        var valid12 = _errs47 === errors;
                                                                                                                    }
                                                                                                                    else {
                                                                                                                        var valid12 = true;
                                                                                                                    }
                                                                                                                    if (valid12) {
                                                                                                                        if (data11.initializationVector !== undefined) {
                                                                                                                            let data17 = data11.initializationVector;
                                                                                                                            const _errs50 = errors;
                                                                                                                            const _errs51 = errors;
                                                                                                                            if (errors === _errs51) {
                                                                                                                                if (typeof data17 === "string") {
                                                                                                                                    if (!pattern0.test(data17)) {
                                                                                                                                        validate24.errors = [{ instancePath: instancePath + "/encryption/keyEncryption/" + i0 + "/initializationVector", schemaPath: "https://identity.foundation/dwn/json-schemas/defs.json#/definitions/base64url/pattern", keyword: "pattern", params: { pattern: "^[A-Za-z0-9_-]+$" }, message: "must match pattern \"" + "^[A-Za-z0-9_-]+$" + "\"" }];
                                                                                                                                        return false;
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                else {
                                                                                                                                    validate24.errors = [{ instancePath: instancePath + "/encryption/keyEncryption/" + i0 + "/initializationVector", schemaPath: "https://identity.foundation/dwn/json-schemas/defs.json#/definitions/base64url/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                                                                                                    return false;
                                                                                                                                }
                                                                                                                            }
                                                                                                                            var valid12 = _errs50 === errors;
                                                                                                                        }
                                                                                                                        else {
                                                                                                                            var valid12 = true;
                                                                                                                        }
                                                                                                                        if (valid12) {
                                                                                                                            if (data11.ephemeralPublicKey !== undefined) {
                                                                                                                                const _errs53 = errors;
                                                                                                                                if (!(validate27(data11.ephemeralPublicKey, { instancePath: instancePath + "/encryption/keyEncryption/" + i0 + "/ephemeralPublicKey", parentData: data11, parentDataProperty: "ephemeralPublicKey", rootData }))) {
                                                                                                                                    vErrors = vErrors === null ? validate27.errors : vErrors.concat(validate27.errors);
                                                                                                                                    errors = vErrors.length;
                                                                                                                                }
                                                                                                                                var valid12 = _errs53 === errors;
                                                                                                                            }
                                                                                                                            else {
                                                                                                                                var valid12 = true;
                                                                                                                            }
                                                                                                                            if (valid12) {
                                                                                                                                if (data11.messageAuthenticationCode !== undefined) {
                                                                                                                                    let data19 = data11.messageAuthenticationCode;
                                                                                                                                    const _errs54 = errors;
                                                                                                                                    const _errs55 = errors;
                                                                                                                                    if (errors === _errs55) {
                                                                                                                                        if (typeof data19 === "string") {
                                                                                                                                            if (!pattern0.test(data19)) {
                                                                                                                                                validate24.errors = [{ instancePath: instancePath + "/encryption/keyEncryption/" + i0 + "/messageAuthenticationCode", schemaPath: "https://identity.foundation/dwn/json-schemas/defs.json#/definitions/base64url/pattern", keyword: "pattern", params: { pattern: "^[A-Za-z0-9_-]+$" }, message: "must match pattern \"" + "^[A-Za-z0-9_-]+$" + "\"" }];
                                                                                                                                                return false;
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                        else {
                                                                                                                                            validate24.errors = [{ instancePath: instancePath + "/encryption/keyEncryption/" + i0 + "/messageAuthenticationCode", schemaPath: "https://identity.foundation/dwn/json-schemas/defs.json#/definitions/base64url/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                                                                                                            return false;
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    var valid12 = _errs54 === errors;
                                                                                                                                }
                                                                                                                                else {
                                                                                                                                    var valid12 = true;
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        else {
                                                                                            validate24.errors = [{ instancePath: instancePath + "/encryption/keyEncryption/" + i0, schemaPath: "#/properties/encryption/properties/keyEncryption/items/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
                                                                                            return false;
                                                                                        }
                                                                                    }
                                                                                    var valid11 = _errs37 === errors;
                                                                                    if (!valid11) {
                                                                                        break;
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                        else {
                                                                            validate24.errors = [{ instancePath: instancePath + "/encryption/keyEncryption", schemaPath: "#/properties/encryption/properties/keyEncryption/type", keyword: "type", params: { type: "array" }, message: "must be array" }];
                                                                            return false;
                                                                        }
                                                                    }
                                                                    var valid9 = _errs35 === errors;
                                                                }
                                                                else {
                                                                    var valid9 = true;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            else {
                                                validate24.errors = [{ instancePath: instancePath + "/encryption", schemaPath: "#/properties/encryption/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
                                                return false;
                                            }
                                        }
                                        var valid8 = _errs27 === errors;
                                    }
                                    else {
                                        var valid8 = true;
                                    }
                                    if (valid8) {
                                        if (data.descriptor !== undefined) {
                                            let data20 = data.descriptor;
                                            const _errs57 = errors;
                                            const _errs61 = errors;
                                            let valid17 = false;
                                            const _errs62 = errors;
                                            if (data20 && typeof data20 == "object" && !Array.isArray(data20)) {
                                                let missing8;
                                                if (((data20.published === undefined) && (missing8 = "published")) || ((data20.datePublished === undefined) && (missing8 = "datePublished"))) {
                                                    const err12 = { instancePath: instancePath + "/descriptor", schemaPath: "#/properties/descriptor/allOf/0/anyOf/0/required", keyword: "required", params: { missingProperty: missing8 }, message: "must have required property '" + missing8 + "'" };
                                                    if (vErrors === null) {
                                                        vErrors = [err12];
                                                    }
                                                    else {
                                                        vErrors.push(err12);
                                                    }
                                                    errors++;
                                                }
                                                else {
                                                    if (data20.published !== undefined) {
                                                        let data21 = data20.published;
                                                        if (typeof data21 !== "boolean") {
                                                            const err13 = { instancePath: instancePath + "/descriptor/published", schemaPath: "#/properties/descriptor/allOf/0/anyOf/0/properties/published/type", keyword: "type", params: { type: "boolean" }, message: "must be boolean" };
                                                            if (vErrors === null) {
                                                                vErrors = [err13];
                                                            }
                                                            else {
                                                                vErrors.push(err13);
                                                            }
                                                            errors++;
                                                        }
                                                        if (!(data21 === true)) {
                                                            const err14 = { instancePath: instancePath + "/descriptor/published", schemaPath: "#/properties/descriptor/allOf/0/anyOf/0/properties/published/enum", keyword: "enum", params: { allowedValues: schema27.properties.descriptor.allOf[0].anyOf[0].properties.published.enum }, message: "must be equal to one of the allowed values" };
                                                            if (vErrors === null) {
                                                                vErrors = [err14];
                                                            }
                                                            else {
                                                                vErrors.push(err14);
                                                            }
                                                            errors++;
                                                        }
                                                    }
                                                }
                                            }
                                            var _valid1 = _errs62 === errors;
                                            valid17 = valid17 || _valid1;
                                            if (!valid17) {
                                                const _errs65 = errors;
                                                const _errs66 = errors;
                                                const _errs67 = errors;
                                                if (data20 && typeof data20 == "object" && !Array.isArray(data20)) {
                                                    let missing9;
                                                    if ((data20.datePublished === undefined) && (missing9 = "datePublished")) {
                                                        const err15 = {};
                                                        if (vErrors === null) {
                                                            vErrors = [err15];
                                                        }
                                                        else {
                                                            vErrors.push(err15);
                                                        }
                                                        errors++;
                                                    }
                                                }
                                                var valid19 = _errs67 === errors;
                                                if (valid19) {
                                                    const err16 = { instancePath: instancePath + "/descriptor", schemaPath: "#/properties/descriptor/allOf/0/anyOf/1/not", keyword: "not", params: {}, message: "must NOT be valid" };
                                                    if (vErrors === null) {
                                                        vErrors = [err16];
                                                    }
                                                    else {
                                                        vErrors.push(err16);
                                                    }
                                                    errors++;
                                                }
                                                else {
                                                    errors = _errs66;
                                                    if (vErrors !== null) {
                                                        if (_errs66) {
                                                            vErrors.length = _errs66;
                                                        }
                                                        else {
                                                            vErrors = null;
                                                        }
                                                    }
                                                }
                                                if (errors === _errs65) {
                                                    if (data20 && typeof data20 == "object" && !Array.isArray(data20)) {
                                                        if (data20.published !== undefined) {
                                                            let data22 = data20.published;
                                                            if (typeof data22 !== "boolean") {
                                                                const err17 = { instancePath: instancePath + "/descriptor/published", schemaPath: "#/properties/descriptor/allOf/0/anyOf/1/properties/published/type", keyword: "type", params: { type: "boolean" }, message: "must be boolean" };
                                                                if (vErrors === null) {
                                                                    vErrors = [err17];
                                                                }
                                                                else {
                                                                    vErrors.push(err17);
                                                                }
                                                                errors++;
                                                            }
                                                            if (!(data22 === false)) {
                                                                const err18 = { instancePath: instancePath + "/descriptor/published", schemaPath: "#/properties/descriptor/allOf/0/anyOf/1/properties/published/enum", keyword: "enum", params: { allowedValues: schema27.properties.descriptor.allOf[0].anyOf[1].properties.published.enum }, message: "must be equal to one of the allowed values" };
                                                                if (vErrors === null) {
                                                                    vErrors = [err18];
                                                                }
                                                                else {
                                                                    vErrors.push(err18);
                                                                }
                                                                errors++;
                                                            }
                                                        }
                                                    }
                                                }
                                                var _valid1 = _errs65 === errors;
                                                valid17 = valid17 || _valid1;
                                                if (!valid17) {
                                                    const _errs70 = errors;
                                                    const _errs71 = errors;
                                                    const _errs72 = errors;
                                                    const _errs73 = errors;
                                                    if (data20 && typeof data20 == "object" && !Array.isArray(data20)) {
                                                        let missing10;
                                                        if ((data20.published === undefined) && (missing10 = "published")) {
                                                            const err19 = {};
                                                            if (vErrors === null) {
                                                                vErrors = [err19];
                                                            }
                                                            else {
                                                                vErrors.push(err19);
                                                            }
                                                            errors++;
                                                        }
                                                    }
                                                    var valid22 = _errs73 === errors;
                                                    if (valid22) {
                                                        const err20 = { instancePath: instancePath + "/descriptor", schemaPath: "#/properties/descriptor/allOf/0/anyOf/2/allOf/0/not", keyword: "not", params: {}, message: "must NOT be valid" };
                                                        if (vErrors === null) {
                                                            vErrors = [err20];
                                                        }
                                                        else {
                                                            vErrors.push(err20);
                                                        }
                                                        errors++;
                                                    }
                                                    else {
                                                        errors = _errs72;
                                                        if (vErrors !== null) {
                                                            if (_errs72) {
                                                                vErrors.length = _errs72;
                                                            }
                                                            else {
                                                                vErrors = null;
                                                            }
                                                        }
                                                    }
                                                    var valid21 = _errs71 === errors;
                                                    if (valid21) {
                                                        const _errs74 = errors;
                                                        const _errs75 = errors;
                                                        const _errs76 = errors;
                                                        if (data20 && typeof data20 == "object" && !Array.isArray(data20)) {
                                                            let missing11;
                                                            if ((data20.datePublished === undefined) && (missing11 = "datePublished")) {
                                                                const err21 = {};
                                                                if (vErrors === null) {
                                                                    vErrors = [err21];
                                                                }
                                                                else {
                                                                    vErrors.push(err21);
                                                                }
                                                                errors++;
                                                            }
                                                        }
                                                        var valid23 = _errs76 === errors;
                                                        if (valid23) {
                                                            const err22 = { instancePath: instancePath + "/descriptor", schemaPath: "#/properties/descriptor/allOf/0/anyOf/2/allOf/1/not", keyword: "not", params: {}, message: "must NOT be valid" };
                                                            if (vErrors === null) {
                                                                vErrors = [err22];
                                                            }
                                                            else {
                                                                vErrors.push(err22);
                                                            }
                                                            errors++;
                                                        }
                                                        else {
                                                            errors = _errs75;
                                                            if (vErrors !== null) {
                                                                if (_errs75) {
                                                                    vErrors.length = _errs75;
                                                                }
                                                                else {
                                                                    vErrors = null;
                                                                }
                                                            }
                                                        }
                                                        var valid21 = _errs74 === errors;
                                                    }
                                                    var _valid1 = _errs70 === errors;
                                                    valid17 = valid17 || _valid1;
                                                }
                                            }
                                            if (!valid17) {
                                                const err23 = { instancePath: instancePath + "/descriptor", schemaPath: "#/properties/descriptor/allOf/0/anyOf", keyword: "anyOf", params: {}, message: "must match a schema in anyOf" };
                                                if (vErrors === null) {
                                                    vErrors = [err23];
                                                }
                                                else {
                                                    vErrors.push(err23);
                                                }
                                                errors++;
                                                validate24.errors = vErrors;
                                                return false;
                                            }
                                            else {
                                                errors = _errs61;
                                                if (vErrors !== null) {
                                                    if (_errs61) {
                                                        vErrors.length = _errs61;
                                                    }
                                                    else {
                                                        vErrors = null;
                                                    }
                                                }
                                            }
                                            if (errors === _errs57) {
                                                if (data20 && typeof data20 == "object" && !Array.isArray(data20)) {
                                                    let missing12;
                                                    if ((((((((data20.interface === undefined) && (missing12 = "interface")) || ((data20.method === undefined) && (missing12 = "method"))) || ((data20.dataCid === undefined) && (missing12 = "dataCid"))) || ((data20.dataSize === undefined) && (missing12 = "dataSize"))) || ((data20.dateCreated === undefined) && (missing12 = "dateCreated"))) || ((data20.messageTimestamp === undefined) && (missing12 = "messageTimestamp"))) || ((data20.dataFormat === undefined) && (missing12 = "dataFormat"))) {
                                                        validate24.errors = [{ instancePath: instancePath + "/descriptor", schemaPath: "#/properties/descriptor/required", keyword: "required", params: { missingProperty: missing12 }, message: "must have required property '" + missing12 + "'" }];
                                                        return false;
                                                    }
                                                    else {
                                                        const _errs77 = errors;
                                                        for (const key3 in data20) {
                                                            if (!(func2.call(schema27.properties.descriptor.properties, key3))) {
                                                                validate24.errors = [{ instancePath: instancePath + "/descriptor", schemaPath: "#/properties/descriptor/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key3 }, message: "must NOT have additional properties" }];
                                                                return false;
                                                                break;
                                                            }
                                                        }
                                                        if (_errs77 === errors) {
                                                            let missing13;
                                                            if (data20.parentId !== undefined && ((data20.protocol === undefined) && (missing13 = "protocol"))) {
                                                                validate24.errors = [{ instancePath: instancePath + "/descriptor", schemaPath: "#/properties/descriptor/dependencies", keyword: "dependencies", params: { property: "parentId",
                                                                            missingProperty: missing13,
                                                                            depsCount: 1,
                                                                            deps: "protocol" }, message: "must have property protocol when property parentId is present" }];
                                                                return false;
                                                            }
                                                            else {
                                                                if (data20.interface !== undefined) {
                                                                    let data23 = data20.interface;
                                                                    const _errs78 = errors;
                                                                    if (typeof data23 !== "string") {
                                                                        validate24.errors = [{ instancePath: instancePath + "/descriptor/interface", schemaPath: "#/properties/descriptor/properties/interface/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                                        return false;
                                                                    }
                                                                    if (!(data23 === "Records")) {
                                                                        validate24.errors = [{ instancePath: instancePath + "/descriptor/interface", schemaPath: "#/properties/descriptor/properties/interface/enum", keyword: "enum", params: { allowedValues: schema27.properties.descriptor.properties.interface.enum }, message: "must be equal to one of the allowed values" }];
                                                                        return false;
                                                                    }
                                                                    var valid25 = _errs78 === errors;
                                                                }
                                                                else {
                                                                    var valid25 = true;
                                                                }
                                                                if (valid25) {
                                                                    if (data20.method !== undefined) {
                                                                        let data24 = data20.method;
                                                                        const _errs80 = errors;
                                                                        if (typeof data24 !== "string") {
                                                                            validate24.errors = [{ instancePath: instancePath + "/descriptor/method", schemaPath: "#/properties/descriptor/properties/method/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                                            return false;
                                                                        }
                                                                        if (!(data24 === "Write")) {
                                                                            validate24.errors = [{ instancePath: instancePath + "/descriptor/method", schemaPath: "#/properties/descriptor/properties/method/enum", keyword: "enum", params: { allowedValues: schema27.properties.descriptor.properties.method.enum }, message: "must be equal to one of the allowed values" }];
                                                                            return false;
                                                                        }
                                                                        var valid25 = _errs80 === errors;
                                                                    }
                                                                    else {
                                                                        var valid25 = true;
                                                                    }
                                                                    if (valid25) {
                                                                        if (data20.recipient !== undefined) {
                                                                            let data25 = data20.recipient;
                                                                            const _errs82 = errors;
                                                                            const _errs83 = errors;
                                                                            if (errors === _errs83) {
                                                                                if (typeof data25 === "string") {
                                                                                    if (!pattern4.test(data25)) {
                                                                                        validate24.errors = [{ instancePath: instancePath + "/descriptor/recipient", schemaPath: "https://identity.foundation/dwn/json-schemas/defs.json#/definitions/did/pattern", keyword: "pattern", params: { pattern: "^did:([a-z0-9]+):((?:(?:[a-zA-Z0-9._-]|(?:%[0-9a-fA-F]{2}))*:)*((?:[a-zA-Z0-9._-]|(?:%[0-9a-fA-F]{2}))+))((;[a-zA-Z0-9_.:%-]+=[a-zA-Z0-9_.:%-]*)*)(/[^#?]*)?([?][^#]*)?(#.*)?$" }, message: "must match pattern \"" + "^did:([a-z0-9]+):((?:(?:[a-zA-Z0-9._-]|(?:%[0-9a-fA-F]{2}))*:)*((?:[a-zA-Z0-9._-]|(?:%[0-9a-fA-F]{2}))+))((;[a-zA-Z0-9_.:%-]+=[a-zA-Z0-9_.:%-]*)*)(/[^#?]*)?([?][^#]*)?(#.*)?$" + "\"" }];
                                                                                        return false;
                                                                                    }
                                                                                }
                                                                                else {
                                                                                    validate24.errors = [{ instancePath: instancePath + "/descriptor/recipient", schemaPath: "https://identity.foundation/dwn/json-schemas/defs.json#/definitions/did/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                                                    return false;
                                                                                }
                                                                            }
                                                                            var valid25 = _errs82 === errors;
                                                                        }
                                                                        else {
                                                                            var valid25 = true;
                                                                        }
                                                                        if (valid25) {
                                                                            if (data20.protocol !== undefined) {
                                                                                const _errs85 = errors;
                                                                                if (typeof data20.protocol !== "string") {
                                                                                    validate24.errors = [{ instancePath: instancePath + "/descriptor/protocol", schemaPath: "#/properties/descriptor/properties/protocol/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                                                    return false;
                                                                                }
                                                                                var valid25 = _errs85 === errors;
                                                                            }
                                                                            else {
                                                                                var valid25 = true;
                                                                            }
                                                                            if (valid25) {
                                                                                if (data20.protocolPath !== undefined) {
                                                                                    let data27 = data20.protocolPath;
                                                                                    const _errs87 = errors;
                                                                                    if (errors === _errs87) {
                                                                                        if (typeof data27 === "string") {
                                                                                            if (!pattern13.test(data27)) {
                                                                                                validate24.errors = [{ instancePath: instancePath + "/descriptor/protocolPath", schemaPath: "#/properties/descriptor/properties/protocolPath/pattern", keyword: "pattern", params: { pattern: "^[a-zA-Z]+(/[a-zA-Z]+)*$" }, message: "must match pattern \"" + "^[a-zA-Z]+(/[a-zA-Z]+)*$" + "\"" }];
                                                                                                return false;
                                                                                            }
                                                                                        }
                                                                                        else {
                                                                                            validate24.errors = [{ instancePath: instancePath + "/descriptor/protocolPath", schemaPath: "#/properties/descriptor/properties/protocolPath/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                                                            return false;
                                                                                        }
                                                                                    }
                                                                                    var valid25 = _errs87 === errors;
                                                                                }
                                                                                else {
                                                                                    var valid25 = true;
                                                                                }
                                                                                if (valid25) {
                                                                                    if (data20.schema !== undefined) {
                                                                                        const _errs89 = errors;
                                                                                        if (typeof data20.schema !== "string") {
                                                                                            validate24.errors = [{ instancePath: instancePath + "/descriptor/schema", schemaPath: "#/properties/descriptor/properties/schema/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                                                            return false;
                                                                                        }
                                                                                        var valid25 = _errs89 === errors;
                                                                                    }
                                                                                    else {
                                                                                        var valid25 = true;
                                                                                    }
                                                                                    if (valid25) {
                                                                                        if (data20.parentId !== undefined) {
                                                                                            const _errs91 = errors;
                                                                                            if (typeof data20.parentId !== "string") {
                                                                                                validate24.errors = [{ instancePath: instancePath + "/descriptor/parentId", schemaPath: "#/properties/descriptor/properties/parentId/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                                                                return false;
                                                                                            }
                                                                                            var valid25 = _errs91 === errors;
                                                                                        }
                                                                                        else {
                                                                                            var valid25 = true;
                                                                                        }
                                                                                        if (valid25) {
                                                                                            if (data20.dataCid !== undefined) {
                                                                                                const _errs93 = errors;
                                                                                                if (typeof data20.dataCid !== "string") {
                                                                                                    validate24.errors = [{ instancePath: instancePath + "/descriptor/dataCid", schemaPath: "#/properties/descriptor/properties/dataCid/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                                                                    return false;
                                                                                                }
                                                                                                var valid25 = _errs93 === errors;
                                                                                            }
                                                                                            else {
                                                                                                var valid25 = true;
                                                                                            }
                                                                                            if (valid25) {
                                                                                                if (data20.dataSize !== undefined) {
                                                                                                    let data31 = data20.dataSize;
                                                                                                    const _errs95 = errors;
                                                                                                    if (!((typeof data31 == "number") && (isFinite(data31)))) {
                                                                                                        validate24.errors = [{ instancePath: instancePath + "/descriptor/dataSize", schemaPath: "#/properties/descriptor/properties/dataSize/type", keyword: "type", params: { type: "number" }, message: "must be number" }];
                                                                                                        return false;
                                                                                                    }
                                                                                                    var valid25 = _errs95 === errors;
                                                                                                }
                                                                                                else {
                                                                                                    var valid25 = true;
                                                                                                }
                                                                                                if (valid25) {
                                                                                                    if (data20.dateCreated !== undefined) {
                                                                                                        let data32 = data20.dateCreated;
                                                                                                        const _errs97 = errors;
                                                                                                        const _errs98 = errors;
                                                                                                        if (errors === _errs98) {
                                                                                                            if (typeof data32 === "string") {
                                                                                                                if (!pattern3.test(data32)) {
                                                                                                                    validate24.errors = [{ instancePath: instancePath + "/descriptor/dateCreated", schemaPath: "https://identity.foundation/dwn/json-schemas/defs.json#/definitions/date-time/pattern", keyword: "pattern", params: { pattern: "^\\d{4}-[0-1]\\d-[0-3]\\dT(?:[0-2]\\d:[0-5]\\d:[0-5]\\d|23:59:60)\\.\\d{6}Z$" }, message: "must match pattern \"" + "^\\d{4}-[0-1]\\d-[0-3]\\dT(?:[0-2]\\d:[0-5]\\d:[0-5]\\d|23:59:60)\\.\\d{6}Z$" + "\"" }];
                                                                                                                    return false;
                                                                                                                }
                                                                                                            }
                                                                                                            else {
                                                                                                                validate24.errors = [{ instancePath: instancePath + "/descriptor/dateCreated", schemaPath: "https://identity.foundation/dwn/json-schemas/defs.json#/definitions/date-time/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                                                                                return false;
                                                                                                            }
                                                                                                        }
                                                                                                        var valid25 = _errs97 === errors;
                                                                                                    }
                                                                                                    else {
                                                                                                        var valid25 = true;
                                                                                                    }
                                                                                                    if (valid25) {
                                                                                                        if (data20.messageTimestamp !== undefined) {
                                                                                                            let data33 = data20.messageTimestamp;
                                                                                                            const _errs100 = errors;
                                                                                                            const _errs101 = errors;
                                                                                                            if (errors === _errs101) {
                                                                                                                if (typeof data33 === "string") {
                                                                                                                    if (!pattern3.test(data33)) {
                                                                                                                        validate24.errors = [{ instancePath: instancePath + "/descriptor/messageTimestamp", schemaPath: "https://identity.foundation/dwn/json-schemas/defs.json#/definitions/date-time/pattern", keyword: "pattern", params: { pattern: "^\\d{4}-[0-1]\\d-[0-3]\\dT(?:[0-2]\\d:[0-5]\\d:[0-5]\\d|23:59:60)\\.\\d{6}Z$" }, message: "must match pattern \"" + "^\\d{4}-[0-1]\\d-[0-3]\\dT(?:[0-2]\\d:[0-5]\\d:[0-5]\\d|23:59:60)\\.\\d{6}Z$" + "\"" }];
                                                                                                                        return false;
                                                                                                                    }
                                                                                                                }
                                                                                                                else {
                                                                                                                    validate24.errors = [{ instancePath: instancePath + "/descriptor/messageTimestamp", schemaPath: "https://identity.foundation/dwn/json-schemas/defs.json#/definitions/date-time/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                                                                                    return false;
                                                                                                                }
                                                                                                            }
                                                                                                            var valid25 = _errs100 === errors;
                                                                                                        }
                                                                                                        else {
                                                                                                            var valid25 = true;
                                                                                                        }
                                                                                                        if (valid25) {
                                                                                                            if (data20.published !== undefined) {
                                                                                                                const _errs103 = errors;
                                                                                                                if (typeof data20.published !== "boolean") {
                                                                                                                    validate24.errors = [{ instancePath: instancePath + "/descriptor/published", schemaPath: "#/properties/descriptor/properties/published/type", keyword: "type", params: { type: "boolean" }, message: "must be boolean" }];
                                                                                                                    return false;
                                                                                                                }
                                                                                                                var valid25 = _errs103 === errors;
                                                                                                            }
                                                                                                            else {
                                                                                                                var valid25 = true;
                                                                                                            }
                                                                                                            if (valid25) {
                                                                                                                if (data20.datePublished !== undefined) {
                                                                                                                    let data35 = data20.datePublished;
                                                                                                                    const _errs105 = errors;
                                                                                                                    const _errs106 = errors;
                                                                                                                    if (errors === _errs106) {
                                                                                                                        if (typeof data35 === "string") {
                                                                                                                            if (!pattern3.test(data35)) {
                                                                                                                                validate24.errors = [{ instancePath: instancePath + "/descriptor/datePublished", schemaPath: "https://identity.foundation/dwn/json-schemas/defs.json#/definitions/date-time/pattern", keyword: "pattern", params: { pattern: "^\\d{4}-[0-1]\\d-[0-3]\\dT(?:[0-2]\\d:[0-5]\\d:[0-5]\\d|23:59:60)\\.\\d{6}Z$" }, message: "must match pattern \"" + "^\\d{4}-[0-1]\\d-[0-3]\\dT(?:[0-2]\\d:[0-5]\\d:[0-5]\\d|23:59:60)\\.\\d{6}Z$" + "\"" }];
                                                                                                                                return false;
                                                                                                                            }
                                                                                                                        }
                                                                                                                        else {
                                                                                                                            validate24.errors = [{ instancePath: instancePath + "/descriptor/datePublished", schemaPath: "https://identity.foundation/dwn/json-schemas/defs.json#/definitions/date-time/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                                                                                            return false;
                                                                                                                        }
                                                                                                                    }
                                                                                                                    var valid25 = _errs105 === errors;
                                                                                                                }
                                                                                                                else {
                                                                                                                    var valid25 = true;
                                                                                                                }
                                                                                                                if (valid25) {
                                                                                                                    if (data20.dataFormat !== undefined) {
                                                                                                                        const _errs108 = errors;
                                                                                                                        if (typeof data20.dataFormat !== "string") {
                                                                                                                            validate24.errors = [{ instancePath: instancePath + "/descriptor/dataFormat", schemaPath: "#/properties/descriptor/properties/dataFormat/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                                                                                            return false;
                                                                                                                        }
                                                                                                                        var valid25 = _errs108 === errors;
                                                                                                                    }
                                                                                                                    else {
                                                                                                                        var valid25 = true;
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                else {
                                                    validate24.errors = [{ instancePath: instancePath + "/descriptor", schemaPath: "#/properties/descriptor/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
                                                    return false;
                                                }
                                            }
                                            var valid8 = _errs57 === errors;
                                        }
                                        else {
                                            var valid8 = true;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        else {
            validate24.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
            return false;
        }
    }
    validate24.errors = vErrors;
    return errors === 0;
}
function validate23(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) { let vErrors = null; let errors = 0; if (!(validate24(data, { instancePath, parentData, parentDataProperty, rootData }))) {
    vErrors = vErrors === null ? validate24.errors : vErrors.concat(validate24.errors);
    errors = vErrors.length;
}
else {
    const _errs0 = errors;
    if (errors === _errs0) {
        if (data && typeof data == "object" && !Array.isArray(data)) {
            let missing0;
            if (((data.recordId === undefined) && (missing0 = "recordId")) || ((data.authorization === undefined) && (missing0 = "authorization"))) {
                validate23.errors = [{ instancePath, schemaPath: "#/allOf/0/required", keyword: "required", params: { missingProperty: missing0 }, message: "must have required property '" + missing0 + "'" }];
                return false;
            }
        }
        else {
            validate23.errors = [{ instancePath, schemaPath: "#/allOf/0/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
            return false;
        }
    }
} validate23.errors = vErrors; return errors === 0; }
export const RecordsWriteUnidentified = validate24;
export const EventsGet = validate31;
const schema38 = { "$schema": "http://json-schema.org/draft-07/schema#", "$id": "https://identity.foundation/dwn/json-schemas/events-get.json", "type": "object", "additionalProperties": false, "required": ["authorization", "descriptor"], "properties": { "authorization": { "$ref": "https://identity.foundation/dwn/json-schemas/authorization.json" }, "descriptor": { "type": "object", "additionalProperties": false, "required": ["interface", "method", "messageTimestamp"], "properties": { "interface": { "enum": ["Events"], "type": "string" }, "method": { "enum": ["Get"], "type": "string" }, "messageTimestamp": { "type": "string" }, "watermark": { "type": "string" } } } } };
function validate31(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) { /*# sourceURL="https://identity.foundation/dwn/json-schemas/events-get.json" */ ; let vErrors = null; let errors = 0; if (errors === 0) {
    if (data && typeof data == "object" && !Array.isArray(data)) {
        let missing0;
        if (((data.authorization === undefined) && (missing0 = "authorization")) || ((data.descriptor === undefined) && (missing0 = "descriptor"))) {
            validate31.errors = [{ instancePath, schemaPath: "#/required", keyword: "required", params: { missingProperty: missing0 }, message: "must have required property '" + missing0 + "'" }];
            return false;
        }
        else {
            const _errs1 = errors;
            for (const key0 in data) {
                if (!((key0 === "authorization") || (key0 === "descriptor"))) {
                    validate31.errors = [{ instancePath, schemaPath: "#/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties" }];
                    return false;
                    break;
                }
            }
            if (_errs1 === errors) {
                if (data.authorization !== undefined) {
                    const _errs2 = errors;
                    if (!(validate10(data.authorization, { instancePath: instancePath + "/authorization", parentData: data, parentDataProperty: "authorization", rootData }))) {
                        vErrors = vErrors === null ? validate10.errors : vErrors.concat(validate10.errors);
                        errors = vErrors.length;
                    }
                    var valid0 = _errs2 === errors;
                }
                else {
                    var valid0 = true;
                }
                if (valid0) {
                    if (data.descriptor !== undefined) {
                        let data1 = data.descriptor;
                        const _errs3 = errors;
                        if (errors === _errs3) {
                            if (data1 && typeof data1 == "object" && !Array.isArray(data1)) {
                                let missing1;
                                if ((((data1.interface === undefined) && (missing1 = "interface")) || ((data1.method === undefined) && (missing1 = "method"))) || ((data1.messageTimestamp === undefined) && (missing1 = "messageTimestamp"))) {
                                    validate31.errors = [{ instancePath: instancePath + "/descriptor", schemaPath: "#/properties/descriptor/required", keyword: "required", params: { missingProperty: missing1 }, message: "must have required property '" + missing1 + "'" }];
                                    return false;
                                }
                                else {
                                    const _errs5 = errors;
                                    for (const key1 in data1) {
                                        if (!((((key1 === "interface") || (key1 === "method")) || (key1 === "messageTimestamp")) || (key1 === "watermark"))) {
                                            validate31.errors = [{ instancePath: instancePath + "/descriptor", schemaPath: "#/properties/descriptor/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key1 }, message: "must NOT have additional properties" }];
                                            return false;
                                            break;
                                        }
                                    }
                                    if (_errs5 === errors) {
                                        if (data1.interface !== undefined) {
                                            let data2 = data1.interface;
                                            const _errs6 = errors;
                                            if (typeof data2 !== "string") {
                                                validate31.errors = [{ instancePath: instancePath + "/descriptor/interface", schemaPath: "#/properties/descriptor/properties/interface/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                return false;
                                            }
                                            if (!(data2 === "Events")) {
                                                validate31.errors = [{ instancePath: instancePath + "/descriptor/interface", schemaPath: "#/properties/descriptor/properties/interface/enum", keyword: "enum", params: { allowedValues: schema38.properties.descriptor.properties.interface.enum }, message: "must be equal to one of the allowed values" }];
                                                return false;
                                            }
                                            var valid1 = _errs6 === errors;
                                        }
                                        else {
                                            var valid1 = true;
                                        }
                                        if (valid1) {
                                            if (data1.method !== undefined) {
                                                let data3 = data1.method;
                                                const _errs8 = errors;
                                                if (typeof data3 !== "string") {
                                                    validate31.errors = [{ instancePath: instancePath + "/descriptor/method", schemaPath: "#/properties/descriptor/properties/method/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                    return false;
                                                }
                                                if (!(data3 === "Get")) {
                                                    validate31.errors = [{ instancePath: instancePath + "/descriptor/method", schemaPath: "#/properties/descriptor/properties/method/enum", keyword: "enum", params: { allowedValues: schema38.properties.descriptor.properties.method.enum }, message: "must be equal to one of the allowed values" }];
                                                    return false;
                                                }
                                                var valid1 = _errs8 === errors;
                                            }
                                            else {
                                                var valid1 = true;
                                            }
                                            if (valid1) {
                                                if (data1.messageTimestamp !== undefined) {
                                                    const _errs10 = errors;
                                                    if (typeof data1.messageTimestamp !== "string") {
                                                        validate31.errors = [{ instancePath: instancePath + "/descriptor/messageTimestamp", schemaPath: "#/properties/descriptor/properties/messageTimestamp/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                        return false;
                                                    }
                                                    var valid1 = _errs10 === errors;
                                                }
                                                else {
                                                    var valid1 = true;
                                                }
                                                if (valid1) {
                                                    if (data1.watermark !== undefined) {
                                                        const _errs12 = errors;
                                                        if (typeof data1.watermark !== "string") {
                                                            validate31.errors = [{ instancePath: instancePath + "/descriptor/watermark", schemaPath: "#/properties/descriptor/properties/watermark/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                            return false;
                                                        }
                                                        var valid1 = _errs12 === errors;
                                                    }
                                                    else {
                                                        var valid1 = true;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            else {
                                validate31.errors = [{ instancePath: instancePath + "/descriptor", schemaPath: "#/properties/descriptor/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
                                return false;
                            }
                        }
                        var valid0 = _errs3 === errors;
                    }
                    else {
                        var valid0 = true;
                    }
                }
            }
        }
    }
    else {
        validate31.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
        return false;
    }
} validate31.errors = vErrors; return errors === 0; }
export const Definitions = validate12;
const schema13 = { "$schema": "http://json-schema.org/draft-07/schema#", "$id": "https://identity.foundation/dwn/json-schemas/defs.json", "type": "object", "definitions": { "base64url": { "type": "string", "pattern": "^[A-Za-z0-9_-]+$" }, "uuid": { "type": "string", "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$" }, "did": { "type": "string", "pattern": "^did:([a-z0-9]+):((?:(?:[a-zA-Z0-9._-]|(?:%[0-9a-fA-F]{2}))*:)*((?:[a-zA-Z0-9._-]|(?:%[0-9a-fA-F]{2}))+))((;[a-zA-Z0-9_.:%-]+=[a-zA-Z0-9_.:%-]*)*)(/[^#?]*)?([?][^#]*)?(#.*)?$" }, "date-time": { "type": "string", "pattern": "^\\d{4}-[0-1]\\d-[0-3]\\dT(?:[0-2]\\d:[0-5]\\d:[0-5]\\d|23:59:60)\\.\\d{6}Z$" } } };
function validate12(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) { /*# sourceURL="https://identity.foundation/dwn/json-schemas/defs.json" */ ; let vErrors = null; let errors = 0; if (!(data && typeof data == "object" && !Array.isArray(data))) {
    validate12.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
    return false;
} validate12.errors = vErrors; return errors === 0; }
export const GeneralJwk = validate33;
function validate33(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) { /*# sourceURL="https://identity.foundation/dwn/json-schemas/general-jwk.json" */ ; let vErrors = null; let errors = 0; const _errs1 = errors; let valid0 = false; let passing0 = null; const _errs2 = errors; if (data && typeof data == "object" && !Array.isArray(data)) {
    let missing0;
    if (((data.crv === undefined) && (missing0 = "crv")) || ((data.x === undefined) && (missing0 = "x"))) {
        const err0 = { instancePath, schemaPath: "#/oneOf/0/required", keyword: "required", params: { missingProperty: missing0 }, message: "must have required property '" + missing0 + "'" };
        if (vErrors === null) {
            vErrors = [err0];
        }
        else {
            vErrors.push(err0);
        }
        errors++;
    }
    else {
        if (data.kty !== undefined) {
            const _errs3 = errors;
            if ("EC" !== data.kty) {
                const err1 = { instancePath: instancePath + "/kty", schemaPath: "#/oneOf/0/properties/kty/const", keyword: "const", params: { allowedValue: "EC" }, message: "must be equal to constant" };
                if (vErrors === null) {
                    vErrors = [err1];
                }
                else {
                    vErrors.push(err1);
                }
                errors++;
            }
            var valid1 = _errs3 === errors;
        }
        else {
            var valid1 = true;
        }
        if (valid1) {
            if (data.crv !== undefined) {
                const _errs4 = errors;
                if (typeof data.crv !== "string") {
                    const err2 = { instancePath: instancePath + "/crv", schemaPath: "#/oneOf/0/properties/crv/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                    if (vErrors === null) {
                        vErrors = [err2];
                    }
                    else {
                        vErrors.push(err2);
                    }
                    errors++;
                }
                var valid1 = _errs4 === errors;
            }
            else {
                var valid1 = true;
            }
            if (valid1) {
                if (data.x !== undefined) {
                    const _errs6 = errors;
                    if (typeof data.x !== "string") {
                        const err3 = { instancePath: instancePath + "/x", schemaPath: "#/oneOf/0/properties/x/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                        if (vErrors === null) {
                            vErrors = [err3];
                        }
                        else {
                            vErrors.push(err3);
                        }
                        errors++;
                    }
                    var valid1 = _errs6 === errors;
                }
                else {
                    var valid1 = true;
                }
                if (valid1) {
                    if (data.y !== undefined) {
                        const _errs8 = errors;
                        if (typeof data.y !== "string") {
                            const err4 = { instancePath: instancePath + "/y", schemaPath: "#/oneOf/0/properties/y/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                            if (vErrors === null) {
                                vErrors = [err4];
                            }
                            else {
                                vErrors.push(err4);
                            }
                            errors++;
                        }
                        var valid1 = _errs8 === errors;
                    }
                    else {
                        var valid1 = true;
                    }
                    if (valid1) {
                        if (data.d !== undefined) {
                            const _errs10 = errors;
                            if (typeof data.d !== "string") {
                                const err5 = { instancePath: instancePath + "/d", schemaPath: "#/oneOf/0/properties/d/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                                if (vErrors === null) {
                                    vErrors = [err5];
                                }
                                else {
                                    vErrors.push(err5);
                                }
                                errors++;
                            }
                            var valid1 = _errs10 === errors;
                        }
                        else {
                            var valid1 = true;
                        }
                    }
                }
            }
        }
    }
} var _valid0 = _errs2 === errors; if (_valid0) {
    valid0 = true;
    passing0 = 0;
} const _errs12 = errors; if (data && typeof data == "object" && !Array.isArray(data)) {
    let missing1;
    if (((data.crv === undefined) && (missing1 = "crv")) || ((data.x === undefined) && (missing1 = "x"))) {
        const err6 = { instancePath, schemaPath: "#/oneOf/1/required", keyword: "required", params: { missingProperty: missing1 }, message: "must have required property '" + missing1 + "'" };
        if (vErrors === null) {
            vErrors = [err6];
        }
        else {
            vErrors.push(err6);
        }
        errors++;
    }
    else {
        if (data.kty !== undefined) {
            const _errs13 = errors;
            if ("OKP" !== data.kty) {
                const err7 = { instancePath: instancePath + "/kty", schemaPath: "#/oneOf/1/properties/kty/const", keyword: "const", params: { allowedValue: "OKP" }, message: "must be equal to constant" };
                if (vErrors === null) {
                    vErrors = [err7];
                }
                else {
                    vErrors.push(err7);
                }
                errors++;
            }
            var valid2 = _errs13 === errors;
        }
        else {
            var valid2 = true;
        }
        if (valid2) {
            if (data.crv !== undefined) {
                const _errs14 = errors;
                if (typeof data.crv !== "string") {
                    const err8 = { instancePath: instancePath + "/crv", schemaPath: "#/oneOf/1/properties/crv/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                    if (vErrors === null) {
                        vErrors = [err8];
                    }
                    else {
                        vErrors.push(err8);
                    }
                    errors++;
                }
                var valid2 = _errs14 === errors;
            }
            else {
                var valid2 = true;
            }
            if (valid2) {
                if (data.x !== undefined) {
                    const _errs16 = errors;
                    if (typeof data.x !== "string") {
                        const err9 = { instancePath: instancePath + "/x", schemaPath: "#/oneOf/1/properties/x/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                        if (vErrors === null) {
                            vErrors = [err9];
                        }
                        else {
                            vErrors.push(err9);
                        }
                        errors++;
                    }
                    var valid2 = _errs16 === errors;
                }
                else {
                    var valid2 = true;
                }
                if (valid2) {
                    if (data.d !== undefined) {
                        const _errs18 = errors;
                        if (typeof data.d !== "string") {
                            const err10 = { instancePath: instancePath + "/d", schemaPath: "#/oneOf/1/properties/d/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                            if (vErrors === null) {
                                vErrors = [err10];
                            }
                            else {
                                vErrors.push(err10);
                            }
                            errors++;
                        }
                        var valid2 = _errs18 === errors;
                    }
                    else {
                        var valid2 = true;
                    }
                }
            }
        }
    }
} var _valid0 = _errs12 === errors; if (_valid0 && valid0) {
    valid0 = false;
    passing0 = [passing0, 1];
}
else {
    if (_valid0) {
        valid0 = true;
        passing0 = 1;
    }
    const _errs20 = errors;
    if (data && typeof data == "object" && !Array.isArray(data)) {
        let missing2;
        if (((data.n === undefined) && (missing2 = "n")) || ((data.e === undefined) && (missing2 = "e"))) {
            const err11 = { instancePath, schemaPath: "#/oneOf/2/required", keyword: "required", params: { missingProperty: missing2 }, message: "must have required property '" + missing2 + "'" };
            if (vErrors === null) {
                vErrors = [err11];
            }
            else {
                vErrors.push(err11);
            }
            errors++;
        }
        else {
            if (data.kty !== undefined) {
                const _errs21 = errors;
                if ("RSA" !== data.kty) {
                    const err12 = { instancePath: instancePath + "/kty", schemaPath: "#/oneOf/2/properties/kty/const", keyword: "const", params: { allowedValue: "RSA" }, message: "must be equal to constant" };
                    if (vErrors === null) {
                        vErrors = [err12];
                    }
                    else {
                        vErrors.push(err12);
                    }
                    errors++;
                }
                var valid3 = _errs21 === errors;
            }
            else {
                var valid3 = true;
            }
            if (valid3) {
                if (data.n !== undefined) {
                    const _errs22 = errors;
                    if (typeof data.n !== "string") {
                        const err13 = { instancePath: instancePath + "/n", schemaPath: "#/oneOf/2/properties/n/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                        if (vErrors === null) {
                            vErrors = [err13];
                        }
                        else {
                            vErrors.push(err13);
                        }
                        errors++;
                    }
                    var valid3 = _errs22 === errors;
                }
                else {
                    var valid3 = true;
                }
                if (valid3) {
                    if (data.e !== undefined) {
                        const _errs24 = errors;
                        if (typeof data.e !== "string") {
                            const err14 = { instancePath: instancePath + "/e", schemaPath: "#/oneOf/2/properties/e/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                            if (vErrors === null) {
                                vErrors = [err14];
                            }
                            else {
                                vErrors.push(err14);
                            }
                            errors++;
                        }
                        var valid3 = _errs24 === errors;
                    }
                    else {
                        var valid3 = true;
                    }
                    if (valid3) {
                        if (data.d !== undefined) {
                            const _errs26 = errors;
                            if (typeof data.d !== "string") {
                                const err15 = { instancePath: instancePath + "/d", schemaPath: "#/oneOf/2/properties/d/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                                if (vErrors === null) {
                                    vErrors = [err15];
                                }
                                else {
                                    vErrors.push(err15);
                                }
                                errors++;
                            }
                            var valid3 = _errs26 === errors;
                        }
                        else {
                            var valid3 = true;
                        }
                        if (valid3) {
                            if (data.p !== undefined) {
                                const _errs28 = errors;
                                if (typeof data.p !== "string") {
                                    const err16 = { instancePath: instancePath + "/p", schemaPath: "#/oneOf/2/properties/p/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                                    if (vErrors === null) {
                                        vErrors = [err16];
                                    }
                                    else {
                                        vErrors.push(err16);
                                    }
                                    errors++;
                                }
                                var valid3 = _errs28 === errors;
                            }
                            else {
                                var valid3 = true;
                            }
                            if (valid3) {
                                if (data.q !== undefined) {
                                    const _errs30 = errors;
                                    if (typeof data.q !== "string") {
                                        const err17 = { instancePath: instancePath + "/q", schemaPath: "#/oneOf/2/properties/q/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                                        if (vErrors === null) {
                                            vErrors = [err17];
                                        }
                                        else {
                                            vErrors.push(err17);
                                        }
                                        errors++;
                                    }
                                    var valid3 = _errs30 === errors;
                                }
                                else {
                                    var valid3 = true;
                                }
                                if (valid3) {
                                    if (data.dp !== undefined) {
                                        const _errs32 = errors;
                                        if (typeof data.dp !== "string") {
                                            const err18 = { instancePath: instancePath + "/dp", schemaPath: "#/oneOf/2/properties/dp/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                                            if (vErrors === null) {
                                                vErrors = [err18];
                                            }
                                            else {
                                                vErrors.push(err18);
                                            }
                                            errors++;
                                        }
                                        var valid3 = _errs32 === errors;
                                    }
                                    else {
                                        var valid3 = true;
                                    }
                                    if (valid3) {
                                        if (data.dq !== undefined) {
                                            const _errs34 = errors;
                                            if (typeof data.dq !== "string") {
                                                const err19 = { instancePath: instancePath + "/dq", schemaPath: "#/oneOf/2/properties/dq/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                                                if (vErrors === null) {
                                                    vErrors = [err19];
                                                }
                                                else {
                                                    vErrors.push(err19);
                                                }
                                                errors++;
                                            }
                                            var valid3 = _errs34 === errors;
                                        }
                                        else {
                                            var valid3 = true;
                                        }
                                        if (valid3) {
                                            if (data.qi !== undefined) {
                                                const _errs36 = errors;
                                                if (typeof data.qi !== "string") {
                                                    const err20 = { instancePath: instancePath + "/qi", schemaPath: "#/oneOf/2/properties/qi/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                                                    if (vErrors === null) {
                                                        vErrors = [err20];
                                                    }
                                                    else {
                                                        vErrors.push(err20);
                                                    }
                                                    errors++;
                                                }
                                                var valid3 = _errs36 === errors;
                                            }
                                            else {
                                                var valid3 = true;
                                            }
                                            if (valid3) {
                                                if (data.oth !== undefined) {
                                                    let data18 = data.oth;
                                                    const _errs38 = errors;
                                                    if (!(data18 && typeof data18 == "object" && !Array.isArray(data18))) {
                                                        const err21 = { instancePath: instancePath + "/oth", schemaPath: "#/oneOf/2/properties/oth/type", keyword: "type", params: { type: "object" }, message: "must be object" };
                                                        if (vErrors === null) {
                                                            vErrors = [err21];
                                                        }
                                                        else {
                                                            vErrors.push(err21);
                                                        }
                                                        errors++;
                                                    }
                                                    var valid3 = _errs38 === errors;
                                                }
                                                else {
                                                    var valid3 = true;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    var _valid0 = _errs20 === errors;
    if (_valid0 && valid0) {
        valid0 = false;
        passing0 = [passing0, 2];
    }
    else {
        if (_valid0) {
            valid0 = true;
            passing0 = 2;
        }
        const _errs40 = errors;
        if (data && typeof data == "object" && !Array.isArray(data)) {
            let missing3;
            if ((data.k === undefined) && (missing3 = "k")) {
                const err22 = { instancePath, schemaPath: "#/oneOf/3/required", keyword: "required", params: { missingProperty: missing3 }, message: "must have required property '" + missing3 + "'" };
                if (vErrors === null) {
                    vErrors = [err22];
                }
                else {
                    vErrors.push(err22);
                }
                errors++;
            }
            else {
                if (data.kty !== undefined) {
                    const _errs41 = errors;
                    if ("oct" !== data.kty) {
                        const err23 = { instancePath: instancePath + "/kty", schemaPath: "#/oneOf/3/properties/kty/const", keyword: "const", params: { allowedValue: "oct" }, message: "must be equal to constant" };
                        if (vErrors === null) {
                            vErrors = [err23];
                        }
                        else {
                            vErrors.push(err23);
                        }
                        errors++;
                    }
                    var valid4 = _errs41 === errors;
                }
                else {
                    var valid4 = true;
                }
                if (valid4) {
                    if (data.k !== undefined) {
                        const _errs42 = errors;
                        if (typeof data.k !== "string") {
                            const err24 = { instancePath: instancePath + "/k", schemaPath: "#/oneOf/3/properties/k/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                            if (vErrors === null) {
                                vErrors = [err24];
                            }
                            else {
                                vErrors.push(err24);
                            }
                            errors++;
                        }
                        var valid4 = _errs42 === errors;
                    }
                    else {
                        var valid4 = true;
                    }
                }
            }
        }
        var _valid0 = _errs40 === errors;
        if (_valid0 && valid0) {
            valid0 = false;
            passing0 = [passing0, 3];
        }
        else {
            if (_valid0) {
                valid0 = true;
                passing0 = 3;
            }
        }
    }
} if (!valid0) {
    const err25 = { instancePath, schemaPath: "#/oneOf", keyword: "oneOf", params: { passingSchemas: passing0 }, message: "must match exactly one schema in oneOf" };
    if (vErrors === null) {
        vErrors = [err25];
    }
    else {
        vErrors.push(err25);
    }
    errors++;
    validate33.errors = vErrors;
    return false;
}
else {
    errors = _errs1;
    if (vErrors !== null) {
        if (_errs1) {
            vErrors.length = _errs1;
        }
        else {
            vErrors = null;
        }
    }
} if (errors === 0) {
    if (data && typeof data == "object" && !Array.isArray(data)) {
        let missing4;
        if ((data.kty === undefined) && (missing4 = "kty")) {
            validate33.errors = [{ instancePath, schemaPath: "#/required", keyword: "required", params: { missingProperty: missing4 }, message: "must have required property '" + missing4 + "'" }];
            return false;
        }
        else {
            if (data.alg !== undefined) {
                const _errs44 = errors;
                if (typeof data.alg !== "string") {
                    validate33.errors = [{ instancePath: instancePath + "/alg", schemaPath: "#/properties/alg/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                    return false;
                }
                var valid5 = _errs44 === errors;
            }
            else {
                var valid5 = true;
            }
            if (valid5) {
                if (data.kid !== undefined) {
                    const _errs46 = errors;
                    if (typeof data.kid !== "string") {
                        validate33.errors = [{ instancePath: instancePath + "/kid", schemaPath: "#/properties/kid/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                        return false;
                    }
                    var valid5 = _errs46 === errors;
                }
                else {
                    var valid5 = true;
                }
                if (valid5) {
                    if (data.kty !== undefined) {
                        let data23 = data.kty;
                        const _errs48 = errors;
                        if (!((((data23 === "EC") || (data23 === "RSA")) || (data23 === "oct")) || (data23 === "OKP"))) {
                            validate33.errors = [{ instancePath: instancePath + "/kty", schemaPath: "#/properties/kty/enum", keyword: "enum", params: { allowedValues: schema30.properties.kty.enum }, message: "must be equal to one of the allowed values" }];
                            return false;
                        }
                        var valid5 = _errs48 === errors;
                    }
                    else {
                        var valid5 = true;
                    }
                    if (valid5) {
                        if (data.crv !== undefined) {
                            const _errs49 = errors;
                            if (typeof data.crv !== "string") {
                                validate33.errors = [{ instancePath: instancePath + "/crv", schemaPath: "#/properties/crv/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                return false;
                            }
                            var valid5 = _errs49 === errors;
                        }
                        else {
                            var valid5 = true;
                        }
                        if (valid5) {
                            if (data.use !== undefined) {
                                const _errs51 = errors;
                                if (typeof data.use !== "string") {
                                    validate33.errors = [{ instancePath: instancePath + "/use", schemaPath: "#/properties/use/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                    return false;
                                }
                                var valid5 = _errs51 === errors;
                            }
                            else {
                                var valid5 = true;
                            }
                            if (valid5) {
                                if (data.key_ops !== undefined) {
                                    const _errs53 = errors;
                                    if (typeof data.key_ops !== "string") {
                                        validate33.errors = [{ instancePath: instancePath + "/key_ops", schemaPath: "#/properties/key_ops/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                        return false;
                                    }
                                    var valid5 = _errs53 === errors;
                                }
                                else {
                                    var valid5 = true;
                                }
                                if (valid5) {
                                    if (data.x5u !== undefined) {
                                        const _errs55 = errors;
                                        if (typeof data.x5u !== "string") {
                                            validate33.errors = [{ instancePath: instancePath + "/x5u", schemaPath: "#/properties/x5u/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                            return false;
                                        }
                                        var valid5 = _errs55 === errors;
                                    }
                                    else {
                                        var valid5 = true;
                                    }
                                    if (valid5) {
                                        if (data.x5c !== undefined) {
                                            const _errs57 = errors;
                                            if (typeof data.x5c !== "string") {
                                                validate33.errors = [{ instancePath: instancePath + "/x5c", schemaPath: "#/properties/x5c/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                return false;
                                            }
                                            var valid5 = _errs57 === errors;
                                        }
                                        else {
                                            var valid5 = true;
                                        }
                                        if (valid5) {
                                            if (data.x5t !== undefined) {
                                                const _errs59 = errors;
                                                if (typeof data.x5t !== "string") {
                                                    validate33.errors = [{ instancePath: instancePath + "/x5t", schemaPath: "#/properties/x5t/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                    return false;
                                                }
                                                var valid5 = _errs59 === errors;
                                            }
                                            else {
                                                var valid5 = true;
                                            }
                                            if (valid5) {
                                                if (data["x5t#S256"] !== undefined) {
                                                    const _errs61 = errors;
                                                    if (typeof data["x5t#S256"] !== "string") {
                                                        validate33.errors = [{ instancePath: instancePath + "/x5t#S256", schemaPath: "#/properties/x5t%23S256/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                        return false;
                                                    }
                                                    var valid5 = _errs61 === errors;
                                                }
                                                else {
                                                    var valid5 = true;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    else {
        validate33.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
        return false;
    }
} validate33.errors = vErrors; return errors === 0; }
export const GeneralJws = validate11;
export const JwkVerificationMethod = validate34;
const schema40 = { "$id": "https://identity.foundation/dwn/json-schemas/jwk-verification-method.json", "$schema": "http://json-schema.org/draft-07/schema#", "type": "object", "additionalProperties": false, "required": ["id", "type", "controller", "publicKeyJwk"], "properties": { "id": { "type": "string" }, "type": { "const": "JsonWebKey2020" }, "controller": { "$ref": "https://identity.foundation/dwn/json-schemas/defs.json#/definitions/did" }, "publicKeyJwk": { "$ref": "https://identity.foundation/dwn/json-schemas/public-jwk.json" } } };
function validate34(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) { /*# sourceURL="https://identity.foundation/dwn/json-schemas/jwk-verification-method.json" */ ; let vErrors = null; let errors = 0; if (errors === 0) {
    if (data && typeof data == "object" && !Array.isArray(data)) {
        let missing0;
        if (((((data.id === undefined) && (missing0 = "id")) || ((data.type === undefined) && (missing0 = "type"))) || ((data.controller === undefined) && (missing0 = "controller"))) || ((data.publicKeyJwk === undefined) && (missing0 = "publicKeyJwk"))) {
            validate34.errors = [{ instancePath, schemaPath: "#/required", keyword: "required", params: { missingProperty: missing0 }, message: "must have required property '" + missing0 + "'" }];
            return false;
        }
        else {
            const _errs1 = errors;
            for (const key0 in data) {
                if (!((((key0 === "id") || (key0 === "type")) || (key0 === "controller")) || (key0 === "publicKeyJwk"))) {
                    validate34.errors = [{ instancePath, schemaPath: "#/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties" }];
                    return false;
                    break;
                }
            }
            if (_errs1 === errors) {
                if (data.id !== undefined) {
                    const _errs2 = errors;
                    if (typeof data.id !== "string") {
                        validate34.errors = [{ instancePath: instancePath + "/id", schemaPath: "#/properties/id/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                        return false;
                    }
                    var valid0 = _errs2 === errors;
                }
                else {
                    var valid0 = true;
                }
                if (valid0) {
                    if (data.type !== undefined) {
                        const _errs4 = errors;
                        if ("JsonWebKey2020" !== data.type) {
                            validate34.errors = [{ instancePath: instancePath + "/type", schemaPath: "#/properties/type/const", keyword: "const", params: { allowedValue: "JsonWebKey2020" }, message: "must be equal to constant" }];
                            return false;
                        }
                        var valid0 = _errs4 === errors;
                    }
                    else {
                        var valid0 = true;
                    }
                    if (valid0) {
                        if (data.controller !== undefined) {
                            let data2 = data.controller;
                            const _errs5 = errors;
                            const _errs6 = errors;
                            if (errors === _errs6) {
                                if (typeof data2 === "string") {
                                    if (!pattern4.test(data2)) {
                                        validate34.errors = [{ instancePath: instancePath + "/controller", schemaPath: "https://identity.foundation/dwn/json-schemas/defs.json#/definitions/did/pattern", keyword: "pattern", params: { pattern: "^did:([a-z0-9]+):((?:(?:[a-zA-Z0-9._-]|(?:%[0-9a-fA-F]{2}))*:)*((?:[a-zA-Z0-9._-]|(?:%[0-9a-fA-F]{2}))+))((;[a-zA-Z0-9_.:%-]+=[a-zA-Z0-9_.:%-]*)*)(/[^#?]*)?([?][^#]*)?(#.*)?$" }, message: "must match pattern \"" + "^did:([a-z0-9]+):((?:(?:[a-zA-Z0-9._-]|(?:%[0-9a-fA-F]{2}))*:)*((?:[a-zA-Z0-9._-]|(?:%[0-9a-fA-F]{2}))+))((;[a-zA-Z0-9_.:%-]+=[a-zA-Z0-9_.:%-]*)*)(/[^#?]*)?([?][^#]*)?(#.*)?$" + "\"" }];
                                        return false;
                                    }
                                }
                                else {
                                    validate34.errors = [{ instancePath: instancePath + "/controller", schemaPath: "https://identity.foundation/dwn/json-schemas/defs.json#/definitions/did/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                    return false;
                                }
                            }
                            var valid0 = _errs5 === errors;
                        }
                        else {
                            var valid0 = true;
                        }
                        if (valid0) {
                            if (data.publicKeyJwk !== undefined) {
                                const _errs8 = errors;
                                if (!(validate27(data.publicKeyJwk, { instancePath: instancePath + "/publicKeyJwk", parentData: data, parentDataProperty: "publicKeyJwk", rootData }))) {
                                    vErrors = vErrors === null ? validate27.errors : vErrors.concat(validate27.errors);
                                    errors = vErrors.length;
                                }
                                var valid0 = _errs8 === errors;
                            }
                            else {
                                var valid0 = true;
                            }
                        }
                    }
                }
            }
        }
    }
    else {
        validate34.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
        return false;
    }
} validate34.errors = vErrors; return errors === 0; }
export const MessagesGet = validate36;
const schema42 = { "$schema": "http://json-schema.org/draft-07/schema#", "$id": "https://identity.foundation/dwn/json-schemas/messages-get.json", "type": "object", "additionalProperties": false, "required": ["authorization", "descriptor"], "properties": { "authorization": { "$ref": "https://identity.foundation/dwn/json-schemas/authorization.json" }, "descriptor": { "type": "object", "additionalProperties": false, "required": ["interface", "method", "messageTimestamp"], "properties": { "interface": { "enum": ["Messages"], "type": "string" }, "method": { "enum": ["Get"], "type": "string" }, "messageTimestamp": { "type": "string" }, "messageCids": { "type": "array", "items": { "type": "string" }, "minItems": 1 } } } } };
function validate36(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) { /*# sourceURL="https://identity.foundation/dwn/json-schemas/messages-get.json" */ ; let vErrors = null; let errors = 0; if (errors === 0) {
    if (data && typeof data == "object" && !Array.isArray(data)) {
        let missing0;
        if (((data.authorization === undefined) && (missing0 = "authorization")) || ((data.descriptor === undefined) && (missing0 = "descriptor"))) {
            validate36.errors = [{ instancePath, schemaPath: "#/required", keyword: "required", params: { missingProperty: missing0 }, message: "must have required property '" + missing0 + "'" }];
            return false;
        }
        else {
            const _errs1 = errors;
            for (const key0 in data) {
                if (!((key0 === "authorization") || (key0 === "descriptor"))) {
                    validate36.errors = [{ instancePath, schemaPath: "#/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties" }];
                    return false;
                    break;
                }
            }
            if (_errs1 === errors) {
                if (data.authorization !== undefined) {
                    const _errs2 = errors;
                    if (!(validate10(data.authorization, { instancePath: instancePath + "/authorization", parentData: data, parentDataProperty: "authorization", rootData }))) {
                        vErrors = vErrors === null ? validate10.errors : vErrors.concat(validate10.errors);
                        errors = vErrors.length;
                    }
                    var valid0 = _errs2 === errors;
                }
                else {
                    var valid0 = true;
                }
                if (valid0) {
                    if (data.descriptor !== undefined) {
                        let data1 = data.descriptor;
                        const _errs3 = errors;
                        if (errors === _errs3) {
                            if (data1 && typeof data1 == "object" && !Array.isArray(data1)) {
                                let missing1;
                                if ((((data1.interface === undefined) && (missing1 = "interface")) || ((data1.method === undefined) && (missing1 = "method"))) || ((data1.messageTimestamp === undefined) && (missing1 = "messageTimestamp"))) {
                                    validate36.errors = [{ instancePath: instancePath + "/descriptor", schemaPath: "#/properties/descriptor/required", keyword: "required", params: { missingProperty: missing1 }, message: "must have required property '" + missing1 + "'" }];
                                    return false;
                                }
                                else {
                                    const _errs5 = errors;
                                    for (const key1 in data1) {
                                        if (!((((key1 === "interface") || (key1 === "method")) || (key1 === "messageTimestamp")) || (key1 === "messageCids"))) {
                                            validate36.errors = [{ instancePath: instancePath + "/descriptor", schemaPath: "#/properties/descriptor/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key1 }, message: "must NOT have additional properties" }];
                                            return false;
                                            break;
                                        }
                                    }
                                    if (_errs5 === errors) {
                                        if (data1.interface !== undefined) {
                                            let data2 = data1.interface;
                                            const _errs6 = errors;
                                            if (typeof data2 !== "string") {
                                                validate36.errors = [{ instancePath: instancePath + "/descriptor/interface", schemaPath: "#/properties/descriptor/properties/interface/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                return false;
                                            }
                                            if (!(data2 === "Messages")) {
                                                validate36.errors = [{ instancePath: instancePath + "/descriptor/interface", schemaPath: "#/properties/descriptor/properties/interface/enum", keyword: "enum", params: { allowedValues: schema42.properties.descriptor.properties.interface.enum }, message: "must be equal to one of the allowed values" }];
                                                return false;
                                            }
                                            var valid1 = _errs6 === errors;
                                        }
                                        else {
                                            var valid1 = true;
                                        }
                                        if (valid1) {
                                            if (data1.method !== undefined) {
                                                let data3 = data1.method;
                                                const _errs8 = errors;
                                                if (typeof data3 !== "string") {
                                                    validate36.errors = [{ instancePath: instancePath + "/descriptor/method", schemaPath: "#/properties/descriptor/properties/method/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                    return false;
                                                }
                                                if (!(data3 === "Get")) {
                                                    validate36.errors = [{ instancePath: instancePath + "/descriptor/method", schemaPath: "#/properties/descriptor/properties/method/enum", keyword: "enum", params: { allowedValues: schema42.properties.descriptor.properties.method.enum }, message: "must be equal to one of the allowed values" }];
                                                    return false;
                                                }
                                                var valid1 = _errs8 === errors;
                                            }
                                            else {
                                                var valid1 = true;
                                            }
                                            if (valid1) {
                                                if (data1.messageTimestamp !== undefined) {
                                                    const _errs10 = errors;
                                                    if (typeof data1.messageTimestamp !== "string") {
                                                        validate36.errors = [{ instancePath: instancePath + "/descriptor/messageTimestamp", schemaPath: "#/properties/descriptor/properties/messageTimestamp/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                        return false;
                                                    }
                                                    var valid1 = _errs10 === errors;
                                                }
                                                else {
                                                    var valid1 = true;
                                                }
                                                if (valid1) {
                                                    if (data1.messageCids !== undefined) {
                                                        let data5 = data1.messageCids;
                                                        const _errs12 = errors;
                                                        if (errors === _errs12) {
                                                            if (Array.isArray(data5)) {
                                                                if (data5.length < 1) {
                                                                    validate36.errors = [{ instancePath: instancePath + "/descriptor/messageCids", schemaPath: "#/properties/descriptor/properties/messageCids/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }];
                                                                    return false;
                                                                }
                                                                else {
                                                                    var valid2 = true;
                                                                    const len0 = data5.length;
                                                                    for (let i0 = 0; i0 < len0; i0++) {
                                                                        const _errs14 = errors;
                                                                        if (typeof data5[i0] !== "string") {
                                                                            validate36.errors = [{ instancePath: instancePath + "/descriptor/messageCids/" + i0, schemaPath: "#/properties/descriptor/properties/messageCids/items/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                                            return false;
                                                                        }
                                                                        var valid2 = _errs14 === errors;
                                                                        if (!valid2) {
                                                                            break;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            else {
                                                                validate36.errors = [{ instancePath: instancePath + "/descriptor/messageCids", schemaPath: "#/properties/descriptor/properties/messageCids/type", keyword: "type", params: { type: "array" }, message: "must be array" }];
                                                                return false;
                                                            }
                                                        }
                                                        var valid1 = _errs12 === errors;
                                                    }
                                                    else {
                                                        var valid1 = true;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            else {
                                validate36.errors = [{ instancePath: instancePath + "/descriptor", schemaPath: "#/properties/descriptor/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
                                return false;
                            }
                        }
                        var valid0 = _errs3 === errors;
                    }
                    else {
                        var valid0 = true;
                    }
                }
            }
        }
    }
    else {
        validate36.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
        return false;
    }
} validate36.errors = vErrors; return errors === 0; }
export const PermissionsDefinitions = validate38;
const schema43 = { "$schema": "http://json-schema.org/draft-07/schema#", "$id": "https://identity.foundation/dwn/json-schemas/permissions/defs.json", "type": "object", "definitions": { "grantedTo": { "$ref": "https://identity.foundation/dwn/json-schemas/defs.json#/definitions/did" }, "grantedBy": { "$ref": "https://identity.foundation/dwn/json-schemas/defs.json#/definitions/did" }, "grantedFor": { "$ref": "https://identity.foundation/dwn/json-schemas/defs.json#/definitions/did" }, "scope": { "oneOf": [{ "$ref": "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/definitions/protocols-query-scope" }, { "$ref": "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/definitions/records-read-scope" }, { "$ref": "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/definitions/records-delete-scope" }, { "$ref": "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/definitions/records-write-scope" }] }, "conditions": { "type": "object", "additionalProperties": false, "properties": { "publication": { "enum": ["Required", "Prohibited"], "type": "string" } } } } };
function validate38(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) { /*# sourceURL="https://identity.foundation/dwn/json-schemas/permissions/defs.json" */ ; let vErrors = null; let errors = 0; if (!(data && typeof data == "object" && !Array.isArray(data))) {
    validate38.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
    return false;
} validate38.errors = vErrors; return errors === 0; }
export const PermissionsGrant = validate39;
const schema44 = { "$schema": "http://json-schema.org/draft-07/schema#", "$id": "https://identity.foundation/dwn/json-schemas/permissions-grant.json", "type": "object", "required": ["authorization", "descriptor"], "additionalProperties": false, "properties": { "authorization": { "$ref": "https://identity.foundation/dwn/json-schemas/authorization.json" }, "delegationChain": { "description": "the parent grant", "$ref": "#" }, "descriptor": { "type": "object", "additionalProperties": false, "required": ["interface", "method", "messageTimestamp", "dateExpires"], "properties": { "messageTimestamp": { "$ref": "https://identity.foundation/dwn/json-schemas/defs.json#/definitions/date-time" }, "dateExpires": { "$ref": "https://identity.foundation/dwn/json-schemas/defs.json#/definitions/date-time" }, "description": { "type": "string" }, "grantedTo": { "description": "DID of the grantee", "$ref": "https://identity.foundation/dwn/json-schemas/permissions/defs.json#/definitions/grantedTo" }, "grantedBy": { "description": "DID of the grantor", "$ref": "https://identity.foundation/dwn/json-schemas/permissions/defs.json#/definitions/grantedBy" }, "grantedFor": { "description": "DID of the DWN to which the grantee is given access", "$ref": "https://identity.foundation/dwn/json-schemas/permissions/defs.json#/definitions/grantedFor" }, "permissionsRequestId": { "description": "CID of an associated PermissionsRequest message", "type": "string" }, "interface": { "enum": ["Permissions"], "type": "string" }, "method": { "enum": ["Grant"], "type": "string" }, "scope": { "$ref": "https://identity.foundation/dwn/json-schemas/permissions/defs.json#/definitions/scope" }, "conditions": { "$ref": "https://identity.foundation/dwn/json-schemas/permissions/defs.json#/definitions/conditions" } } } } };
const schema56 = { "type": "object", "additionalProperties": false, "properties": { "publication": { "enum": ["Required", "Prohibited"], "type": "string" } } };
const schema50 = { "oneOf": [{ "$ref": "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/definitions/protocols-query-scope" }, { "$ref": "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/definitions/records-read-scope" }, { "$ref": "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/definitions/records-delete-scope" }, { "$ref": "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/definitions/records-write-scope" }] };
const schema52 = { "type": "object", "properties": { "interface": { "const": "Protocols" }, "method": { "const": "Query" } } };
const schema53 = { "type": "object", "required": ["interface", "method"], "properties": { "interface": { "const": "Records" }, "method": { "const": "Read" }, "schema": { "type": "string" }, "protocol": { "type": "string" }, "contextId": { "type": "string" }, "protocolPath": { "type": "string" } } };
const schema54 = { "type": "object", "required": ["interface", "method"], "properties": { "interface": { "const": "Records" }, "method": { "const": "Delete" }, "schema": { "type": "string" } } };
const schema55 = { "type": "object", "required": ["interface", "method"], "properties": { "interface": { "const": "Records" }, "method": { "const": "Write" }, "schema": { "type": "string" }, "protocol": { "type": "string" }, "contextId": { "type": "string" }, "protocolPath": { "type": "string" } } };
function validate41(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) { let vErrors = null; let errors = 0; const _errs0 = errors; let valid0 = false; let passing0 = null; const _errs1 = errors; const _errs2 = errors; if (errors === _errs2) {
    if (data && typeof data == "object" && !Array.isArray(data)) {
        if (data.interface !== undefined) {
            const _errs4 = errors;
            if ("Protocols" !== data.interface) {
                const err0 = { instancePath: instancePath + "/interface", schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/definitions/protocols-query-scope/properties/interface/const", keyword: "const", params: { allowedValue: "Protocols" }, message: "must be equal to constant" };
                if (vErrors === null) {
                    vErrors = [err0];
                }
                else {
                    vErrors.push(err0);
                }
                errors++;
            }
            var valid2 = _errs4 === errors;
        }
        else {
            var valid2 = true;
        }
        if (valid2) {
            if (data.method !== undefined) {
                const _errs5 = errors;
                if ("Query" !== data.method) {
                    const err1 = { instancePath: instancePath + "/method", schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/definitions/protocols-query-scope/properties/method/const", keyword: "const", params: { allowedValue: "Query" }, message: "must be equal to constant" };
                    if (vErrors === null) {
                        vErrors = [err1];
                    }
                    else {
                        vErrors.push(err1);
                    }
                    errors++;
                }
                var valid2 = _errs5 === errors;
            }
            else {
                var valid2 = true;
            }
        }
    }
    else {
        const err2 = { instancePath, schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/definitions/protocols-query-scope/type", keyword: "type", params: { type: "object" }, message: "must be object" };
        if (vErrors === null) {
            vErrors = [err2];
        }
        else {
            vErrors.push(err2);
        }
        errors++;
    }
} var _valid0 = _errs1 === errors; if (_valid0) {
    valid0 = true;
    passing0 = 0;
} const _errs6 = errors; const _errs7 = errors; if (errors === _errs7) {
    if (data && typeof data == "object" && !Array.isArray(data)) {
        let missing0;
        if (((data.interface === undefined) && (missing0 = "interface")) || ((data.method === undefined) && (missing0 = "method"))) {
            const err3 = { instancePath, schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/definitions/records-read-scope/required", keyword: "required", params: { missingProperty: missing0 }, message: "must have required property '" + missing0 + "'" };
            if (vErrors === null) {
                vErrors = [err3];
            }
            else {
                vErrors.push(err3);
            }
            errors++;
        }
        else {
            if (data.interface !== undefined) {
                const _errs9 = errors;
                if ("Records" !== data.interface) {
                    const err4 = { instancePath: instancePath + "/interface", schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/definitions/records-read-scope/properties/interface/const", keyword: "const", params: { allowedValue: "Records" }, message: "must be equal to constant" };
                    if (vErrors === null) {
                        vErrors = [err4];
                    }
                    else {
                        vErrors.push(err4);
                    }
                    errors++;
                }
                var valid4 = _errs9 === errors;
            }
            else {
                var valid4 = true;
            }
            if (valid4) {
                if (data.method !== undefined) {
                    const _errs10 = errors;
                    if ("Read" !== data.method) {
                        const err5 = { instancePath: instancePath + "/method", schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/definitions/records-read-scope/properties/method/const", keyword: "const", params: { allowedValue: "Read" }, message: "must be equal to constant" };
                        if (vErrors === null) {
                            vErrors = [err5];
                        }
                        else {
                            vErrors.push(err5);
                        }
                        errors++;
                    }
                    var valid4 = _errs10 === errors;
                }
                else {
                    var valid4 = true;
                }
                if (valid4) {
                    if (data.schema !== undefined) {
                        const _errs11 = errors;
                        if (typeof data.schema !== "string") {
                            const err6 = { instancePath: instancePath + "/schema", schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/definitions/records-read-scope/properties/schema/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                            if (vErrors === null) {
                                vErrors = [err6];
                            }
                            else {
                                vErrors.push(err6);
                            }
                            errors++;
                        }
                        var valid4 = _errs11 === errors;
                    }
                    else {
                        var valid4 = true;
                    }
                    if (valid4) {
                        if (data.protocol !== undefined) {
                            const _errs13 = errors;
                            if (typeof data.protocol !== "string") {
                                const err7 = { instancePath: instancePath + "/protocol", schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/definitions/records-read-scope/properties/protocol/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                                if (vErrors === null) {
                                    vErrors = [err7];
                                }
                                else {
                                    vErrors.push(err7);
                                }
                                errors++;
                            }
                            var valid4 = _errs13 === errors;
                        }
                        else {
                            var valid4 = true;
                        }
                        if (valid4) {
                            if (data.contextId !== undefined) {
                                const _errs15 = errors;
                                if (typeof data.contextId !== "string") {
                                    const err8 = { instancePath: instancePath + "/contextId", schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/definitions/records-read-scope/properties/contextId/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                                    if (vErrors === null) {
                                        vErrors = [err8];
                                    }
                                    else {
                                        vErrors.push(err8);
                                    }
                                    errors++;
                                }
                                var valid4 = _errs15 === errors;
                            }
                            else {
                                var valid4 = true;
                            }
                            if (valid4) {
                                if (data.protocolPath !== undefined) {
                                    const _errs17 = errors;
                                    if (typeof data.protocolPath !== "string") {
                                        const err9 = { instancePath: instancePath + "/protocolPath", schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/definitions/records-read-scope/properties/protocolPath/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                                        if (vErrors === null) {
                                            vErrors = [err9];
                                        }
                                        else {
                                            vErrors.push(err9);
                                        }
                                        errors++;
                                    }
                                    var valid4 = _errs17 === errors;
                                }
                                else {
                                    var valid4 = true;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    else {
        const err10 = { instancePath, schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/definitions/records-read-scope/type", keyword: "type", params: { type: "object" }, message: "must be object" };
        if (vErrors === null) {
            vErrors = [err10];
        }
        else {
            vErrors.push(err10);
        }
        errors++;
    }
} var _valid0 = _errs6 === errors; if (_valid0 && valid0) {
    valid0 = false;
    passing0 = [passing0, 1];
}
else {
    if (_valid0) {
        valid0 = true;
        passing0 = 1;
    }
    const _errs19 = errors;
    const _errs20 = errors;
    if (errors === _errs20) {
        if (data && typeof data == "object" && !Array.isArray(data)) {
            let missing1;
            if (((data.interface === undefined) && (missing1 = "interface")) || ((data.method === undefined) && (missing1 = "method"))) {
                const err11 = { instancePath, schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/definitions/records-delete-scope/required", keyword: "required", params: { missingProperty: missing1 }, message: "must have required property '" + missing1 + "'" };
                if (vErrors === null) {
                    vErrors = [err11];
                }
                else {
                    vErrors.push(err11);
                }
                errors++;
            }
            else {
                if (data.interface !== undefined) {
                    const _errs22 = errors;
                    if ("Records" !== data.interface) {
                        const err12 = { instancePath: instancePath + "/interface", schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/definitions/records-delete-scope/properties/interface/const", keyword: "const", params: { allowedValue: "Records" }, message: "must be equal to constant" };
                        if (vErrors === null) {
                            vErrors = [err12];
                        }
                        else {
                            vErrors.push(err12);
                        }
                        errors++;
                    }
                    var valid6 = _errs22 === errors;
                }
                else {
                    var valid6 = true;
                }
                if (valid6) {
                    if (data.method !== undefined) {
                        const _errs23 = errors;
                        if ("Delete" !== data.method) {
                            const err13 = { instancePath: instancePath + "/method", schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/definitions/records-delete-scope/properties/method/const", keyword: "const", params: { allowedValue: "Delete" }, message: "must be equal to constant" };
                            if (vErrors === null) {
                                vErrors = [err13];
                            }
                            else {
                                vErrors.push(err13);
                            }
                            errors++;
                        }
                        var valid6 = _errs23 === errors;
                    }
                    else {
                        var valid6 = true;
                    }
                    if (valid6) {
                        if (data.schema !== undefined) {
                            const _errs24 = errors;
                            if (typeof data.schema !== "string") {
                                const err14 = { instancePath: instancePath + "/schema", schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/definitions/records-delete-scope/properties/schema/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                                if (vErrors === null) {
                                    vErrors = [err14];
                                }
                                else {
                                    vErrors.push(err14);
                                }
                                errors++;
                            }
                            var valid6 = _errs24 === errors;
                        }
                        else {
                            var valid6 = true;
                        }
                    }
                }
            }
        }
        else {
            const err15 = { instancePath, schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/definitions/records-delete-scope/type", keyword: "type", params: { type: "object" }, message: "must be object" };
            if (vErrors === null) {
                vErrors = [err15];
            }
            else {
                vErrors.push(err15);
            }
            errors++;
        }
    }
    var _valid0 = _errs19 === errors;
    if (_valid0 && valid0) {
        valid0 = false;
        passing0 = [passing0, 2];
    }
    else {
        if (_valid0) {
            valid0 = true;
            passing0 = 2;
        }
        const _errs26 = errors;
        const _errs27 = errors;
        if (errors === _errs27) {
            if (data && typeof data == "object" && !Array.isArray(data)) {
                let missing2;
                if (((data.interface === undefined) && (missing2 = "interface")) || ((data.method === undefined) && (missing2 = "method"))) {
                    const err16 = { instancePath, schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/definitions/records-write-scope/required", keyword: "required", params: { missingProperty: missing2 }, message: "must have required property '" + missing2 + "'" };
                    if (vErrors === null) {
                        vErrors = [err16];
                    }
                    else {
                        vErrors.push(err16);
                    }
                    errors++;
                }
                else {
                    if (data.interface !== undefined) {
                        const _errs29 = errors;
                        if ("Records" !== data.interface) {
                            const err17 = { instancePath: instancePath + "/interface", schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/definitions/records-write-scope/properties/interface/const", keyword: "const", params: { allowedValue: "Records" }, message: "must be equal to constant" };
                            if (vErrors === null) {
                                vErrors = [err17];
                            }
                            else {
                                vErrors.push(err17);
                            }
                            errors++;
                        }
                        var valid8 = _errs29 === errors;
                    }
                    else {
                        var valid8 = true;
                    }
                    if (valid8) {
                        if (data.method !== undefined) {
                            const _errs30 = errors;
                            if ("Write" !== data.method) {
                                const err18 = { instancePath: instancePath + "/method", schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/definitions/records-write-scope/properties/method/const", keyword: "const", params: { allowedValue: "Write" }, message: "must be equal to constant" };
                                if (vErrors === null) {
                                    vErrors = [err18];
                                }
                                else {
                                    vErrors.push(err18);
                                }
                                errors++;
                            }
                            var valid8 = _errs30 === errors;
                        }
                        else {
                            var valid8 = true;
                        }
                        if (valid8) {
                            if (data.schema !== undefined) {
                                const _errs31 = errors;
                                if (typeof data.schema !== "string") {
                                    const err19 = { instancePath: instancePath + "/schema", schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/definitions/records-write-scope/properties/schema/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                                    if (vErrors === null) {
                                        vErrors = [err19];
                                    }
                                    else {
                                        vErrors.push(err19);
                                    }
                                    errors++;
                                }
                                var valid8 = _errs31 === errors;
                            }
                            else {
                                var valid8 = true;
                            }
                            if (valid8) {
                                if (data.protocol !== undefined) {
                                    const _errs33 = errors;
                                    if (typeof data.protocol !== "string") {
                                        const err20 = { instancePath: instancePath + "/protocol", schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/definitions/records-write-scope/properties/protocol/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                                        if (vErrors === null) {
                                            vErrors = [err20];
                                        }
                                        else {
                                            vErrors.push(err20);
                                        }
                                        errors++;
                                    }
                                    var valid8 = _errs33 === errors;
                                }
                                else {
                                    var valid8 = true;
                                }
                                if (valid8) {
                                    if (data.contextId !== undefined) {
                                        const _errs35 = errors;
                                        if (typeof data.contextId !== "string") {
                                            const err21 = { instancePath: instancePath + "/contextId", schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/definitions/records-write-scope/properties/contextId/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                                            if (vErrors === null) {
                                                vErrors = [err21];
                                            }
                                            else {
                                                vErrors.push(err21);
                                            }
                                            errors++;
                                        }
                                        var valid8 = _errs35 === errors;
                                    }
                                    else {
                                        var valid8 = true;
                                    }
                                    if (valid8) {
                                        if (data.protocolPath !== undefined) {
                                            const _errs37 = errors;
                                            if (typeof data.protocolPath !== "string") {
                                                const err22 = { instancePath: instancePath + "/protocolPath", schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/definitions/records-write-scope/properties/protocolPath/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                                                if (vErrors === null) {
                                                    vErrors = [err22];
                                                }
                                                else {
                                                    vErrors.push(err22);
                                                }
                                                errors++;
                                            }
                                            var valid8 = _errs37 === errors;
                                        }
                                        else {
                                            var valid8 = true;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            else {
                const err23 = { instancePath, schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/definitions/records-write-scope/type", keyword: "type", params: { type: "object" }, message: "must be object" };
                if (vErrors === null) {
                    vErrors = [err23];
                }
                else {
                    vErrors.push(err23);
                }
                errors++;
            }
        }
        var _valid0 = _errs26 === errors;
        if (_valid0 && valid0) {
            valid0 = false;
            passing0 = [passing0, 3];
        }
        else {
            if (_valid0) {
                valid0 = true;
                passing0 = 3;
            }
        }
    }
} if (!valid0) {
    const err24 = { instancePath, schemaPath: "#/oneOf", keyword: "oneOf", params: { passingSchemas: passing0 }, message: "must match exactly one schema in oneOf" };
    if (vErrors === null) {
        vErrors = [err24];
    }
    else {
        vErrors.push(err24);
    }
    errors++;
    validate41.errors = vErrors;
    return false;
}
else {
    errors = _errs0;
    if (vErrors !== null) {
        if (_errs0) {
            vErrors.length = _errs0;
        }
        else {
            vErrors = null;
        }
    }
} validate41.errors = vErrors; return errors === 0; }
function validate39(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) { /*# sourceURL="https://identity.foundation/dwn/json-schemas/permissions-grant.json" */ ; let vErrors = null; let errors = 0; if (errors === 0) {
    if (data && typeof data == "object" && !Array.isArray(data)) {
        let missing0;
        if (((data.authorization === undefined) && (missing0 = "authorization")) || ((data.descriptor === undefined) && (missing0 = "descriptor"))) {
            validate39.errors = [{ instancePath, schemaPath: "#/required", keyword: "required", params: { missingProperty: missing0 }, message: "must have required property '" + missing0 + "'" }];
            return false;
        }
        else {
            const _errs1 = errors;
            for (const key0 in data) {
                if (!(((key0 === "authorization") || (key0 === "delegationChain")) || (key0 === "descriptor"))) {
                    validate39.errors = [{ instancePath, schemaPath: "#/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties" }];
                    return false;
                    break;
                }
            }
            if (_errs1 === errors) {
                if (data.authorization !== undefined) {
                    const _errs2 = errors;
                    if (!(validate10(data.authorization, { instancePath: instancePath + "/authorization", parentData: data, parentDataProperty: "authorization", rootData }))) {
                        vErrors = vErrors === null ? validate10.errors : vErrors.concat(validate10.errors);
                        errors = vErrors.length;
                    }
                    var valid0 = _errs2 === errors;
                }
                else {
                    var valid0 = true;
                }
                if (valid0) {
                    if (data.delegationChain !== undefined) {
                        const _errs3 = errors;
                        if (!(validate39(data.delegationChain, { instancePath: instancePath + "/delegationChain", parentData: data, parentDataProperty: "delegationChain", rootData }))) {
                            vErrors = vErrors === null ? validate39.errors : vErrors.concat(validate39.errors);
                            errors = vErrors.length;
                        }
                        var valid0 = _errs3 === errors;
                    }
                    else {
                        var valid0 = true;
                    }
                    if (valid0) {
                        if (data.descriptor !== undefined) {
                            let data2 = data.descriptor;
                            const _errs4 = errors;
                            if (errors === _errs4) {
                                if (data2 && typeof data2 == "object" && !Array.isArray(data2)) {
                                    let missing1;
                                    if (((((data2.interface === undefined) && (missing1 = "interface")) || ((data2.method === undefined) && (missing1 = "method"))) || ((data2.messageTimestamp === undefined) && (missing1 = "messageTimestamp"))) || ((data2.dateExpires === undefined) && (missing1 = "dateExpires"))) {
                                        validate39.errors = [{ instancePath: instancePath + "/descriptor", schemaPath: "#/properties/descriptor/required", keyword: "required", params: { missingProperty: missing1 }, message: "must have required property '" + missing1 + "'" }];
                                        return false;
                                    }
                                    else {
                                        const _errs6 = errors;
                                        for (const key1 in data2) {
                                            if (!(func2.call(schema44.properties.descriptor.properties, key1))) {
                                                validate39.errors = [{ instancePath: instancePath + "/descriptor", schemaPath: "#/properties/descriptor/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key1 }, message: "must NOT have additional properties" }];
                                                return false;
                                                break;
                                            }
                                        }
                                        if (_errs6 === errors) {
                                            if (data2.messageTimestamp !== undefined) {
                                                let data3 = data2.messageTimestamp;
                                                const _errs7 = errors;
                                                const _errs8 = errors;
                                                if (errors === _errs8) {
                                                    if (typeof data3 === "string") {
                                                        if (!pattern3.test(data3)) {
                                                            validate39.errors = [{ instancePath: instancePath + "/descriptor/messageTimestamp", schemaPath: "https://identity.foundation/dwn/json-schemas/defs.json#/definitions/date-time/pattern", keyword: "pattern", params: { pattern: "^\\d{4}-[0-1]\\d-[0-3]\\dT(?:[0-2]\\d:[0-5]\\d:[0-5]\\d|23:59:60)\\.\\d{6}Z$" }, message: "must match pattern \"" + "^\\d{4}-[0-1]\\d-[0-3]\\dT(?:[0-2]\\d:[0-5]\\d:[0-5]\\d|23:59:60)\\.\\d{6}Z$" + "\"" }];
                                                            return false;
                                                        }
                                                    }
                                                    else {
                                                        validate39.errors = [{ instancePath: instancePath + "/descriptor/messageTimestamp", schemaPath: "https://identity.foundation/dwn/json-schemas/defs.json#/definitions/date-time/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                        return false;
                                                    }
                                                }
                                                var valid1 = _errs7 === errors;
                                            }
                                            else {
                                                var valid1 = true;
                                            }
                                            if (valid1) {
                                                if (data2.dateExpires !== undefined) {
                                                    let data4 = data2.dateExpires;
                                                    const _errs10 = errors;
                                                    const _errs11 = errors;
                                                    if (errors === _errs11) {
                                                        if (typeof data4 === "string") {
                                                            if (!pattern3.test(data4)) {
                                                                validate39.errors = [{ instancePath: instancePath + "/descriptor/dateExpires", schemaPath: "https://identity.foundation/dwn/json-schemas/defs.json#/definitions/date-time/pattern", keyword: "pattern", params: { pattern: "^\\d{4}-[0-1]\\d-[0-3]\\dT(?:[0-2]\\d:[0-5]\\d:[0-5]\\d|23:59:60)\\.\\d{6}Z$" }, message: "must match pattern \"" + "^\\d{4}-[0-1]\\d-[0-3]\\dT(?:[0-2]\\d:[0-5]\\d:[0-5]\\d|23:59:60)\\.\\d{6}Z$" + "\"" }];
                                                                return false;
                                                            }
                                                        }
                                                        else {
                                                            validate39.errors = [{ instancePath: instancePath + "/descriptor/dateExpires", schemaPath: "https://identity.foundation/dwn/json-schemas/defs.json#/definitions/date-time/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                            return false;
                                                        }
                                                    }
                                                    var valid1 = _errs10 === errors;
                                                }
                                                else {
                                                    var valid1 = true;
                                                }
                                                if (valid1) {
                                                    if (data2.description !== undefined) {
                                                        const _errs13 = errors;
                                                        if (typeof data2.description !== "string") {
                                                            validate39.errors = [{ instancePath: instancePath + "/descriptor/description", schemaPath: "#/properties/descriptor/properties/description/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                            return false;
                                                        }
                                                        var valid1 = _errs13 === errors;
                                                    }
                                                    else {
                                                        var valid1 = true;
                                                    }
                                                    if (valid1) {
                                                        if (data2.grantedTo !== undefined) {
                                                            let data6 = data2.grantedTo;
                                                            const _errs15 = errors;
                                                            const _errs16 = errors;
                                                            if (errors === _errs16) {
                                                                if (typeof data6 === "string") {
                                                                    if (!pattern4.test(data6)) {
                                                                        validate39.errors = [{ instancePath: instancePath + "/descriptor/grantedTo", schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/defs.json#/definitions/grantedTo/pattern", keyword: "pattern", params: { pattern: "^did:([a-z0-9]+):((?:(?:[a-zA-Z0-9._-]|(?:%[0-9a-fA-F]{2}))*:)*((?:[a-zA-Z0-9._-]|(?:%[0-9a-fA-F]{2}))+))((;[a-zA-Z0-9_.:%-]+=[a-zA-Z0-9_.:%-]*)*)(/[^#?]*)?([?][^#]*)?(#.*)?$" }, message: "must match pattern \"" + "^did:([a-z0-9]+):((?:(?:[a-zA-Z0-9._-]|(?:%[0-9a-fA-F]{2}))*:)*((?:[a-zA-Z0-9._-]|(?:%[0-9a-fA-F]{2}))+))((;[a-zA-Z0-9_.:%-]+=[a-zA-Z0-9_.:%-]*)*)(/[^#?]*)?([?][^#]*)?(#.*)?$" + "\"" }];
                                                                        return false;
                                                                    }
                                                                }
                                                                else {
                                                                    validate39.errors = [{ instancePath: instancePath + "/descriptor/grantedTo", schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/defs.json#/definitions/grantedTo/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                                    return false;
                                                                }
                                                            }
                                                            var valid1 = _errs15 === errors;
                                                        }
                                                        else {
                                                            var valid1 = true;
                                                        }
                                                        if (valid1) {
                                                            if (data2.grantedBy !== undefined) {
                                                                let data7 = data2.grantedBy;
                                                                const _errs18 = errors;
                                                                const _errs19 = errors;
                                                                if (errors === _errs19) {
                                                                    if (typeof data7 === "string") {
                                                                        if (!pattern4.test(data7)) {
                                                                            validate39.errors = [{ instancePath: instancePath + "/descriptor/grantedBy", schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/defs.json#/definitions/grantedBy/pattern", keyword: "pattern", params: { pattern: "^did:([a-z0-9]+):((?:(?:[a-zA-Z0-9._-]|(?:%[0-9a-fA-F]{2}))*:)*((?:[a-zA-Z0-9._-]|(?:%[0-9a-fA-F]{2}))+))((;[a-zA-Z0-9_.:%-]+=[a-zA-Z0-9_.:%-]*)*)(/[^#?]*)?([?][^#]*)?(#.*)?$" }, message: "must match pattern \"" + "^did:([a-z0-9]+):((?:(?:[a-zA-Z0-9._-]|(?:%[0-9a-fA-F]{2}))*:)*((?:[a-zA-Z0-9._-]|(?:%[0-9a-fA-F]{2}))+))((;[a-zA-Z0-9_.:%-]+=[a-zA-Z0-9_.:%-]*)*)(/[^#?]*)?([?][^#]*)?(#.*)?$" + "\"" }];
                                                                            return false;
                                                                        }
                                                                    }
                                                                    else {
                                                                        validate39.errors = [{ instancePath: instancePath + "/descriptor/grantedBy", schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/defs.json#/definitions/grantedBy/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                                        return false;
                                                                    }
                                                                }
                                                                var valid1 = _errs18 === errors;
                                                            }
                                                            else {
                                                                var valid1 = true;
                                                            }
                                                            if (valid1) {
                                                                if (data2.grantedFor !== undefined) {
                                                                    let data8 = data2.grantedFor;
                                                                    const _errs21 = errors;
                                                                    const _errs22 = errors;
                                                                    if (errors === _errs22) {
                                                                        if (typeof data8 === "string") {
                                                                            if (!pattern4.test(data8)) {
                                                                                validate39.errors = [{ instancePath: instancePath + "/descriptor/grantedFor", schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/defs.json#/definitions/grantedFor/pattern", keyword: "pattern", params: { pattern: "^did:([a-z0-9]+):((?:(?:[a-zA-Z0-9._-]|(?:%[0-9a-fA-F]{2}))*:)*((?:[a-zA-Z0-9._-]|(?:%[0-9a-fA-F]{2}))+))((;[a-zA-Z0-9_.:%-]+=[a-zA-Z0-9_.:%-]*)*)(/[^#?]*)?([?][^#]*)?(#.*)?$" }, message: "must match pattern \"" + "^did:([a-z0-9]+):((?:(?:[a-zA-Z0-9._-]|(?:%[0-9a-fA-F]{2}))*:)*((?:[a-zA-Z0-9._-]|(?:%[0-9a-fA-F]{2}))+))((;[a-zA-Z0-9_.:%-]+=[a-zA-Z0-9_.:%-]*)*)(/[^#?]*)?([?][^#]*)?(#.*)?$" + "\"" }];
                                                                                return false;
                                                                            }
                                                                        }
                                                                        else {
                                                                            validate39.errors = [{ instancePath: instancePath + "/descriptor/grantedFor", schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/defs.json#/definitions/grantedFor/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                                            return false;
                                                                        }
                                                                    }
                                                                    var valid1 = _errs21 === errors;
                                                                }
                                                                else {
                                                                    var valid1 = true;
                                                                }
                                                                if (valid1) {
                                                                    if (data2.permissionsRequestId !== undefined) {
                                                                        const _errs24 = errors;
                                                                        if (typeof data2.permissionsRequestId !== "string") {
                                                                            validate39.errors = [{ instancePath: instancePath + "/descriptor/permissionsRequestId", schemaPath: "#/properties/descriptor/properties/permissionsRequestId/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                                            return false;
                                                                        }
                                                                        var valid1 = _errs24 === errors;
                                                                    }
                                                                    else {
                                                                        var valid1 = true;
                                                                    }
                                                                    if (valid1) {
                                                                        if (data2.interface !== undefined) {
                                                                            let data10 = data2.interface;
                                                                            const _errs26 = errors;
                                                                            if (typeof data10 !== "string") {
                                                                                validate39.errors = [{ instancePath: instancePath + "/descriptor/interface", schemaPath: "#/properties/descriptor/properties/interface/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                                                return false;
                                                                            }
                                                                            if (!(data10 === "Permissions")) {
                                                                                validate39.errors = [{ instancePath: instancePath + "/descriptor/interface", schemaPath: "#/properties/descriptor/properties/interface/enum", keyword: "enum", params: { allowedValues: schema44.properties.descriptor.properties.interface.enum }, message: "must be equal to one of the allowed values" }];
                                                                                return false;
                                                                            }
                                                                            var valid1 = _errs26 === errors;
                                                                        }
                                                                        else {
                                                                            var valid1 = true;
                                                                        }
                                                                        if (valid1) {
                                                                            if (data2.method !== undefined) {
                                                                                let data11 = data2.method;
                                                                                const _errs28 = errors;
                                                                                if (typeof data11 !== "string") {
                                                                                    validate39.errors = [{ instancePath: instancePath + "/descriptor/method", schemaPath: "#/properties/descriptor/properties/method/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                                                    return false;
                                                                                }
                                                                                if (!(data11 === "Grant")) {
                                                                                    validate39.errors = [{ instancePath: instancePath + "/descriptor/method", schemaPath: "#/properties/descriptor/properties/method/enum", keyword: "enum", params: { allowedValues: schema44.properties.descriptor.properties.method.enum }, message: "must be equal to one of the allowed values" }];
                                                                                    return false;
                                                                                }
                                                                                var valid1 = _errs28 === errors;
                                                                            }
                                                                            else {
                                                                                var valid1 = true;
                                                                            }
                                                                            if (valid1) {
                                                                                if (data2.scope !== undefined) {
                                                                                    const _errs30 = errors;
                                                                                    if (!(validate41(data2.scope, { instancePath: instancePath + "/descriptor/scope", parentData: data2, parentDataProperty: "scope", rootData }))) {
                                                                                        vErrors = vErrors === null ? validate41.errors : vErrors.concat(validate41.errors);
                                                                                        errors = vErrors.length;
                                                                                    }
                                                                                    var valid1 = _errs30 === errors;
                                                                                }
                                                                                else {
                                                                                    var valid1 = true;
                                                                                }
                                                                                if (valid1) {
                                                                                    if (data2.conditions !== undefined) {
                                                                                        let data13 = data2.conditions;
                                                                                        const _errs31 = errors;
                                                                                        const _errs32 = errors;
                                                                                        if (errors === _errs32) {
                                                                                            if (data13 && typeof data13 == "object" && !Array.isArray(data13)) {
                                                                                                const _errs34 = errors;
                                                                                                for (const key2 in data13) {
                                                                                                    if (!(key2 === "publication")) {
                                                                                                        validate39.errors = [{ instancePath: instancePath + "/descriptor/conditions", schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/defs.json#/definitions/conditions/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key2 }, message: "must NOT have additional properties" }];
                                                                                                        return false;
                                                                                                        break;
                                                                                                    }
                                                                                                }
                                                                                                if (_errs34 === errors) {
                                                                                                    if (data13.publication !== undefined) {
                                                                                                        let data14 = data13.publication;
                                                                                                        if (typeof data14 !== "string") {
                                                                                                            validate39.errors = [{ instancePath: instancePath + "/descriptor/conditions/publication", schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/defs.json#/definitions/conditions/properties/publication/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                                                                            return false;
                                                                                                        }
                                                                                                        if (!((data14 === "Required") || (data14 === "Prohibited"))) {
                                                                                                            validate39.errors = [{ instancePath: instancePath + "/descriptor/conditions/publication", schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/defs.json#/definitions/conditions/properties/publication/enum", keyword: "enum", params: { allowedValues: schema56.properties.publication.enum }, message: "must be equal to one of the allowed values" }];
                                                                                                            return false;
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                            else {
                                                                                                validate39.errors = [{ instancePath: instancePath + "/descriptor/conditions", schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/defs.json#/definitions/conditions/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
                                                                                                return false;
                                                                                            }
                                                                                        }
                                                                                        var valid1 = _errs31 === errors;
                                                                                    }
                                                                                    else {
                                                                                        var valid1 = true;
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                else {
                                    validate39.errors = [{ instancePath: instancePath + "/descriptor", schemaPath: "#/properties/descriptor/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
                                    return false;
                                }
                            }
                            var valid0 = _errs4 === errors;
                        }
                        else {
                            var valid0 = true;
                        }
                    }
                }
            }
        }
    }
    else {
        validate39.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
        return false;
    }
} validate39.errors = vErrors; return errors === 0; }
export const PermissionsRequest = validate44;
const schema57 = { "$schema": "http://json-schema.org/draft-07/schema#", "$id": "https://identity.foundation/dwn/json-schemas/permissions-request.json", "additionalProperties": false, "type": "object", "required": ["authorization", "descriptor"], "properties": { "authorization": { "$ref": "https://identity.foundation/dwn/json-schemas/authorization.json" }, "descriptor": { "type": "object", "additionalProperties": false, "required": ["interface", "method", "messageTimestamp", "grantedBy", "grantedTo", "grantedFor", "scope"], "properties": { "interface": { "enum": ["Permissions"], "type": "string" }, "method": { "enum": ["Request"], "type": "string" }, "messageTimestamp": { "type": "string" }, "description": { "type": "string" }, "grantedTo": { "description": "DID of the grantee", "$ref": "https://identity.foundation/dwn/json-schemas/permissions/defs.json#/definitions/grantedTo" }, "grantedBy": { "description": "DID of the grantor", "$ref": "https://identity.foundation/dwn/json-schemas/permissions/defs.json#/definitions/grantedBy" }, "grantedFor": { "description": "DID of the DWN to which the grantee is given access", "$ref": "https://identity.foundation/dwn/json-schemas/permissions/defs.json#/definitions/grantedFor" }, "scope": { "$ref": "https://identity.foundation/dwn/json-schemas/permissions/defs.json#/definitions/scope" }, "conditions": { "$ref": "https://identity.foundation/dwn/json-schemas/permissions/defs.json#/definitions/conditions" } } } } };
function validate46(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) { let vErrors = null; let errors = 0; const _errs0 = errors; let valid0 = false; let passing0 = null; const _errs1 = errors; const _errs2 = errors; if (errors === _errs2) {
    if (data && typeof data == "object" && !Array.isArray(data)) {
        if (data.interface !== undefined) {
            const _errs4 = errors;
            if ("Protocols" !== data.interface) {
                const err0 = { instancePath: instancePath + "/interface", schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/definitions/protocols-query-scope/properties/interface/const", keyword: "const", params: { allowedValue: "Protocols" }, message: "must be equal to constant" };
                if (vErrors === null) {
                    vErrors = [err0];
                }
                else {
                    vErrors.push(err0);
                }
                errors++;
            }
            var valid2 = _errs4 === errors;
        }
        else {
            var valid2 = true;
        }
        if (valid2) {
            if (data.method !== undefined) {
                const _errs5 = errors;
                if ("Query" !== data.method) {
                    const err1 = { instancePath: instancePath + "/method", schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/definitions/protocols-query-scope/properties/method/const", keyword: "const", params: { allowedValue: "Query" }, message: "must be equal to constant" };
                    if (vErrors === null) {
                        vErrors = [err1];
                    }
                    else {
                        vErrors.push(err1);
                    }
                    errors++;
                }
                var valid2 = _errs5 === errors;
            }
            else {
                var valid2 = true;
            }
        }
    }
    else {
        const err2 = { instancePath, schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/definitions/protocols-query-scope/type", keyword: "type", params: { type: "object" }, message: "must be object" };
        if (vErrors === null) {
            vErrors = [err2];
        }
        else {
            vErrors.push(err2);
        }
        errors++;
    }
} var _valid0 = _errs1 === errors; if (_valid0) {
    valid0 = true;
    passing0 = 0;
} const _errs6 = errors; const _errs7 = errors; if (errors === _errs7) {
    if (data && typeof data == "object" && !Array.isArray(data)) {
        let missing0;
        if (((data.interface === undefined) && (missing0 = "interface")) || ((data.method === undefined) && (missing0 = "method"))) {
            const err3 = { instancePath, schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/definitions/records-read-scope/required", keyword: "required", params: { missingProperty: missing0 }, message: "must have required property '" + missing0 + "'" };
            if (vErrors === null) {
                vErrors = [err3];
            }
            else {
                vErrors.push(err3);
            }
            errors++;
        }
        else {
            if (data.interface !== undefined) {
                const _errs9 = errors;
                if ("Records" !== data.interface) {
                    const err4 = { instancePath: instancePath + "/interface", schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/definitions/records-read-scope/properties/interface/const", keyword: "const", params: { allowedValue: "Records" }, message: "must be equal to constant" };
                    if (vErrors === null) {
                        vErrors = [err4];
                    }
                    else {
                        vErrors.push(err4);
                    }
                    errors++;
                }
                var valid4 = _errs9 === errors;
            }
            else {
                var valid4 = true;
            }
            if (valid4) {
                if (data.method !== undefined) {
                    const _errs10 = errors;
                    if ("Read" !== data.method) {
                        const err5 = { instancePath: instancePath + "/method", schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/definitions/records-read-scope/properties/method/const", keyword: "const", params: { allowedValue: "Read" }, message: "must be equal to constant" };
                        if (vErrors === null) {
                            vErrors = [err5];
                        }
                        else {
                            vErrors.push(err5);
                        }
                        errors++;
                    }
                    var valid4 = _errs10 === errors;
                }
                else {
                    var valid4 = true;
                }
                if (valid4) {
                    if (data.schema !== undefined) {
                        const _errs11 = errors;
                        if (typeof data.schema !== "string") {
                            const err6 = { instancePath: instancePath + "/schema", schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/definitions/records-read-scope/properties/schema/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                            if (vErrors === null) {
                                vErrors = [err6];
                            }
                            else {
                                vErrors.push(err6);
                            }
                            errors++;
                        }
                        var valid4 = _errs11 === errors;
                    }
                    else {
                        var valid4 = true;
                    }
                    if (valid4) {
                        if (data.protocol !== undefined) {
                            const _errs13 = errors;
                            if (typeof data.protocol !== "string") {
                                const err7 = { instancePath: instancePath + "/protocol", schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/definitions/records-read-scope/properties/protocol/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                                if (vErrors === null) {
                                    vErrors = [err7];
                                }
                                else {
                                    vErrors.push(err7);
                                }
                                errors++;
                            }
                            var valid4 = _errs13 === errors;
                        }
                        else {
                            var valid4 = true;
                        }
                        if (valid4) {
                            if (data.contextId !== undefined) {
                                const _errs15 = errors;
                                if (typeof data.contextId !== "string") {
                                    const err8 = { instancePath: instancePath + "/contextId", schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/definitions/records-read-scope/properties/contextId/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                                    if (vErrors === null) {
                                        vErrors = [err8];
                                    }
                                    else {
                                        vErrors.push(err8);
                                    }
                                    errors++;
                                }
                                var valid4 = _errs15 === errors;
                            }
                            else {
                                var valid4 = true;
                            }
                            if (valid4) {
                                if (data.protocolPath !== undefined) {
                                    const _errs17 = errors;
                                    if (typeof data.protocolPath !== "string") {
                                        const err9 = { instancePath: instancePath + "/protocolPath", schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/definitions/records-read-scope/properties/protocolPath/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                                        if (vErrors === null) {
                                            vErrors = [err9];
                                        }
                                        else {
                                            vErrors.push(err9);
                                        }
                                        errors++;
                                    }
                                    var valid4 = _errs17 === errors;
                                }
                                else {
                                    var valid4 = true;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    else {
        const err10 = { instancePath, schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/definitions/records-read-scope/type", keyword: "type", params: { type: "object" }, message: "must be object" };
        if (vErrors === null) {
            vErrors = [err10];
        }
        else {
            vErrors.push(err10);
        }
        errors++;
    }
} var _valid0 = _errs6 === errors; if (_valid0 && valid0) {
    valid0 = false;
    passing0 = [passing0, 1];
}
else {
    if (_valid0) {
        valid0 = true;
        passing0 = 1;
    }
    const _errs19 = errors;
    const _errs20 = errors;
    if (errors === _errs20) {
        if (data && typeof data == "object" && !Array.isArray(data)) {
            let missing1;
            if (((data.interface === undefined) && (missing1 = "interface")) || ((data.method === undefined) && (missing1 = "method"))) {
                const err11 = { instancePath, schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/definitions/records-delete-scope/required", keyword: "required", params: { missingProperty: missing1 }, message: "must have required property '" + missing1 + "'" };
                if (vErrors === null) {
                    vErrors = [err11];
                }
                else {
                    vErrors.push(err11);
                }
                errors++;
            }
            else {
                if (data.interface !== undefined) {
                    const _errs22 = errors;
                    if ("Records" !== data.interface) {
                        const err12 = { instancePath: instancePath + "/interface", schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/definitions/records-delete-scope/properties/interface/const", keyword: "const", params: { allowedValue: "Records" }, message: "must be equal to constant" };
                        if (vErrors === null) {
                            vErrors = [err12];
                        }
                        else {
                            vErrors.push(err12);
                        }
                        errors++;
                    }
                    var valid6 = _errs22 === errors;
                }
                else {
                    var valid6 = true;
                }
                if (valid6) {
                    if (data.method !== undefined) {
                        const _errs23 = errors;
                        if ("Delete" !== data.method) {
                            const err13 = { instancePath: instancePath + "/method", schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/definitions/records-delete-scope/properties/method/const", keyword: "const", params: { allowedValue: "Delete" }, message: "must be equal to constant" };
                            if (vErrors === null) {
                                vErrors = [err13];
                            }
                            else {
                                vErrors.push(err13);
                            }
                            errors++;
                        }
                        var valid6 = _errs23 === errors;
                    }
                    else {
                        var valid6 = true;
                    }
                    if (valid6) {
                        if (data.schema !== undefined) {
                            const _errs24 = errors;
                            if (typeof data.schema !== "string") {
                                const err14 = { instancePath: instancePath + "/schema", schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/definitions/records-delete-scope/properties/schema/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                                if (vErrors === null) {
                                    vErrors = [err14];
                                }
                                else {
                                    vErrors.push(err14);
                                }
                                errors++;
                            }
                            var valid6 = _errs24 === errors;
                        }
                        else {
                            var valid6 = true;
                        }
                    }
                }
            }
        }
        else {
            const err15 = { instancePath, schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/definitions/records-delete-scope/type", keyword: "type", params: { type: "object" }, message: "must be object" };
            if (vErrors === null) {
                vErrors = [err15];
            }
            else {
                vErrors.push(err15);
            }
            errors++;
        }
    }
    var _valid0 = _errs19 === errors;
    if (_valid0 && valid0) {
        valid0 = false;
        passing0 = [passing0, 2];
    }
    else {
        if (_valid0) {
            valid0 = true;
            passing0 = 2;
        }
        const _errs26 = errors;
        const _errs27 = errors;
        if (errors === _errs27) {
            if (data && typeof data == "object" && !Array.isArray(data)) {
                let missing2;
                if (((data.interface === undefined) && (missing2 = "interface")) || ((data.method === undefined) && (missing2 = "method"))) {
                    const err16 = { instancePath, schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/definitions/records-write-scope/required", keyword: "required", params: { missingProperty: missing2 }, message: "must have required property '" + missing2 + "'" };
                    if (vErrors === null) {
                        vErrors = [err16];
                    }
                    else {
                        vErrors.push(err16);
                    }
                    errors++;
                }
                else {
                    if (data.interface !== undefined) {
                        const _errs29 = errors;
                        if ("Records" !== data.interface) {
                            const err17 = { instancePath: instancePath + "/interface", schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/definitions/records-write-scope/properties/interface/const", keyword: "const", params: { allowedValue: "Records" }, message: "must be equal to constant" };
                            if (vErrors === null) {
                                vErrors = [err17];
                            }
                            else {
                                vErrors.push(err17);
                            }
                            errors++;
                        }
                        var valid8 = _errs29 === errors;
                    }
                    else {
                        var valid8 = true;
                    }
                    if (valid8) {
                        if (data.method !== undefined) {
                            const _errs30 = errors;
                            if ("Write" !== data.method) {
                                const err18 = { instancePath: instancePath + "/method", schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/definitions/records-write-scope/properties/method/const", keyword: "const", params: { allowedValue: "Write" }, message: "must be equal to constant" };
                                if (vErrors === null) {
                                    vErrors = [err18];
                                }
                                else {
                                    vErrors.push(err18);
                                }
                                errors++;
                            }
                            var valid8 = _errs30 === errors;
                        }
                        else {
                            var valid8 = true;
                        }
                        if (valid8) {
                            if (data.schema !== undefined) {
                                const _errs31 = errors;
                                if (typeof data.schema !== "string") {
                                    const err19 = { instancePath: instancePath + "/schema", schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/definitions/records-write-scope/properties/schema/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                                    if (vErrors === null) {
                                        vErrors = [err19];
                                    }
                                    else {
                                        vErrors.push(err19);
                                    }
                                    errors++;
                                }
                                var valid8 = _errs31 === errors;
                            }
                            else {
                                var valid8 = true;
                            }
                            if (valid8) {
                                if (data.protocol !== undefined) {
                                    const _errs33 = errors;
                                    if (typeof data.protocol !== "string") {
                                        const err20 = { instancePath: instancePath + "/protocol", schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/definitions/records-write-scope/properties/protocol/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                                        if (vErrors === null) {
                                            vErrors = [err20];
                                        }
                                        else {
                                            vErrors.push(err20);
                                        }
                                        errors++;
                                    }
                                    var valid8 = _errs33 === errors;
                                }
                                else {
                                    var valid8 = true;
                                }
                                if (valid8) {
                                    if (data.contextId !== undefined) {
                                        const _errs35 = errors;
                                        if (typeof data.contextId !== "string") {
                                            const err21 = { instancePath: instancePath + "/contextId", schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/definitions/records-write-scope/properties/contextId/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                                            if (vErrors === null) {
                                                vErrors = [err21];
                                            }
                                            else {
                                                vErrors.push(err21);
                                            }
                                            errors++;
                                        }
                                        var valid8 = _errs35 === errors;
                                    }
                                    else {
                                        var valid8 = true;
                                    }
                                    if (valid8) {
                                        if (data.protocolPath !== undefined) {
                                            const _errs37 = errors;
                                            if (typeof data.protocolPath !== "string") {
                                                const err22 = { instancePath: instancePath + "/protocolPath", schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/definitions/records-write-scope/properties/protocolPath/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                                                if (vErrors === null) {
                                                    vErrors = [err22];
                                                }
                                                else {
                                                    vErrors.push(err22);
                                                }
                                                errors++;
                                            }
                                            var valid8 = _errs37 === errors;
                                        }
                                        else {
                                            var valid8 = true;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            else {
                const err23 = { instancePath, schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/definitions/records-write-scope/type", keyword: "type", params: { type: "object" }, message: "must be object" };
                if (vErrors === null) {
                    vErrors = [err23];
                }
                else {
                    vErrors.push(err23);
                }
                errors++;
            }
        }
        var _valid0 = _errs26 === errors;
        if (_valid0 && valid0) {
            valid0 = false;
            passing0 = [passing0, 3];
        }
        else {
            if (_valid0) {
                valid0 = true;
                passing0 = 3;
            }
        }
    }
} if (!valid0) {
    const err24 = { instancePath, schemaPath: "#/oneOf", keyword: "oneOf", params: { passingSchemas: passing0 }, message: "must match exactly one schema in oneOf" };
    if (vErrors === null) {
        vErrors = [err24];
    }
    else {
        vErrors.push(err24);
    }
    errors++;
    validate46.errors = vErrors;
    return false;
}
else {
    errors = _errs0;
    if (vErrors !== null) {
        if (_errs0) {
            vErrors.length = _errs0;
        }
        else {
            vErrors = null;
        }
    }
} validate46.errors = vErrors; return errors === 0; }
function validate44(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) { /*# sourceURL="https://identity.foundation/dwn/json-schemas/permissions-request.json" */ ; let vErrors = null; let errors = 0; if (errors === 0) {
    if (data && typeof data == "object" && !Array.isArray(data)) {
        let missing0;
        if (((data.authorization === undefined) && (missing0 = "authorization")) || ((data.descriptor === undefined) && (missing0 = "descriptor"))) {
            validate44.errors = [{ instancePath, schemaPath: "#/required", keyword: "required", params: { missingProperty: missing0 }, message: "must have required property '" + missing0 + "'" }];
            return false;
        }
        else {
            const _errs1 = errors;
            for (const key0 in data) {
                if (!((key0 === "authorization") || (key0 === "descriptor"))) {
                    validate44.errors = [{ instancePath, schemaPath: "#/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties" }];
                    return false;
                    break;
                }
            }
            if (_errs1 === errors) {
                if (data.authorization !== undefined) {
                    const _errs2 = errors;
                    if (!(validate10(data.authorization, { instancePath: instancePath + "/authorization", parentData: data, parentDataProperty: "authorization", rootData }))) {
                        vErrors = vErrors === null ? validate10.errors : vErrors.concat(validate10.errors);
                        errors = vErrors.length;
                    }
                    var valid0 = _errs2 === errors;
                }
                else {
                    var valid0 = true;
                }
                if (valid0) {
                    if (data.descriptor !== undefined) {
                        let data1 = data.descriptor;
                        const _errs3 = errors;
                        if (errors === _errs3) {
                            if (data1 && typeof data1 == "object" && !Array.isArray(data1)) {
                                let missing1;
                                if ((((((((data1.interface === undefined) && (missing1 = "interface")) || ((data1.method === undefined) && (missing1 = "method"))) || ((data1.messageTimestamp === undefined) && (missing1 = "messageTimestamp"))) || ((data1.grantedBy === undefined) && (missing1 = "grantedBy"))) || ((data1.grantedTo === undefined) && (missing1 = "grantedTo"))) || ((data1.grantedFor === undefined) && (missing1 = "grantedFor"))) || ((data1.scope === undefined) && (missing1 = "scope"))) {
                                    validate44.errors = [{ instancePath: instancePath + "/descriptor", schemaPath: "#/properties/descriptor/required", keyword: "required", params: { missingProperty: missing1 }, message: "must have required property '" + missing1 + "'" }];
                                    return false;
                                }
                                else {
                                    const _errs5 = errors;
                                    for (const key1 in data1) {
                                        if (!(func2.call(schema57.properties.descriptor.properties, key1))) {
                                            validate44.errors = [{ instancePath: instancePath + "/descriptor", schemaPath: "#/properties/descriptor/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key1 }, message: "must NOT have additional properties" }];
                                            return false;
                                            break;
                                        }
                                    }
                                    if (_errs5 === errors) {
                                        if (data1.interface !== undefined) {
                                            let data2 = data1.interface;
                                            const _errs6 = errors;
                                            if (typeof data2 !== "string") {
                                                validate44.errors = [{ instancePath: instancePath + "/descriptor/interface", schemaPath: "#/properties/descriptor/properties/interface/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                return false;
                                            }
                                            if (!(data2 === "Permissions")) {
                                                validate44.errors = [{ instancePath: instancePath + "/descriptor/interface", schemaPath: "#/properties/descriptor/properties/interface/enum", keyword: "enum", params: { allowedValues: schema57.properties.descriptor.properties.interface.enum }, message: "must be equal to one of the allowed values" }];
                                                return false;
                                            }
                                            var valid1 = _errs6 === errors;
                                        }
                                        else {
                                            var valid1 = true;
                                        }
                                        if (valid1) {
                                            if (data1.method !== undefined) {
                                                let data3 = data1.method;
                                                const _errs8 = errors;
                                                if (typeof data3 !== "string") {
                                                    validate44.errors = [{ instancePath: instancePath + "/descriptor/method", schemaPath: "#/properties/descriptor/properties/method/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                    return false;
                                                }
                                                if (!(data3 === "Request")) {
                                                    validate44.errors = [{ instancePath: instancePath + "/descriptor/method", schemaPath: "#/properties/descriptor/properties/method/enum", keyword: "enum", params: { allowedValues: schema57.properties.descriptor.properties.method.enum }, message: "must be equal to one of the allowed values" }];
                                                    return false;
                                                }
                                                var valid1 = _errs8 === errors;
                                            }
                                            else {
                                                var valid1 = true;
                                            }
                                            if (valid1) {
                                                if (data1.messageTimestamp !== undefined) {
                                                    const _errs10 = errors;
                                                    if (typeof data1.messageTimestamp !== "string") {
                                                        validate44.errors = [{ instancePath: instancePath + "/descriptor/messageTimestamp", schemaPath: "#/properties/descriptor/properties/messageTimestamp/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                        return false;
                                                    }
                                                    var valid1 = _errs10 === errors;
                                                }
                                                else {
                                                    var valid1 = true;
                                                }
                                                if (valid1) {
                                                    if (data1.description !== undefined) {
                                                        const _errs12 = errors;
                                                        if (typeof data1.description !== "string") {
                                                            validate44.errors = [{ instancePath: instancePath + "/descriptor/description", schemaPath: "#/properties/descriptor/properties/description/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                            return false;
                                                        }
                                                        var valid1 = _errs12 === errors;
                                                    }
                                                    else {
                                                        var valid1 = true;
                                                    }
                                                    if (valid1) {
                                                        if (data1.grantedTo !== undefined) {
                                                            let data6 = data1.grantedTo;
                                                            const _errs14 = errors;
                                                            const _errs15 = errors;
                                                            if (errors === _errs15) {
                                                                if (typeof data6 === "string") {
                                                                    if (!pattern4.test(data6)) {
                                                                        validate44.errors = [{ instancePath: instancePath + "/descriptor/grantedTo", schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/defs.json#/definitions/grantedTo/pattern", keyword: "pattern", params: { pattern: "^did:([a-z0-9]+):((?:(?:[a-zA-Z0-9._-]|(?:%[0-9a-fA-F]{2}))*:)*((?:[a-zA-Z0-9._-]|(?:%[0-9a-fA-F]{2}))+))((;[a-zA-Z0-9_.:%-]+=[a-zA-Z0-9_.:%-]*)*)(/[^#?]*)?([?][^#]*)?(#.*)?$" }, message: "must match pattern \"" + "^did:([a-z0-9]+):((?:(?:[a-zA-Z0-9._-]|(?:%[0-9a-fA-F]{2}))*:)*((?:[a-zA-Z0-9._-]|(?:%[0-9a-fA-F]{2}))+))((;[a-zA-Z0-9_.:%-]+=[a-zA-Z0-9_.:%-]*)*)(/[^#?]*)?([?][^#]*)?(#.*)?$" + "\"" }];
                                                                        return false;
                                                                    }
                                                                }
                                                                else {
                                                                    validate44.errors = [{ instancePath: instancePath + "/descriptor/grantedTo", schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/defs.json#/definitions/grantedTo/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                                    return false;
                                                                }
                                                            }
                                                            var valid1 = _errs14 === errors;
                                                        }
                                                        else {
                                                            var valid1 = true;
                                                        }
                                                        if (valid1) {
                                                            if (data1.grantedBy !== undefined) {
                                                                let data7 = data1.grantedBy;
                                                                const _errs17 = errors;
                                                                const _errs18 = errors;
                                                                if (errors === _errs18) {
                                                                    if (typeof data7 === "string") {
                                                                        if (!pattern4.test(data7)) {
                                                                            validate44.errors = [{ instancePath: instancePath + "/descriptor/grantedBy", schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/defs.json#/definitions/grantedBy/pattern", keyword: "pattern", params: { pattern: "^did:([a-z0-9]+):((?:(?:[a-zA-Z0-9._-]|(?:%[0-9a-fA-F]{2}))*:)*((?:[a-zA-Z0-9._-]|(?:%[0-9a-fA-F]{2}))+))((;[a-zA-Z0-9_.:%-]+=[a-zA-Z0-9_.:%-]*)*)(/[^#?]*)?([?][^#]*)?(#.*)?$" }, message: "must match pattern \"" + "^did:([a-z0-9]+):((?:(?:[a-zA-Z0-9._-]|(?:%[0-9a-fA-F]{2}))*:)*((?:[a-zA-Z0-9._-]|(?:%[0-9a-fA-F]{2}))+))((;[a-zA-Z0-9_.:%-]+=[a-zA-Z0-9_.:%-]*)*)(/[^#?]*)?([?][^#]*)?(#.*)?$" + "\"" }];
                                                                            return false;
                                                                        }
                                                                    }
                                                                    else {
                                                                        validate44.errors = [{ instancePath: instancePath + "/descriptor/grantedBy", schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/defs.json#/definitions/grantedBy/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                                        return false;
                                                                    }
                                                                }
                                                                var valid1 = _errs17 === errors;
                                                            }
                                                            else {
                                                                var valid1 = true;
                                                            }
                                                            if (valid1) {
                                                                if (data1.grantedFor !== undefined) {
                                                                    let data8 = data1.grantedFor;
                                                                    const _errs20 = errors;
                                                                    const _errs21 = errors;
                                                                    if (errors === _errs21) {
                                                                        if (typeof data8 === "string") {
                                                                            if (!pattern4.test(data8)) {
                                                                                validate44.errors = [{ instancePath: instancePath + "/descriptor/grantedFor", schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/defs.json#/definitions/grantedFor/pattern", keyword: "pattern", params: { pattern: "^did:([a-z0-9]+):((?:(?:[a-zA-Z0-9._-]|(?:%[0-9a-fA-F]{2}))*:)*((?:[a-zA-Z0-9._-]|(?:%[0-9a-fA-F]{2}))+))((;[a-zA-Z0-9_.:%-]+=[a-zA-Z0-9_.:%-]*)*)(/[^#?]*)?([?][^#]*)?(#.*)?$" }, message: "must match pattern \"" + "^did:([a-z0-9]+):((?:(?:[a-zA-Z0-9._-]|(?:%[0-9a-fA-F]{2}))*:)*((?:[a-zA-Z0-9._-]|(?:%[0-9a-fA-F]{2}))+))((;[a-zA-Z0-9_.:%-]+=[a-zA-Z0-9_.:%-]*)*)(/[^#?]*)?([?][^#]*)?(#.*)?$" + "\"" }];
                                                                                return false;
                                                                            }
                                                                        }
                                                                        else {
                                                                            validate44.errors = [{ instancePath: instancePath + "/descriptor/grantedFor", schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/defs.json#/definitions/grantedFor/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                                            return false;
                                                                        }
                                                                    }
                                                                    var valid1 = _errs20 === errors;
                                                                }
                                                                else {
                                                                    var valid1 = true;
                                                                }
                                                                if (valid1) {
                                                                    if (data1.scope !== undefined) {
                                                                        const _errs23 = errors;
                                                                        if (!(validate46(data1.scope, { instancePath: instancePath + "/descriptor/scope", parentData: data1, parentDataProperty: "scope", rootData }))) {
                                                                            vErrors = vErrors === null ? validate46.errors : vErrors.concat(validate46.errors);
                                                                            errors = vErrors.length;
                                                                        }
                                                                        var valid1 = _errs23 === errors;
                                                                    }
                                                                    else {
                                                                        var valid1 = true;
                                                                    }
                                                                    if (valid1) {
                                                                        if (data1.conditions !== undefined) {
                                                                            let data10 = data1.conditions;
                                                                            const _errs24 = errors;
                                                                            const _errs25 = errors;
                                                                            if (errors === _errs25) {
                                                                                if (data10 && typeof data10 == "object" && !Array.isArray(data10)) {
                                                                                    const _errs27 = errors;
                                                                                    for (const key2 in data10) {
                                                                                        if (!(key2 === "publication")) {
                                                                                            validate44.errors = [{ instancePath: instancePath + "/descriptor/conditions", schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/defs.json#/definitions/conditions/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key2 }, message: "must NOT have additional properties" }];
                                                                                            return false;
                                                                                            break;
                                                                                        }
                                                                                    }
                                                                                    if (_errs27 === errors) {
                                                                                        if (data10.publication !== undefined) {
                                                                                            let data11 = data10.publication;
                                                                                            if (typeof data11 !== "string") {
                                                                                                validate44.errors = [{ instancePath: instancePath + "/descriptor/conditions/publication", schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/defs.json#/definitions/conditions/properties/publication/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                                                                return false;
                                                                                            }
                                                                                            if (!((data11 === "Required") || (data11 === "Prohibited"))) {
                                                                                                validate44.errors = [{ instancePath: instancePath + "/descriptor/conditions/publication", schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/defs.json#/definitions/conditions/properties/publication/enum", keyword: "enum", params: { allowedValues: schema56.properties.publication.enum }, message: "must be equal to one of the allowed values" }];
                                                                                                return false;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                else {
                                                                                    validate44.errors = [{ instancePath: instancePath + "/descriptor/conditions", schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/defs.json#/definitions/conditions/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
                                                                                    return false;
                                                                                }
                                                                            }
                                                                            var valid1 = _errs24 === errors;
                                                                        }
                                                                        else {
                                                                            var valid1 = true;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            else {
                                validate44.errors = [{ instancePath: instancePath + "/descriptor", schemaPath: "#/properties/descriptor/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
                                return false;
                            }
                        }
                        var valid0 = _errs3 === errors;
                    }
                    else {
                        var valid0 = true;
                    }
                }
            }
        }
    }
    else {
        validate44.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
        return false;
    }
} validate44.errors = vErrors; return errors === 0; }
export const PermissionsRevoke = validate48;
const schema67 = { "$schema": "http://json-schema.org/draft-07/schema#", "$id": "https://identity.foundation/dwn/json-schemas/permissions-revoke.json", "type": "object", "required": ["authorization", "descriptor"], "additionalProperties": false, "properties": { "authorization": { "$ref": "https://identity.foundation/dwn/json-schemas/authorization.json" }, "descriptor": { "type": "object", "additionalProperties": false, "required": ["interface", "method", "messageTimestamp", "permissionsGrantId"], "properties": { "messageTimestamp": { "type": "string" }, "permissionsGrantId": { "type": "string" }, "interface": { "enum": ["Permissions"], "type": "string" }, "method": { "enum": ["Revoke"], "type": "string" } } } } };
function validate48(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) { /*# sourceURL="https://identity.foundation/dwn/json-schemas/permissions-revoke.json" */ ; let vErrors = null; let errors = 0; if (errors === 0) {
    if (data && typeof data == "object" && !Array.isArray(data)) {
        let missing0;
        if (((data.authorization === undefined) && (missing0 = "authorization")) || ((data.descriptor === undefined) && (missing0 = "descriptor"))) {
            validate48.errors = [{ instancePath, schemaPath: "#/required", keyword: "required", params: { missingProperty: missing0 }, message: "must have required property '" + missing0 + "'" }];
            return false;
        }
        else {
            const _errs1 = errors;
            for (const key0 in data) {
                if (!((key0 === "authorization") || (key0 === "descriptor"))) {
                    validate48.errors = [{ instancePath, schemaPath: "#/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties" }];
                    return false;
                    break;
                }
            }
            if (_errs1 === errors) {
                if (data.authorization !== undefined) {
                    const _errs2 = errors;
                    if (!(validate10(data.authorization, { instancePath: instancePath + "/authorization", parentData: data, parentDataProperty: "authorization", rootData }))) {
                        vErrors = vErrors === null ? validate10.errors : vErrors.concat(validate10.errors);
                        errors = vErrors.length;
                    }
                    var valid0 = _errs2 === errors;
                }
                else {
                    var valid0 = true;
                }
                if (valid0) {
                    if (data.descriptor !== undefined) {
                        let data1 = data.descriptor;
                        const _errs3 = errors;
                        if (errors === _errs3) {
                            if (data1 && typeof data1 == "object" && !Array.isArray(data1)) {
                                let missing1;
                                if (((((data1.interface === undefined) && (missing1 = "interface")) || ((data1.method === undefined) && (missing1 = "method"))) || ((data1.messageTimestamp === undefined) && (missing1 = "messageTimestamp"))) || ((data1.permissionsGrantId === undefined) && (missing1 = "permissionsGrantId"))) {
                                    validate48.errors = [{ instancePath: instancePath + "/descriptor", schemaPath: "#/properties/descriptor/required", keyword: "required", params: { missingProperty: missing1 }, message: "must have required property '" + missing1 + "'" }];
                                    return false;
                                }
                                else {
                                    const _errs5 = errors;
                                    for (const key1 in data1) {
                                        if (!((((key1 === "messageTimestamp") || (key1 === "permissionsGrantId")) || (key1 === "interface")) || (key1 === "method"))) {
                                            validate48.errors = [{ instancePath: instancePath + "/descriptor", schemaPath: "#/properties/descriptor/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key1 }, message: "must NOT have additional properties" }];
                                            return false;
                                            break;
                                        }
                                    }
                                    if (_errs5 === errors) {
                                        if (data1.messageTimestamp !== undefined) {
                                            const _errs6 = errors;
                                            if (typeof data1.messageTimestamp !== "string") {
                                                validate48.errors = [{ instancePath: instancePath + "/descriptor/messageTimestamp", schemaPath: "#/properties/descriptor/properties/messageTimestamp/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                return false;
                                            }
                                            var valid1 = _errs6 === errors;
                                        }
                                        else {
                                            var valid1 = true;
                                        }
                                        if (valid1) {
                                            if (data1.permissionsGrantId !== undefined) {
                                                const _errs8 = errors;
                                                if (typeof data1.permissionsGrantId !== "string") {
                                                    validate48.errors = [{ instancePath: instancePath + "/descriptor/permissionsGrantId", schemaPath: "#/properties/descriptor/properties/permissionsGrantId/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                    return false;
                                                }
                                                var valid1 = _errs8 === errors;
                                            }
                                            else {
                                                var valid1 = true;
                                            }
                                            if (valid1) {
                                                if (data1.interface !== undefined) {
                                                    let data4 = data1.interface;
                                                    const _errs10 = errors;
                                                    if (typeof data4 !== "string") {
                                                        validate48.errors = [{ instancePath: instancePath + "/descriptor/interface", schemaPath: "#/properties/descriptor/properties/interface/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                        return false;
                                                    }
                                                    if (!(data4 === "Permissions")) {
                                                        validate48.errors = [{ instancePath: instancePath + "/descriptor/interface", schemaPath: "#/properties/descriptor/properties/interface/enum", keyword: "enum", params: { allowedValues: schema67.properties.descriptor.properties.interface.enum }, message: "must be equal to one of the allowed values" }];
                                                        return false;
                                                    }
                                                    var valid1 = _errs10 === errors;
                                                }
                                                else {
                                                    var valid1 = true;
                                                }
                                                if (valid1) {
                                                    if (data1.method !== undefined) {
                                                        let data5 = data1.method;
                                                        const _errs12 = errors;
                                                        if (typeof data5 !== "string") {
                                                            validate48.errors = [{ instancePath: instancePath + "/descriptor/method", schemaPath: "#/properties/descriptor/properties/method/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                            return false;
                                                        }
                                                        if (!(data5 === "Revoke")) {
                                                            validate48.errors = [{ instancePath: instancePath + "/descriptor/method", schemaPath: "#/properties/descriptor/properties/method/enum", keyword: "enum", params: { allowedValues: schema67.properties.descriptor.properties.method.enum }, message: "must be equal to one of the allowed values" }];
                                                            return false;
                                                        }
                                                        var valid1 = _errs12 === errors;
                                                    }
                                                    else {
                                                        var valid1 = true;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            else {
                                validate48.errors = [{ instancePath: instancePath + "/descriptor", schemaPath: "#/properties/descriptor/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
                                return false;
                            }
                        }
                        var valid0 = _errs3 === errors;
                    }
                    else {
                        var valid0 = true;
                    }
                }
            }
        }
    }
    else {
        validate48.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
        return false;
    }
} validate48.errors = vErrors; return errors === 0; }
export const PermissionsScopes = validate42;
const schema51 = { "$schema": "http://json-schema.org/draft-07/schema#", "$id": "https://identity.foundation/dwn/json-schemas/permissions/scopes.json", "type": "object", "definitions": { "protocols-query-scope": { "type": "object", "properties": { "interface": { "const": "Protocols" }, "method": { "const": "Query" } } }, "records-delete-scope": { "type": "object", "required": ["interface", "method"], "properties": { "interface": { "const": "Records" }, "method": { "const": "Delete" }, "schema": { "type": "string" } } }, "records-read-scope": { "type": "object", "required": ["interface", "method"], "properties": { "interface": { "const": "Records" }, "method": { "const": "Read" }, "schema": { "type": "string" }, "protocol": { "type": "string" }, "contextId": { "type": "string" }, "protocolPath": { "type": "string" } } }, "records-write-scope": { "type": "object", "required": ["interface", "method"], "properties": { "interface": { "const": "Records" }, "method": { "const": "Write" }, "schema": { "type": "string" }, "protocol": { "type": "string" }, "contextId": { "type": "string" }, "protocolPath": { "type": "string" } } } } };
function validate42(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) { /*# sourceURL="https://identity.foundation/dwn/json-schemas/permissions/scopes.json" */ ; let vErrors = null; let errors = 0; if (!(data && typeof data == "object" && !Array.isArray(data))) {
    validate42.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
    return false;
} validate42.errors = vErrors; return errors === 0; }
export const ProtocolDefinition = validate50;
const schema68 = { "$id": "https://identity.foundation/dwn/json-schemas/protocol-definition.json", "$schema": "http://json-schema.org/draft-07/schema#", "type": "object", "additionalProperties": false, "required": ["protocol", "published", "types", "structure"], "properties": { "protocol": { "type": "string" }, "published": { "type": "boolean" }, "types": { "type": "object", "patternProperties": { ".*": { "type": "object", "additionalProperties": false, "properties": { "schema": { "type": "string" }, "dataFormats": { "type": "array", "minItems": 1, "items": { "type": "string" } } } } } }, "structure": { "type": "object", "patternProperties": { ".*": { "$ref": "https://identity.foundation/dwn/json-schemas/protocol-rule-set.json" } } } } };
const pattern26 = new RegExp(".*", "u");
const schema69 = { "$id": "https://identity.foundation/dwn/json-schemas/protocol-rule-set.json", "$schema": "http://json-schema.org/draft-07/schema#", "type": "object", "additionalProperties": false, "properties": { "$encryption": { "type": "object", "additionalProperties": false, "properties": { "rootKeyId": { "type": "string" }, "publicKeyJwk": { "$ref": "https://identity.foundation/dwn/json-schemas/public-jwk.json" } } }, "$actions": { "type": "array", "minItems": 1, "items": { "type": "object", "oneOf": [{ "required": ["who", "can"], "additionalProperties": false, "properties": { "who": { "type": "string", "enum": ["anyone", "author", "recipient"] }, "of": { "type": "string" }, "can": { "type": "string", "enum": ["read", "write"] } } }, { "required": ["role", "can"], "properties": { "role": { "$comment": "Must be the protocol path of a record with either $globalRole or $contextRole set to true", "type": "string" }, "can": { "type": "string", "enum": ["read", "write"] } } }] } }, "$globalRole": { "$comment": "When `true`, this turns a record into `role` that may be used across contexts", "type": "boolean" }, "$contextRole": { "$comment": "When `true`, this turns a record into `role` that may be used within a context", "type": "boolean" } }, "patternProperties": { "^[^$].*": { "$ref": "https://identity.foundation/dwn/json-schemas/protocol-rule-set.json" } } };
const pattern28 = new RegExp("^[^$].*", "u");
const wrapper0 = { validate: validate51 };
function validate51(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) { /*# sourceURL="https://identity.foundation/dwn/json-schemas/protocol-rule-set.json" */ ; let vErrors = null; let errors = 0; if (errors === 0) {
    if (data && typeof data == "object" && !Array.isArray(data)) {
        const _errs1 = errors;
        for (const key0 in data) {
            if (!(((((key0 === "$encryption") || (key0 === "$actions")) || (key0 === "$globalRole")) || (key0 === "$contextRole")) || (pattern28.test(key0)))) {
                validate51.errors = [{ instancePath, schemaPath: "#/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties" }];
                return false;
                break;
            }
        }
        if (_errs1 === errors) {
            if (data.$encryption !== undefined) {
                let data0 = data.$encryption;
                const _errs2 = errors;
                if (errors === _errs2) {
                    if (data0 && typeof data0 == "object" && !Array.isArray(data0)) {
                        const _errs4 = errors;
                        for (const key1 in data0) {
                            if (!((key1 === "rootKeyId") || (key1 === "publicKeyJwk"))) {
                                validate51.errors = [{ instancePath: instancePath + "/$encryption", schemaPath: "#/properties/%24encryption/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key1 }, message: "must NOT have additional properties" }];
                                return false;
                                break;
                            }
                        }
                        if (_errs4 === errors) {
                            if (data0.rootKeyId !== undefined) {
                                const _errs5 = errors;
                                if (typeof data0.rootKeyId !== "string") {
                                    validate51.errors = [{ instancePath: instancePath + "/$encryption/rootKeyId", schemaPath: "#/properties/%24encryption/properties/rootKeyId/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                    return false;
                                }
                                var valid1 = _errs5 === errors;
                            }
                            else {
                                var valid1 = true;
                            }
                            if (valid1) {
                                if (data0.publicKeyJwk !== undefined) {
                                    const _errs7 = errors;
                                    if (!(validate27(data0.publicKeyJwk, { instancePath: instancePath + "/$encryption/publicKeyJwk", parentData: data0, parentDataProperty: "publicKeyJwk", rootData }))) {
                                        vErrors = vErrors === null ? validate27.errors : vErrors.concat(validate27.errors);
                                        errors = vErrors.length;
                                    }
                                    var valid1 = _errs7 === errors;
                                }
                                else {
                                    var valid1 = true;
                                }
                            }
                        }
                    }
                    else {
                        validate51.errors = [{ instancePath: instancePath + "/$encryption", schemaPath: "#/properties/%24encryption/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
                        return false;
                    }
                }
                var valid0 = _errs2 === errors;
            }
            else {
                var valid0 = true;
            }
            if (valid0) {
                if (data.$actions !== undefined) {
                    let data3 = data.$actions;
                    const _errs8 = errors;
                    if (errors === _errs8) {
                        if (Array.isArray(data3)) {
                            if (data3.length < 1) {
                                validate51.errors = [{ instancePath: instancePath + "/$actions", schemaPath: "#/properties/%24actions/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }];
                                return false;
                            }
                            else {
                                var valid2 = true;
                                const len0 = data3.length;
                                for (let i0 = 0; i0 < len0; i0++) {
                                    let data4 = data3[i0];
                                    const _errs10 = errors;
                                    if (!(data4 && typeof data4 == "object" && !Array.isArray(data4))) {
                                        validate51.errors = [{ instancePath: instancePath + "/$actions/" + i0, schemaPath: "#/properties/%24actions/items/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
                                        return false;
                                    }
                                    const _errs12 = errors;
                                    let valid3 = false;
                                    let passing0 = null;
                                    const _errs13 = errors;
                                    if (data4 && typeof data4 == "object" && !Array.isArray(data4)) {
                                        let missing0;
                                        if (((data4.who === undefined) && (missing0 = "who")) || ((data4.can === undefined) && (missing0 = "can"))) {
                                            const err0 = { instancePath: instancePath + "/$actions/" + i0, schemaPath: "#/properties/%24actions/items/oneOf/0/required", keyword: "required", params: { missingProperty: missing0 }, message: "must have required property '" + missing0 + "'" };
                                            if (vErrors === null) {
                                                vErrors = [err0];
                                            }
                                            else {
                                                vErrors.push(err0);
                                            }
                                            errors++;
                                        }
                                        else {
                                            const _errs14 = errors;
                                            for (const key2 in data4) {
                                                if (!(((key2 === "who") || (key2 === "of")) || (key2 === "can"))) {
                                                    const err1 = { instancePath: instancePath + "/$actions/" + i0, schemaPath: "#/properties/%24actions/items/oneOf/0/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key2 }, message: "must NOT have additional properties" };
                                                    if (vErrors === null) {
                                                        vErrors = [err1];
                                                    }
                                                    else {
                                                        vErrors.push(err1);
                                                    }
                                                    errors++;
                                                    break;
                                                }
                                            }
                                            if (_errs14 === errors) {
                                                if (data4.who !== undefined) {
                                                    let data5 = data4.who;
                                                    const _errs15 = errors;
                                                    if (typeof data5 !== "string") {
                                                        const err2 = { instancePath: instancePath + "/$actions/" + i0 + "/who", schemaPath: "#/properties/%24actions/items/oneOf/0/properties/who/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                                                        if (vErrors === null) {
                                                            vErrors = [err2];
                                                        }
                                                        else {
                                                            vErrors.push(err2);
                                                        }
                                                        errors++;
                                                    }
                                                    if (!(((data5 === "anyone") || (data5 === "author")) || (data5 === "recipient"))) {
                                                        const err3 = { instancePath: instancePath + "/$actions/" + i0 + "/who", schemaPath: "#/properties/%24actions/items/oneOf/0/properties/who/enum", keyword: "enum", params: { allowedValues: schema69.properties.$actions.items.oneOf[0].properties.who.enum }, message: "must be equal to one of the allowed values" };
                                                        if (vErrors === null) {
                                                            vErrors = [err3];
                                                        }
                                                        else {
                                                            vErrors.push(err3);
                                                        }
                                                        errors++;
                                                    }
                                                    var valid4 = _errs15 === errors;
                                                }
                                                else {
                                                    var valid4 = true;
                                                }
                                                if (valid4) {
                                                    if (data4.of !== undefined) {
                                                        const _errs17 = errors;
                                                        if (typeof data4.of !== "string") {
                                                            const err4 = { instancePath: instancePath + "/$actions/" + i0 + "/of", schemaPath: "#/properties/%24actions/items/oneOf/0/properties/of/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                                                            if (vErrors === null) {
                                                                vErrors = [err4];
                                                            }
                                                            else {
                                                                vErrors.push(err4);
                                                            }
                                                            errors++;
                                                        }
                                                        var valid4 = _errs17 === errors;
                                                    }
                                                    else {
                                                        var valid4 = true;
                                                    }
                                                    if (valid4) {
                                                        if (data4.can !== undefined) {
                                                            let data7 = data4.can;
                                                            const _errs19 = errors;
                                                            if (typeof data7 !== "string") {
                                                                const err5 = { instancePath: instancePath + "/$actions/" + i0 + "/can", schemaPath: "#/properties/%24actions/items/oneOf/0/properties/can/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                                                                if (vErrors === null) {
                                                                    vErrors = [err5];
                                                                }
                                                                else {
                                                                    vErrors.push(err5);
                                                                }
                                                                errors++;
                                                            }
                                                            if (!((data7 === "read") || (data7 === "write"))) {
                                                                const err6 = { instancePath: instancePath + "/$actions/" + i0 + "/can", schemaPath: "#/properties/%24actions/items/oneOf/0/properties/can/enum", keyword: "enum", params: { allowedValues: schema69.properties.$actions.items.oneOf[0].properties.can.enum }, message: "must be equal to one of the allowed values" };
                                                                if (vErrors === null) {
                                                                    vErrors = [err6];
                                                                }
                                                                else {
                                                                    vErrors.push(err6);
                                                                }
                                                                errors++;
                                                            }
                                                            var valid4 = _errs19 === errors;
                                                        }
                                                        else {
                                                            var valid4 = true;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    var _valid0 = _errs13 === errors;
                                    if (_valid0) {
                                        valid3 = true;
                                        passing0 = 0;
                                    }
                                    const _errs21 = errors;
                                    if (data4 && typeof data4 == "object" && !Array.isArray(data4)) {
                                        let missing1;
                                        if (((data4.role === undefined) && (missing1 = "role")) || ((data4.can === undefined) && (missing1 = "can"))) {
                                            const err7 = { instancePath: instancePath + "/$actions/" + i0, schemaPath: "#/properties/%24actions/items/oneOf/1/required", keyword: "required", params: { missingProperty: missing1 }, message: "must have required property '" + missing1 + "'" };
                                            if (vErrors === null) {
                                                vErrors = [err7];
                                            }
                                            else {
                                                vErrors.push(err7);
                                            }
                                            errors++;
                                        }
                                        else {
                                            if (data4.role !== undefined) {
                                                const _errs22 = errors;
                                                if (typeof data4.role !== "string") {
                                                    const err8 = { instancePath: instancePath + "/$actions/" + i0 + "/role", schemaPath: "#/properties/%24actions/items/oneOf/1/properties/role/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                                                    if (vErrors === null) {
                                                        vErrors = [err8];
                                                    }
                                                    else {
                                                        vErrors.push(err8);
                                                    }
                                                    errors++;
                                                }
                                                var valid5 = _errs22 === errors;
                                            }
                                            else {
                                                var valid5 = true;
                                            }
                                            if (valid5) {
                                                if (data4.can !== undefined) {
                                                    let data9 = data4.can;
                                                    const _errs25 = errors;
                                                    if (typeof data9 !== "string") {
                                                        const err9 = { instancePath: instancePath + "/$actions/" + i0 + "/can", schemaPath: "#/properties/%24actions/items/oneOf/1/properties/can/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                                                        if (vErrors === null) {
                                                            vErrors = [err9];
                                                        }
                                                        else {
                                                            vErrors.push(err9);
                                                        }
                                                        errors++;
                                                    }
                                                    if (!((data9 === "read") || (data9 === "write"))) {
                                                        const err10 = { instancePath: instancePath + "/$actions/" + i0 + "/can", schemaPath: "#/properties/%24actions/items/oneOf/1/properties/can/enum", keyword: "enum", params: { allowedValues: schema69.properties.$actions.items.oneOf[1].properties.can.enum }, message: "must be equal to one of the allowed values" };
                                                        if (vErrors === null) {
                                                            vErrors = [err10];
                                                        }
                                                        else {
                                                            vErrors.push(err10);
                                                        }
                                                        errors++;
                                                    }
                                                    var valid5 = _errs25 === errors;
                                                }
                                                else {
                                                    var valid5 = true;
                                                }
                                            }
                                        }
                                    }
                                    var _valid0 = _errs21 === errors;
                                    if (_valid0 && valid3) {
                                        valid3 = false;
                                        passing0 = [passing0, 1];
                                    }
                                    else {
                                        if (_valid0) {
                                            valid3 = true;
                                            passing0 = 1;
                                        }
                                    }
                                    if (!valid3) {
                                        const err11 = { instancePath: instancePath + "/$actions/" + i0, schemaPath: "#/properties/%24actions/items/oneOf", keyword: "oneOf", params: { passingSchemas: passing0 }, message: "must match exactly one schema in oneOf" };
                                        if (vErrors === null) {
                                            vErrors = [err11];
                                        }
                                        else {
                                            vErrors.push(err11);
                                        }
                                        errors++;
                                        validate51.errors = vErrors;
                                        return false;
                                    }
                                    else {
                                        errors = _errs12;
                                        if (vErrors !== null) {
                                            if (_errs12) {
                                                vErrors.length = _errs12;
                                            }
                                            else {
                                                vErrors = null;
                                            }
                                        }
                                    }
                                    var valid2 = _errs10 === errors;
                                    if (!valid2) {
                                        break;
                                    }
                                }
                            }
                        }
                        else {
                            validate51.errors = [{ instancePath: instancePath + "/$actions", schemaPath: "#/properties/%24actions/type", keyword: "type", params: { type: "array" }, message: "must be array" }];
                            return false;
                        }
                    }
                    var valid0 = _errs8 === errors;
                }
                else {
                    var valid0 = true;
                }
                if (valid0) {
                    if (data.$globalRole !== undefined) {
                        const _errs27 = errors;
                        if (typeof data.$globalRole !== "boolean") {
                            validate51.errors = [{ instancePath: instancePath + "/$globalRole", schemaPath: "#/properties/%24globalRole/type", keyword: "type", params: { type: "boolean" }, message: "must be boolean" }];
                            return false;
                        }
                        var valid0 = _errs27 === errors;
                    }
                    else {
                        var valid0 = true;
                    }
                    if (valid0) {
                        if (data.$contextRole !== undefined) {
                            const _errs30 = errors;
                            if (typeof data.$contextRole !== "boolean") {
                                validate51.errors = [{ instancePath: instancePath + "/$contextRole", schemaPath: "#/properties/%24contextRole/type", keyword: "type", params: { type: "boolean" }, message: "must be boolean" }];
                                return false;
                            }
                            var valid0 = _errs30 === errors;
                        }
                        else {
                            var valid0 = true;
                        }
                        if (valid0) {
                            var valid6 = true;
                            for (const key3 in data) {
                                if (pattern28.test(key3)) {
                                    const _errs33 = errors;
                                    if (!(wrapper0.validate(data[key3], { instancePath: instancePath + "/" + key3.replace(/~/g, "~0").replace(/\//g, "~1"), parentData: data, parentDataProperty: key3, rootData }))) {
                                        vErrors = vErrors === null ? wrapper0.validate.errors : vErrors.concat(wrapper0.validate.errors);
                                        errors = vErrors.length;
                                    }
                                    var valid6 = _errs33 === errors;
                                    if (!valid6) {
                                        break;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    else {
        validate51.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
        return false;
    }
} validate51.errors = vErrors; return errors === 0; }
function validate50(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) { /*# sourceURL="https://identity.foundation/dwn/json-schemas/protocol-definition.json" */ ; let vErrors = null; let errors = 0; if (errors === 0) {
    if (data && typeof data == "object" && !Array.isArray(data)) {
        let missing0;
        if (((((data.protocol === undefined) && (missing0 = "protocol")) || ((data.published === undefined) && (missing0 = "published"))) || ((data.types === undefined) && (missing0 = "types"))) || ((data.structure === undefined) && (missing0 = "structure"))) {
            validate50.errors = [{ instancePath, schemaPath: "#/required", keyword: "required", params: { missingProperty: missing0 }, message: "must have required property '" + missing0 + "'" }];
            return false;
        }
        else {
            const _errs1 = errors;
            for (const key0 in data) {
                if (!((((key0 === "protocol") || (key0 === "published")) || (key0 === "types")) || (key0 === "structure"))) {
                    validate50.errors = [{ instancePath, schemaPath: "#/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties" }];
                    return false;
                    break;
                }
            }
            if (_errs1 === errors) {
                if (data.protocol !== undefined) {
                    const _errs2 = errors;
                    if (typeof data.protocol !== "string") {
                        validate50.errors = [{ instancePath: instancePath + "/protocol", schemaPath: "#/properties/protocol/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                        return false;
                    }
                    var valid0 = _errs2 === errors;
                }
                else {
                    var valid0 = true;
                }
                if (valid0) {
                    if (data.published !== undefined) {
                        const _errs4 = errors;
                        if (typeof data.published !== "boolean") {
                            validate50.errors = [{ instancePath: instancePath + "/published", schemaPath: "#/properties/published/type", keyword: "type", params: { type: "boolean" }, message: "must be boolean" }];
                            return false;
                        }
                        var valid0 = _errs4 === errors;
                    }
                    else {
                        var valid0 = true;
                    }
                    if (valid0) {
                        if (data.types !== undefined) {
                            let data2 = data.types;
                            const _errs6 = errors;
                            if (errors === _errs6) {
                                if (data2 && typeof data2 == "object" && !Array.isArray(data2)) {
                                    var valid1 = true;
                                    for (const key1 in data2) {
                                        if (pattern26.test(key1)) {
                                            let data3 = data2[key1];
                                            const _errs8 = errors;
                                            if (errors === _errs8) {
                                                if (data3 && typeof data3 == "object" && !Array.isArray(data3)) {
                                                    const _errs10 = errors;
                                                    for (const key2 in data3) {
                                                        if (!((key2 === "schema") || (key2 === "dataFormats"))) {
                                                            validate50.errors = [{ instancePath: instancePath + "/types/" + key1.replace(/~/g, "~0").replace(/\//g, "~1"), schemaPath: "#/properties/types/patternProperties/.*/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key2 }, message: "must NOT have additional properties" }];
                                                            return false;
                                                            break;
                                                        }
                                                    }
                                                    if (_errs10 === errors) {
                                                        if (data3.schema !== undefined) {
                                                            const _errs11 = errors;
                                                            if (typeof data3.schema !== "string") {
                                                                validate50.errors = [{ instancePath: instancePath + "/types/" + key1.replace(/~/g, "~0").replace(/\//g, "~1") + "/schema", schemaPath: "#/properties/types/patternProperties/.*/properties/schema/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                                return false;
                                                            }
                                                            var valid2 = _errs11 === errors;
                                                        }
                                                        else {
                                                            var valid2 = true;
                                                        }
                                                        if (valid2) {
                                                            if (data3.dataFormats !== undefined) {
                                                                let data5 = data3.dataFormats;
                                                                const _errs13 = errors;
                                                                if (errors === _errs13) {
                                                                    if (Array.isArray(data5)) {
                                                                        if (data5.length < 1) {
                                                                            validate50.errors = [{ instancePath: instancePath + "/types/" + key1.replace(/~/g, "~0").replace(/\//g, "~1") + "/dataFormats", schemaPath: "#/properties/types/patternProperties/.*/properties/dataFormats/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }];
                                                                            return false;
                                                                        }
                                                                        else {
                                                                            var valid3 = true;
                                                                            const len0 = data5.length;
                                                                            for (let i0 = 0; i0 < len0; i0++) {
                                                                                const _errs15 = errors;
                                                                                if (typeof data5[i0] !== "string") {
                                                                                    validate50.errors = [{ instancePath: instancePath + "/types/" + key1.replace(/~/g, "~0").replace(/\//g, "~1") + "/dataFormats/" + i0, schemaPath: "#/properties/types/patternProperties/.*/properties/dataFormats/items/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                                                    return false;
                                                                                }
                                                                                var valid3 = _errs15 === errors;
                                                                                if (!valid3) {
                                                                                    break;
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    else {
                                                                        validate50.errors = [{ instancePath: instancePath + "/types/" + key1.replace(/~/g, "~0").replace(/\//g, "~1") + "/dataFormats", schemaPath: "#/properties/types/patternProperties/.*/properties/dataFormats/type", keyword: "type", params: { type: "array" }, message: "must be array" }];
                                                                        return false;
                                                                    }
                                                                }
                                                                var valid2 = _errs13 === errors;
                                                            }
                                                            else {
                                                                var valid2 = true;
                                                            }
                                                        }
                                                    }
                                                }
                                                else {
                                                    validate50.errors = [{ instancePath: instancePath + "/types/" + key1.replace(/~/g, "~0").replace(/\//g, "~1"), schemaPath: "#/properties/types/patternProperties/.*/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
                                                    return false;
                                                }
                                            }
                                            var valid1 = _errs8 === errors;
                                            if (!valid1) {
                                                break;
                                            }
                                        }
                                    }
                                }
                                else {
                                    validate50.errors = [{ instancePath: instancePath + "/types", schemaPath: "#/properties/types/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
                                    return false;
                                }
                            }
                            var valid0 = _errs6 === errors;
                        }
                        else {
                            var valid0 = true;
                        }
                        if (valid0) {
                            if (data.structure !== undefined) {
                                let data7 = data.structure;
                                const _errs17 = errors;
                                if (errors === _errs17) {
                                    if (data7 && typeof data7 == "object" && !Array.isArray(data7)) {
                                        var valid4 = true;
                                        for (const key3 in data7) {
                                            if (pattern26.test(key3)) {
                                                const _errs19 = errors;
                                                if (!(validate51(data7[key3], { instancePath: instancePath + "/structure/" + key3.replace(/~/g, "~0").replace(/\//g, "~1"), parentData: data7, parentDataProperty: key3, rootData }))) {
                                                    vErrors = vErrors === null ? validate51.errors : vErrors.concat(validate51.errors);
                                                    errors = vErrors.length;
                                                }
                                                var valid4 = _errs19 === errors;
                                                if (!valid4) {
                                                    break;
                                                }
                                            }
                                        }
                                    }
                                    else {
                                        validate50.errors = [{ instancePath: instancePath + "/structure", schemaPath: "#/properties/structure/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
                                        return false;
                                    }
                                }
                                var valid0 = _errs17 === errors;
                            }
                            else {
                                var valid0 = true;
                            }
                        }
                    }
                }
            }
        }
    }
    else {
        validate50.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
        return false;
    }
} validate50.errors = vErrors; return errors === 0; }
export const ProtocolRuleSet = validate51;
export const ProtocolsConfigure = validate54;
const schema70 = { "$schema": "http://json-schema.org/draft-07/schema#", "$id": "https://identity.foundation/dwn/json-schemas/protocols-configure.json", "type": "object", "additionalProperties": false, "required": ["authorization", "descriptor"], "properties": { "authorization": { "$ref": "https://identity.foundation/dwn/json-schemas/authorization.json" }, "descriptor": { "type": "object", "additionalProperties": false, "required": ["interface", "method", "messageTimestamp", "definition"], "properties": { "interface": { "enum": ["Protocols"], "type": "string" }, "method": { "enum": ["Configure"], "type": "string" }, "messageTimestamp": { "$ref": "https://identity.foundation/dwn/json-schemas/defs.json#/definitions/date-time" }, "definition": { "$ref": "https://identity.foundation/dwn/json-schemas/protocol-definition.json" } } } } };
function validate54(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) { /*# sourceURL="https://identity.foundation/dwn/json-schemas/protocols-configure.json" */ ; let vErrors = null; let errors = 0; if (errors === 0) {
    if (data && typeof data == "object" && !Array.isArray(data)) {
        let missing0;
        if (((data.authorization === undefined) && (missing0 = "authorization")) || ((data.descriptor === undefined) && (missing0 = "descriptor"))) {
            validate54.errors = [{ instancePath, schemaPath: "#/required", keyword: "required", params: { missingProperty: missing0 }, message: "must have required property '" + missing0 + "'" }];
            return false;
        }
        else {
            const _errs1 = errors;
            for (const key0 in data) {
                if (!((key0 === "authorization") || (key0 === "descriptor"))) {
                    validate54.errors = [{ instancePath, schemaPath: "#/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties" }];
                    return false;
                    break;
                }
            }
            if (_errs1 === errors) {
                if (data.authorization !== undefined) {
                    const _errs2 = errors;
                    if (!(validate10(data.authorization, { instancePath: instancePath + "/authorization", parentData: data, parentDataProperty: "authorization", rootData }))) {
                        vErrors = vErrors === null ? validate10.errors : vErrors.concat(validate10.errors);
                        errors = vErrors.length;
                    }
                    var valid0 = _errs2 === errors;
                }
                else {
                    var valid0 = true;
                }
                if (valid0) {
                    if (data.descriptor !== undefined) {
                        let data1 = data.descriptor;
                        const _errs3 = errors;
                        if (errors === _errs3) {
                            if (data1 && typeof data1 == "object" && !Array.isArray(data1)) {
                                let missing1;
                                if (((((data1.interface === undefined) && (missing1 = "interface")) || ((data1.method === undefined) && (missing1 = "method"))) || ((data1.messageTimestamp === undefined) && (missing1 = "messageTimestamp"))) || ((data1.definition === undefined) && (missing1 = "definition"))) {
                                    validate54.errors = [{ instancePath: instancePath + "/descriptor", schemaPath: "#/properties/descriptor/required", keyword: "required", params: { missingProperty: missing1 }, message: "must have required property '" + missing1 + "'" }];
                                    return false;
                                }
                                else {
                                    const _errs5 = errors;
                                    for (const key1 in data1) {
                                        if (!((((key1 === "interface") || (key1 === "method")) || (key1 === "messageTimestamp")) || (key1 === "definition"))) {
                                            validate54.errors = [{ instancePath: instancePath + "/descriptor", schemaPath: "#/properties/descriptor/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key1 }, message: "must NOT have additional properties" }];
                                            return false;
                                            break;
                                        }
                                    }
                                    if (_errs5 === errors) {
                                        if (data1.interface !== undefined) {
                                            let data2 = data1.interface;
                                            const _errs6 = errors;
                                            if (typeof data2 !== "string") {
                                                validate54.errors = [{ instancePath: instancePath + "/descriptor/interface", schemaPath: "#/properties/descriptor/properties/interface/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                return false;
                                            }
                                            if (!(data2 === "Protocols")) {
                                                validate54.errors = [{ instancePath: instancePath + "/descriptor/interface", schemaPath: "#/properties/descriptor/properties/interface/enum", keyword: "enum", params: { allowedValues: schema70.properties.descriptor.properties.interface.enum }, message: "must be equal to one of the allowed values" }];
                                                return false;
                                            }
                                            var valid1 = _errs6 === errors;
                                        }
                                        else {
                                            var valid1 = true;
                                        }
                                        if (valid1) {
                                            if (data1.method !== undefined) {
                                                let data3 = data1.method;
                                                const _errs8 = errors;
                                                if (typeof data3 !== "string") {
                                                    validate54.errors = [{ instancePath: instancePath + "/descriptor/method", schemaPath: "#/properties/descriptor/properties/method/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                    return false;
                                                }
                                                if (!(data3 === "Configure")) {
                                                    validate54.errors = [{ instancePath: instancePath + "/descriptor/method", schemaPath: "#/properties/descriptor/properties/method/enum", keyword: "enum", params: { allowedValues: schema70.properties.descriptor.properties.method.enum }, message: "must be equal to one of the allowed values" }];
                                                    return false;
                                                }
                                                var valid1 = _errs8 === errors;
                                            }
                                            else {
                                                var valid1 = true;
                                            }
                                            if (valid1) {
                                                if (data1.messageTimestamp !== undefined) {
                                                    let data4 = data1.messageTimestamp;
                                                    const _errs10 = errors;
                                                    const _errs11 = errors;
                                                    if (errors === _errs11) {
                                                        if (typeof data4 === "string") {
                                                            if (!pattern3.test(data4)) {
                                                                validate54.errors = [{ instancePath: instancePath + "/descriptor/messageTimestamp", schemaPath: "https://identity.foundation/dwn/json-schemas/defs.json#/definitions/date-time/pattern", keyword: "pattern", params: { pattern: "^\\d{4}-[0-1]\\d-[0-3]\\dT(?:[0-2]\\d:[0-5]\\d:[0-5]\\d|23:59:60)\\.\\d{6}Z$" }, message: "must match pattern \"" + "^\\d{4}-[0-1]\\d-[0-3]\\dT(?:[0-2]\\d:[0-5]\\d:[0-5]\\d|23:59:60)\\.\\d{6}Z$" + "\"" }];
                                                                return false;
                                                            }
                                                        }
                                                        else {
                                                            validate54.errors = [{ instancePath: instancePath + "/descriptor/messageTimestamp", schemaPath: "https://identity.foundation/dwn/json-schemas/defs.json#/definitions/date-time/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                            return false;
                                                        }
                                                    }
                                                    var valid1 = _errs10 === errors;
                                                }
                                                else {
                                                    var valid1 = true;
                                                }
                                                if (valid1) {
                                                    if (data1.definition !== undefined) {
                                                        const _errs13 = errors;
                                                        if (!(validate50(data1.definition, { instancePath: instancePath + "/descriptor/definition", parentData: data1, parentDataProperty: "definition", rootData }))) {
                                                            vErrors = vErrors === null ? validate50.errors : vErrors.concat(validate50.errors);
                                                            errors = vErrors.length;
                                                        }
                                                        var valid1 = _errs13 === errors;
                                                    }
                                                    else {
                                                        var valid1 = true;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            else {
                                validate54.errors = [{ instancePath: instancePath + "/descriptor", schemaPath: "#/properties/descriptor/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
                                return false;
                            }
                        }
                        var valid0 = _errs3 === errors;
                    }
                    else {
                        var valid0 = true;
                    }
                }
            }
        }
    }
    else {
        validate54.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
        return false;
    }
} validate54.errors = vErrors; return errors === 0; }
export const ProtocolsQuery = validate57;
const schema72 = { "$schema": "http://json-schema.org/draft-07/schema#", "$id": "https://identity.foundation/dwn/json-schemas/protocols-query.json", "type": "object", "additionalProperties": false, "required": ["descriptor"], "properties": { "authorization": { "$ref": "https://identity.foundation/dwn/json-schemas/authorization.json" }, "descriptor": { "type": "object", "additionalProperties": false, "required": ["interface", "method", "messageTimestamp"], "properties": { "interface": { "enum": ["Protocols"], "type": "string" }, "method": { "enum": ["Query"], "type": "string" }, "messageTimestamp": { "type": "string" }, "filter": { "type": "object", "minProperties": 1, "additionalProperties": false, "properties": { "protocol": { "type": "string" }, "recipient": { "$ref": "https://identity.foundation/dwn/json-schemas/defs.json#/definitions/did" } } } } } } };
function validate57(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) { /*# sourceURL="https://identity.foundation/dwn/json-schemas/protocols-query.json" */ ; let vErrors = null; let errors = 0; if (errors === 0) {
    if (data && typeof data == "object" && !Array.isArray(data)) {
        let missing0;
        if ((data.descriptor === undefined) && (missing0 = "descriptor")) {
            validate57.errors = [{ instancePath, schemaPath: "#/required", keyword: "required", params: { missingProperty: missing0 }, message: "must have required property '" + missing0 + "'" }];
            return false;
        }
        else {
            const _errs1 = errors;
            for (const key0 in data) {
                if (!((key0 === "authorization") || (key0 === "descriptor"))) {
                    validate57.errors = [{ instancePath, schemaPath: "#/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties" }];
                    return false;
                    break;
                }
            }
            if (_errs1 === errors) {
                if (data.authorization !== undefined) {
                    const _errs2 = errors;
                    if (!(validate10(data.authorization, { instancePath: instancePath + "/authorization", parentData: data, parentDataProperty: "authorization", rootData }))) {
                        vErrors = vErrors === null ? validate10.errors : vErrors.concat(validate10.errors);
                        errors = vErrors.length;
                    }
                    var valid0 = _errs2 === errors;
                }
                else {
                    var valid0 = true;
                }
                if (valid0) {
                    if (data.descriptor !== undefined) {
                        let data1 = data.descriptor;
                        const _errs3 = errors;
                        if (errors === _errs3) {
                            if (data1 && typeof data1 == "object" && !Array.isArray(data1)) {
                                let missing1;
                                if ((((data1.interface === undefined) && (missing1 = "interface")) || ((data1.method === undefined) && (missing1 = "method"))) || ((data1.messageTimestamp === undefined) && (missing1 = "messageTimestamp"))) {
                                    validate57.errors = [{ instancePath: instancePath + "/descriptor", schemaPath: "#/properties/descriptor/required", keyword: "required", params: { missingProperty: missing1 }, message: "must have required property '" + missing1 + "'" }];
                                    return false;
                                }
                                else {
                                    const _errs5 = errors;
                                    for (const key1 in data1) {
                                        if (!((((key1 === "interface") || (key1 === "method")) || (key1 === "messageTimestamp")) || (key1 === "filter"))) {
                                            validate57.errors = [{ instancePath: instancePath + "/descriptor", schemaPath: "#/properties/descriptor/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key1 }, message: "must NOT have additional properties" }];
                                            return false;
                                            break;
                                        }
                                    }
                                    if (_errs5 === errors) {
                                        if (data1.interface !== undefined) {
                                            let data2 = data1.interface;
                                            const _errs6 = errors;
                                            if (typeof data2 !== "string") {
                                                validate57.errors = [{ instancePath: instancePath + "/descriptor/interface", schemaPath: "#/properties/descriptor/properties/interface/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                return false;
                                            }
                                            if (!(data2 === "Protocols")) {
                                                validate57.errors = [{ instancePath: instancePath + "/descriptor/interface", schemaPath: "#/properties/descriptor/properties/interface/enum", keyword: "enum", params: { allowedValues: schema72.properties.descriptor.properties.interface.enum }, message: "must be equal to one of the allowed values" }];
                                                return false;
                                            }
                                            var valid1 = _errs6 === errors;
                                        }
                                        else {
                                            var valid1 = true;
                                        }
                                        if (valid1) {
                                            if (data1.method !== undefined) {
                                                let data3 = data1.method;
                                                const _errs8 = errors;
                                                if (typeof data3 !== "string") {
                                                    validate57.errors = [{ instancePath: instancePath + "/descriptor/method", schemaPath: "#/properties/descriptor/properties/method/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                    return false;
                                                }
                                                if (!(data3 === "Query")) {
                                                    validate57.errors = [{ instancePath: instancePath + "/descriptor/method", schemaPath: "#/properties/descriptor/properties/method/enum", keyword: "enum", params: { allowedValues: schema72.properties.descriptor.properties.method.enum }, message: "must be equal to one of the allowed values" }];
                                                    return false;
                                                }
                                                var valid1 = _errs8 === errors;
                                            }
                                            else {
                                                var valid1 = true;
                                            }
                                            if (valid1) {
                                                if (data1.messageTimestamp !== undefined) {
                                                    const _errs10 = errors;
                                                    if (typeof data1.messageTimestamp !== "string") {
                                                        validate57.errors = [{ instancePath: instancePath + "/descriptor/messageTimestamp", schemaPath: "#/properties/descriptor/properties/messageTimestamp/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                        return false;
                                                    }
                                                    var valid1 = _errs10 === errors;
                                                }
                                                else {
                                                    var valid1 = true;
                                                }
                                                if (valid1) {
                                                    if (data1.filter !== undefined) {
                                                        let data5 = data1.filter;
                                                        const _errs12 = errors;
                                                        if (errors === _errs12) {
                                                            if (data5 && typeof data5 == "object" && !Array.isArray(data5)) {
                                                                if (Object.keys(data5).length < 1) {
                                                                    validate57.errors = [{ instancePath: instancePath + "/descriptor/filter", schemaPath: "#/properties/descriptor/properties/filter/minProperties", keyword: "minProperties", params: { limit: 1 }, message: "must NOT have fewer than 1 properties" }];
                                                                    return false;
                                                                }
                                                                else {
                                                                    const _errs14 = errors;
                                                                    for (const key2 in data5) {
                                                                        if (!((key2 === "protocol") || (key2 === "recipient"))) {
                                                                            validate57.errors = [{ instancePath: instancePath + "/descriptor/filter", schemaPath: "#/properties/descriptor/properties/filter/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key2 }, message: "must NOT have additional properties" }];
                                                                            return false;
                                                                            break;
                                                                        }
                                                                    }
                                                                    if (_errs14 === errors) {
                                                                        if (data5.protocol !== undefined) {
                                                                            const _errs15 = errors;
                                                                            if (typeof data5.protocol !== "string") {
                                                                                validate57.errors = [{ instancePath: instancePath + "/descriptor/filter/protocol", schemaPath: "#/properties/descriptor/properties/filter/properties/protocol/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                                                return false;
                                                                            }
                                                                            var valid2 = _errs15 === errors;
                                                                        }
                                                                        else {
                                                                            var valid2 = true;
                                                                        }
                                                                        if (valid2) {
                                                                            if (data5.recipient !== undefined) {
                                                                                let data7 = data5.recipient;
                                                                                const _errs17 = errors;
                                                                                const _errs18 = errors;
                                                                                if (errors === _errs18) {
                                                                                    if (typeof data7 === "string") {
                                                                                        if (!pattern4.test(data7)) {
                                                                                            validate57.errors = [{ instancePath: instancePath + "/descriptor/filter/recipient", schemaPath: "https://identity.foundation/dwn/json-schemas/defs.json#/definitions/did/pattern", keyword: "pattern", params: { pattern: "^did:([a-z0-9]+):((?:(?:[a-zA-Z0-9._-]|(?:%[0-9a-fA-F]{2}))*:)*((?:[a-zA-Z0-9._-]|(?:%[0-9a-fA-F]{2}))+))((;[a-zA-Z0-9_.:%-]+=[a-zA-Z0-9_.:%-]*)*)(/[^#?]*)?([?][^#]*)?(#.*)?$" }, message: "must match pattern \"" + "^did:([a-z0-9]+):((?:(?:[a-zA-Z0-9._-]|(?:%[0-9a-fA-F]{2}))*:)*((?:[a-zA-Z0-9._-]|(?:%[0-9a-fA-F]{2}))+))((;[a-zA-Z0-9_.:%-]+=[a-zA-Z0-9_.:%-]*)*)(/[^#?]*)?([?][^#]*)?(#.*)?$" + "\"" }];
                                                                                            return false;
                                                                                        }
                                                                                    }
                                                                                    else {
                                                                                        validate57.errors = [{ instancePath: instancePath + "/descriptor/filter/recipient", schemaPath: "https://identity.foundation/dwn/json-schemas/defs.json#/definitions/did/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                                                        return false;
                                                                                    }
                                                                                }
                                                                                var valid2 = _errs17 === errors;
                                                                            }
                                                                            else {
                                                                                var valid2 = true;
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            else {
                                                                validate57.errors = [{ instancePath: instancePath + "/descriptor/filter", schemaPath: "#/properties/descriptor/properties/filter/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
                                                                return false;
                                                            }
                                                        }
                                                        var valid1 = _errs12 === errors;
                                                    }
                                                    else {
                                                        var valid1 = true;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            else {
                                validate57.errors = [{ instancePath: instancePath + "/descriptor", schemaPath: "#/properties/descriptor/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
                                return false;
                            }
                        }
                        var valid0 = _errs3 === errors;
                    }
                    else {
                        var valid0 = true;
                    }
                }
            }
        }
    }
    else {
        validate57.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
        return false;
    }
} validate57.errors = vErrors; return errors === 0; }
export const RecordsRead = validate59;
const schema74 = { "$schema": "http://json-schema.org/draft-07/schema#", "$id": "https://identity.foundation/dwn/json-schemas/records-read.json", "type": "object", "additionalProperties": false, "required": ["descriptor"], "properties": { "authorization": { "$ref": "https://identity.foundation/dwn/json-schemas/authorization.json" }, "descriptor": { "type": "object", "additionalProperties": false, "required": ["interface", "method", "messageTimestamp", "filter"], "properties": { "interface": { "enum": ["Records"], "type": "string" }, "method": { "enum": ["Read"], "type": "string" }, "messageTimestamp": { "type": "string" }, "filter": { "$ref": "https://identity.foundation/dwn/json-schemas/records-filter.json" } } } } };
function validate59(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) { /*# sourceURL="https://identity.foundation/dwn/json-schemas/records-read.json" */ ; let vErrors = null; let errors = 0; if (errors === 0) {
    if (data && typeof data == "object" && !Array.isArray(data)) {
        let missing0;
        if ((data.descriptor === undefined) && (missing0 = "descriptor")) {
            validate59.errors = [{ instancePath, schemaPath: "#/required", keyword: "required", params: { missingProperty: missing0 }, message: "must have required property '" + missing0 + "'" }];
            return false;
        }
        else {
            const _errs1 = errors;
            for (const key0 in data) {
                if (!((key0 === "authorization") || (key0 === "descriptor"))) {
                    validate59.errors = [{ instancePath, schemaPath: "#/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties" }];
                    return false;
                    break;
                }
            }
            if (_errs1 === errors) {
                if (data.authorization !== undefined) {
                    const _errs2 = errors;
                    if (!(validate10(data.authorization, { instancePath: instancePath + "/authorization", parentData: data, parentDataProperty: "authorization", rootData }))) {
                        vErrors = vErrors === null ? validate10.errors : vErrors.concat(validate10.errors);
                        errors = vErrors.length;
                    }
                    var valid0 = _errs2 === errors;
                }
                else {
                    var valid0 = true;
                }
                if (valid0) {
                    if (data.descriptor !== undefined) {
                        let data1 = data.descriptor;
                        const _errs3 = errors;
                        if (errors === _errs3) {
                            if (data1 && typeof data1 == "object" && !Array.isArray(data1)) {
                                let missing1;
                                if (((((data1.interface === undefined) && (missing1 = "interface")) || ((data1.method === undefined) && (missing1 = "method"))) || ((data1.messageTimestamp === undefined) && (missing1 = "messageTimestamp"))) || ((data1.filter === undefined) && (missing1 = "filter"))) {
                                    validate59.errors = [{ instancePath: instancePath + "/descriptor", schemaPath: "#/properties/descriptor/required", keyword: "required", params: { missingProperty: missing1 }, message: "must have required property '" + missing1 + "'" }];
                                    return false;
                                }
                                else {
                                    const _errs5 = errors;
                                    for (const key1 in data1) {
                                        if (!((((key1 === "interface") || (key1 === "method")) || (key1 === "messageTimestamp")) || (key1 === "filter"))) {
                                            validate59.errors = [{ instancePath: instancePath + "/descriptor", schemaPath: "#/properties/descriptor/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key1 }, message: "must NOT have additional properties" }];
                                            return false;
                                            break;
                                        }
                                    }
                                    if (_errs5 === errors) {
                                        if (data1.interface !== undefined) {
                                            let data2 = data1.interface;
                                            const _errs6 = errors;
                                            if (typeof data2 !== "string") {
                                                validate59.errors = [{ instancePath: instancePath + "/descriptor/interface", schemaPath: "#/properties/descriptor/properties/interface/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                return false;
                                            }
                                            if (!(data2 === "Records")) {
                                                validate59.errors = [{ instancePath: instancePath + "/descriptor/interface", schemaPath: "#/properties/descriptor/properties/interface/enum", keyword: "enum", params: { allowedValues: schema74.properties.descriptor.properties.interface.enum }, message: "must be equal to one of the allowed values" }];
                                                return false;
                                            }
                                            var valid1 = _errs6 === errors;
                                        }
                                        else {
                                            var valid1 = true;
                                        }
                                        if (valid1) {
                                            if (data1.method !== undefined) {
                                                let data3 = data1.method;
                                                const _errs8 = errors;
                                                if (typeof data3 !== "string") {
                                                    validate59.errors = [{ instancePath: instancePath + "/descriptor/method", schemaPath: "#/properties/descriptor/properties/method/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                    return false;
                                                }
                                                if (!(data3 === "Read")) {
                                                    validate59.errors = [{ instancePath: instancePath + "/descriptor/method", schemaPath: "#/properties/descriptor/properties/method/enum", keyword: "enum", params: { allowedValues: schema74.properties.descriptor.properties.method.enum }, message: "must be equal to one of the allowed values" }];
                                                    return false;
                                                }
                                                var valid1 = _errs8 === errors;
                                            }
                                            else {
                                                var valid1 = true;
                                            }
                                            if (valid1) {
                                                if (data1.messageTimestamp !== undefined) {
                                                    const _errs10 = errors;
                                                    if (typeof data1.messageTimestamp !== "string") {
                                                        validate59.errors = [{ instancePath: instancePath + "/descriptor/messageTimestamp", schemaPath: "#/properties/descriptor/properties/messageTimestamp/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                        return false;
                                                    }
                                                    var valid1 = _errs10 === errors;
                                                }
                                                else {
                                                    var valid1 = true;
                                                }
                                                if (valid1) {
                                                    if (data1.filter !== undefined) {
                                                        const _errs12 = errors;
                                                        if (!(validate21(data1.filter, { instancePath: instancePath + "/descriptor/filter", parentData: data1, parentDataProperty: "filter", rootData }))) {
                                                            vErrors = vErrors === null ? validate21.errors : vErrors.concat(validate21.errors);
                                                            errors = vErrors.length;
                                                        }
                                                        var valid1 = _errs12 === errors;
                                                    }
                                                    else {
                                                        var valid1 = true;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            else {
                                validate59.errors = [{ instancePath: instancePath + "/descriptor", schemaPath: "#/properties/descriptor/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
                                return false;
                            }
                        }
                        var valid0 = _errs3 === errors;
                    }
                    else {
                        var valid0 = true;
                    }
                }
            }
        }
    }
    else {
        validate59.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
        return false;
    }
} validate59.errors = vErrors; return errors === 0; }
export const RecordsFilter = validate21;
export const PublicJwk = validate27;
export const GenericSignaturePayload = validate62;
const schema75 = { "$schema": "http://json-schema.org/draft-07/schema#", "$id": "https://identity.foundation/dwn/json-schemas/signature-payloads/generic-signature-payload.json", "type": "object", "additionalProperties": false, "required": ["descriptorCid"], "properties": { "descriptorCid": { "type": "string" }, "permissionsGrantId": { "type": "string" }, "protocolRole": { "$comment": "Used in the Records interface to authorize role-authorized actions for protocol records", "type": "string" } } };
function validate62(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) { /*# sourceURL="https://identity.foundation/dwn/json-schemas/signature-payloads/generic-signature-payload.json" */ ; let vErrors = null; let errors = 0; if (errors === 0) {
    if (data && typeof data == "object" && !Array.isArray(data)) {
        let missing0;
        if ((data.descriptorCid === undefined) && (missing0 = "descriptorCid")) {
            validate62.errors = [{ instancePath, schemaPath: "#/required", keyword: "required", params: { missingProperty: missing0 }, message: "must have required property '" + missing0 + "'" }];
            return false;
        }
        else {
            const _errs1 = errors;
            for (const key0 in data) {
                if (!(((key0 === "descriptorCid") || (key0 === "permissionsGrantId")) || (key0 === "protocolRole"))) {
                    validate62.errors = [{ instancePath, schemaPath: "#/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties" }];
                    return false;
                    break;
                }
            }
            if (_errs1 === errors) {
                if (data.descriptorCid !== undefined) {
                    const _errs2 = errors;
                    if (typeof data.descriptorCid !== "string") {
                        validate62.errors = [{ instancePath: instancePath + "/descriptorCid", schemaPath: "#/properties/descriptorCid/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                        return false;
                    }
                    var valid0 = _errs2 === errors;
                }
                else {
                    var valid0 = true;
                }
                if (valid0) {
                    if (data.permissionsGrantId !== undefined) {
                        const _errs4 = errors;
                        if (typeof data.permissionsGrantId !== "string") {
                            validate62.errors = [{ instancePath: instancePath + "/permissionsGrantId", schemaPath: "#/properties/permissionsGrantId/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                            return false;
                        }
                        var valid0 = _errs4 === errors;
                    }
                    else {
                        var valid0 = true;
                    }
                    if (valid0) {
                        if (data.protocolRole !== undefined) {
                            const _errs6 = errors;
                            if (typeof data.protocolRole !== "string") {
                                validate62.errors = [{ instancePath: instancePath + "/protocolRole", schemaPath: "#/properties/protocolRole/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                return false;
                            }
                            var valid0 = _errs6 === errors;
                        }
                        else {
                            var valid0 = true;
                        }
                    }
                }
            }
        }
    }
    else {
        validate62.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
        return false;
    }
} validate62.errors = vErrors; return errors === 0; }
export const RecordsWriteSignaturePayload = validate63;
const schema76 = { "$schema": "http://json-schema.org/draft-07/schema#", "$id": "https://identity.foundation/dwn/json-schemas/signature-payloads/records-write-author-signature-payload.json", "type": "object", "additionalProperties": false, "required": ["descriptorCid", "recordId"], "properties": { "descriptorCid": { "type": "string" }, "recordId": { "type": "string" }, "contextId": { "type": "string" }, "attestationCid": { "type": "string" }, "encryptionCid": { "type": "string" }, "permissionsGrantId": { "type": "string" }, "protocolRole": { "type": "string" } } };
function validate63(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) { /*# sourceURL="https://identity.foundation/dwn/json-schemas/signature-payloads/records-write-author-signature-payload.json" */ ; let vErrors = null; let errors = 0; if (errors === 0) {
    if (data && typeof data == "object" && !Array.isArray(data)) {
        let missing0;
        if (((data.descriptorCid === undefined) && (missing0 = "descriptorCid")) || ((data.recordId === undefined) && (missing0 = "recordId"))) {
            validate63.errors = [{ instancePath, schemaPath: "#/required", keyword: "required", params: { missingProperty: missing0 }, message: "must have required property '" + missing0 + "'" }];
            return false;
        }
        else {
            const _errs1 = errors;
            for (const key0 in data) {
                if (!(((((((key0 === "descriptorCid") || (key0 === "recordId")) || (key0 === "contextId")) || (key0 === "attestationCid")) || (key0 === "encryptionCid")) || (key0 === "permissionsGrantId")) || (key0 === "protocolRole"))) {
                    validate63.errors = [{ instancePath, schemaPath: "#/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties" }];
                    return false;
                    break;
                }
            }
            if (_errs1 === errors) {
                if (data.descriptorCid !== undefined) {
                    const _errs2 = errors;
                    if (typeof data.descriptorCid !== "string") {
                        validate63.errors = [{ instancePath: instancePath + "/descriptorCid", schemaPath: "#/properties/descriptorCid/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                        return false;
                    }
                    var valid0 = _errs2 === errors;
                }
                else {
                    var valid0 = true;
                }
                if (valid0) {
                    if (data.recordId !== undefined) {
                        const _errs4 = errors;
                        if (typeof data.recordId !== "string") {
                            validate63.errors = [{ instancePath: instancePath + "/recordId", schemaPath: "#/properties/recordId/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                            return false;
                        }
                        var valid0 = _errs4 === errors;
                    }
                    else {
                        var valid0 = true;
                    }
                    if (valid0) {
                        if (data.contextId !== undefined) {
                            const _errs6 = errors;
                            if (typeof data.contextId !== "string") {
                                validate63.errors = [{ instancePath: instancePath + "/contextId", schemaPath: "#/properties/contextId/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                return false;
                            }
                            var valid0 = _errs6 === errors;
                        }
                        else {
                            var valid0 = true;
                        }
                        if (valid0) {
                            if (data.attestationCid !== undefined) {
                                const _errs8 = errors;
                                if (typeof data.attestationCid !== "string") {
                                    validate63.errors = [{ instancePath: instancePath + "/attestationCid", schemaPath: "#/properties/attestationCid/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                    return false;
                                }
                                var valid0 = _errs8 === errors;
                            }
                            else {
                                var valid0 = true;
                            }
                            if (valid0) {
                                if (data.encryptionCid !== undefined) {
                                    const _errs10 = errors;
                                    if (typeof data.encryptionCid !== "string") {
                                        validate63.errors = [{ instancePath: instancePath + "/encryptionCid", schemaPath: "#/properties/encryptionCid/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                        return false;
                                    }
                                    var valid0 = _errs10 === errors;
                                }
                                else {
                                    var valid0 = true;
                                }
                                if (valid0) {
                                    if (data.permissionsGrantId !== undefined) {
                                        const _errs12 = errors;
                                        if (typeof data.permissionsGrantId !== "string") {
                                            validate63.errors = [{ instancePath: instancePath + "/permissionsGrantId", schemaPath: "#/properties/permissionsGrantId/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                            return false;
                                        }
                                        var valid0 = _errs12 === errors;
                                    }
                                    else {
                                        var valid0 = true;
                                    }
                                    if (valid0) {
                                        if (data.protocolRole !== undefined) {
                                            const _errs14 = errors;
                                            if (typeof data.protocolRole !== "string") {
                                                validate63.errors = [{ instancePath: instancePath + "/protocolRole", schemaPath: "#/properties/protocolRole/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                return false;
                                            }
                                            var valid0 = _errs14 === errors;
                                        }
                                        else {
                                            var valid0 = true;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    else {
        validate63.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
        return false;
    }
} validate63.errors = vErrors; return errors === 0; }
//# sourceMappingURL=precompiled-validators.js.map