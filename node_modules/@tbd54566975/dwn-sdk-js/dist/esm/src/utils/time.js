var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { Temporal } from '@js-temporal/polyfill';
/**
 * sleeps for the desired duration
 * @param durationInMillisecond the desired amount of sleep time
 * @returns when the provided duration has passed
 */
export function sleep(durationInMillisecond) {
    return new Promise(resolve => setTimeout(resolve, durationInMillisecond));
}
/**
 * returns an UTC ISO-8601 timestamp with microsecond precision
 * using @js-temporal/polyfill
 */
export function getCurrentTimeInHighPrecision() {
    return Temporal.Now.instant().toString({ smallestUnit: 'microseconds' });
}
/**
 * We must sleep for at least 2ms to avoid timestamp collisions during testing.
 * https://github.com/TBD54566975/dwn-sdk-js/issues/481
 */
export function minimalSleep() {
    return __awaiter(this, void 0, void 0, function* () {
        yield sleep(2);
    });
}
//# sourceMappingURL=time.js.map