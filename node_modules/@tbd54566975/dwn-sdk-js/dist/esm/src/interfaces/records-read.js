var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { getCurrentTimeInHighPrecision } from '../utils/time.js';
import { Message } from '../core/message.js';
import { ProtocolAuthorization } from '../core/protocol-authorization.js';
import { validateAuthorizationIntegrity } from '../core/auth.js';
import { DwnInterfaceName, DwnMethodName } from '../core/message.js';
export class RecordsRead extends Message {
    static parse(message) {
        return __awaiter(this, void 0, void 0, function* () {
            if (message.authorization !== undefined) {
                yield validateAuthorizationIntegrity(message);
            }
            const recordsRead = new RecordsRead(message);
            return recordsRead;
        });
    }
    /**
     * Creates a RecordsRead message.
     * @param options.recordId If `undefined`, will be auto-filled as a originating message as convenience for developer.
     * @param options.date If `undefined`, it will be auto-filled with current time.
     */
    static create(options) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const { recordId, authorizationSignatureInput } = options;
            const currentTime = getCurrentTimeInHighPrecision();
            const descriptor = {
                interface: DwnInterfaceName.Records,
                method: DwnMethodName.Read,
                recordId,
                messageTimestamp: (_a = options.date) !== null && _a !== void 0 ? _a : currentTime
            };
            // only generate the `authorization` property if signature input is given
            const authorization = authorizationSignatureInput ? yield Message.signAsAuthorization(descriptor, authorizationSignatureInput) : undefined;
            const message = { descriptor, authorization };
            Message.validateJsonSchema(message);
            return new RecordsRead(message);
        });
    }
    authorize(tenant, newestRecordsWrite, messageStore) {
        return __awaiter(this, void 0, void 0, function* () {
            const { descriptor } = newestRecordsWrite.message;
            // if author is the same as the target tenant, we can directly grant access
            if (this.author === tenant) {
                return;
            }
            else if (descriptor.published === true) {
                // authentication is not required for published data
                return;
            }
            else if (this.author !== undefined && this.author === descriptor.recipient) {
                // The recipient of a message may always read it
                return;
            }
            else if (descriptor.protocol !== undefined) {
                yield ProtocolAuthorization.authorize(tenant, this, this.author, messageStore);
            }
            else {
                throw new Error('message failed authorization');
            }
        });
    }
}
//# sourceMappingURL=records-read.js.map