var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { getCurrentTimeInHighPrecision } from '../utils/time.js';
import { Message } from '../core/message.js';
import { removeUndefinedProperties } from '../utils/object.js';
import { validateAuthorizationIntegrity } from '../core/auth.js';
import { DwnInterfaceName, DwnMethodName } from '../core/message.js';
import { normalizeProtocolUrl, normalizeSchemaUrl, validateProtocolUrlNormalized, validateSchemaUrlNormalized } from '../utils/url.js';
export var DateSort;
(function (DateSort) {
    DateSort["CreatedAscending"] = "createdAscending";
    DateSort["CreatedDescending"] = "createdDescending";
    DateSort["PublishedAscending"] = "publishedAscending";
    DateSort["PublishedDescending"] = "publishedDescending";
})(DateSort || (DateSort = {}));
export class RecordsQuery extends Message {
    static parse(message) {
        return __awaiter(this, void 0, void 0, function* () {
            if (message.authorization !== undefined) {
                yield validateAuthorizationIntegrity(message);
            }
            if (message.descriptor.filter.protocol !== undefined) {
                validateProtocolUrlNormalized(message.descriptor.filter.protocol);
            }
            if (message.descriptor.filter.schema !== undefined) {
                validateSchemaUrlNormalized(message.descriptor.filter.schema);
            }
            return new RecordsQuery(message);
        });
    }
    static create(options) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const descriptor = {
                interface: DwnInterfaceName.Records,
                method: DwnMethodName.Query,
                messageTimestamp: (_a = options.messageTimestamp) !== null && _a !== void 0 ? _a : getCurrentTimeInHighPrecision(),
                filter: RecordsQuery.normalizeFilter(options.filter),
                dateSort: options.dateSort
            };
            // delete all descriptor properties that are `undefined` else the code will encounter the following IPLD issue when attempting to generate CID:
            // Error: `undefined` is not supported by the IPLD Data Model and cannot be encoded
            removeUndefinedProperties(descriptor);
            // only generate the `authorization` property if signature input is given
            const authorizationSignatureInput = options.authorizationSignatureInput;
            const authorization = authorizationSignatureInput ? yield Message.signAsAuthorization(descriptor, authorizationSignatureInput) : undefined;
            const message = { descriptor, authorization };
            Message.validateJsonSchema(message);
            return new RecordsQuery(message);
        });
    }
    static convertFilter(filter) {
        const filterCopy = Object.assign({}, filter);
        const { dateCreated } = filterCopy;
        let rangeFilter = undefined;
        if (dateCreated !== undefined) {
            if (dateCreated.to !== undefined && dateCreated.from !== undefined) {
                rangeFilter = {
                    gte: dateCreated.from,
                    lt: dateCreated.to,
                };
            }
            else if (dateCreated.to !== undefined) {
                rangeFilter = {
                    lt: dateCreated.to,
                };
            }
            else if (dateCreated.from !== undefined) {
                rangeFilter = {
                    gte: dateCreated.from,
                };
            }
        }
        if (rangeFilter) {
            filterCopy.dateCreated = rangeFilter;
        }
        return filterCopy;
    }
    static normalizeFilter(filter) {
        let protocol;
        if (filter.protocol === undefined) {
            protocol = undefined;
        }
        else {
            protocol = normalizeProtocolUrl(filter.protocol);
        }
        let schema;
        if (filter.schema === undefined) {
            schema = undefined;
        }
        else {
            schema = normalizeSchemaUrl(filter.schema);
        }
        return Object.assign(Object.assign({}, filter), { protocol,
            schema });
    }
}
//# sourceMappingURL=records-query.js.map