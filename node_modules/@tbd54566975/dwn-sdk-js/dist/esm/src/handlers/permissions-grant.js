var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { authenticate } from '../core/auth.js';
import { Message } from '../core/message.js';
import { messageReplyFromError } from '../core/message-reply.js';
import { PermissionsGrant } from '../interfaces/permissions-grant.js';
export class PermissionsGrantHandler {
    constructor(didResolver, messageStore, eventLog) {
        this.didResolver = didResolver;
        this.messageStore = messageStore;
        this.eventLog = eventLog;
    }
    handle({ tenant, message }) {
        return __awaiter(this, void 0, void 0, function* () {
            let permissionsGrant;
            try {
                permissionsGrant = yield PermissionsGrant.parse(message);
            }
            catch (e) {
                return messageReplyFromError(e, 400);
            }
            try {
                yield authenticate(message.authorization, this.didResolver);
                yield permissionsGrant.authorize();
            }
            catch (e) {
                return messageReplyFromError(e, 401);
            }
            const _a = message.descriptor, { scope, conditions } = _a, propertiesToIndex = __rest(_a, ["scope", "conditions"]);
            const indexes = Object.assign({ author: permissionsGrant.author }, propertiesToIndex);
            // If we have not seen this message before, store it
            const messageCid = yield Message.getCid(message);
            const existingMessage = yield this.messageStore.get(tenant, messageCid);
            if (existingMessage === undefined) {
                yield this.messageStore.put(tenant, message, indexes);
                yield this.eventLog.append(tenant, messageCid);
            }
            return {
                status: { code: 202, detail: 'Accepted' }
            };
        });
    }
}
//# sourceMappingURL=permissions-grant.js.map