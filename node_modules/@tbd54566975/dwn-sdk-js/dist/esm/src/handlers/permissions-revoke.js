var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { authenticate } from '../core/auth.js';
import { Message } from '../core/message.js';
import { messageReplyFromError } from '../core/message-reply.js';
import { PermissionsRevoke } from '../interfaces/permissions-revoke.js';
import { DwnInterfaceName, DwnMethodName } from '../enums/dwn-interface-method.js';
export class PermissionsRevokeHandler {
    constructor(didResolver, messageStore, eventLog) {
        this.didResolver = didResolver;
        this.messageStore = messageStore;
        this.eventLog = eventLog;
    }
    handle({ tenant, message }) {
        return __awaiter(this, void 0, void 0, function* () {
            let permissionsRevoke;
            try {
                permissionsRevoke = yield PermissionsRevoke.parse(message);
            }
            catch (e) {
                return messageReplyFromError(e, 400);
            }
            // Authentication
            try {
                yield authenticate(message.authorization, this.didResolver);
            }
            catch (e) {
                return messageReplyFromError(e, 401);
            }
            // Authorization
            const permissionsGrantId = message.descriptor.permissionsGrantId;
            const permissionsGrantMessage = yield this.messageStore.get(tenant, permissionsGrantId);
            if (permissionsGrantMessage === undefined) {
                return {
                    status: {
                        code: 400,
                        detail: `Could not find PermissionsGrant with CID ${permissionsGrantId}`
                    }
                };
            }
            try {
                yield permissionsRevoke.authorize(permissionsGrantMessage);
            }
            catch (e) {
                return messageReplyFromError(e, 401);
            }
            // Revoke must have `dateCreated` after that of the grant
            if (message.descriptor.messageTimestamp < permissionsGrantMessage.descriptor.messageTimestamp) {
                return {
                    status: { code: 400, detail: 'PermissionsRevoke has earlier date than associated PermissionsGrant' }
                };
            }
            // query for previous revocations of this grant
            const query = {
                interface: DwnInterfaceName.Permissions,
                method: DwnMethodName.Revoke,
                permissionsGrantId,
            };
            const { messages: existingRevokesForGrant } = yield this.messageStore.query(tenant, [query]);
            // Conflict 409 if the grant already has an older revoke
            const oldestExistingRevoke = yield Message.getOldestMessage(existingRevokesForGrant);
            if (oldestExistingRevoke !== undefined) {
                if (yield Message.isOlder(message, oldestExistingRevoke)) {
                    // incoming revoke is older then existing revoke, proceed
                }
                else {
                    // existing revoke is older then incoming revoke, ignore incoming
                    return {
                        status: { code: 409, detail: 'Conflict' }
                    };
                }
            }
            // Store incoming PermissionsRevoke
            const indexes = {
                interface: DwnInterfaceName.Permissions,
                method: DwnMethodName.Revoke,
                permissionsGrantId: message.descriptor.permissionsGrantId,
            };
            yield this.messageStore.put(tenant, message, indexes);
            yield this.eventLog.append(tenant, yield Message.getCid(message));
            // Delete existing revokes which are all newer than the incoming message
            const removedRevokeCids = [];
            for (const existingRevoke of existingRevokesForGrant) {
                const existingRevokeCid = yield Message.getCid(existingRevoke);
                yield this.messageStore.delete(tenant, existingRevokeCid);
                removedRevokeCids.push(existingRevokeCid);
            }
            yield this.eventLog.deleteEventsByCid(tenant, removedRevokeCids);
            // Delete grant-authorized messages with timestamp after revocation
            const grantAuthdMessagesQuery = {
                permissionsGrantId,
                dateCreated: { gte: message.descriptor.messageTimestamp },
            };
            const { messages: grantAuthdMessagesAfterRevoke } = yield this.messageStore.query(tenant, [grantAuthdMessagesQuery]);
            const grantAuthdMessageCidsAfterRevoke = [];
            for (const grantAuthdMessage of grantAuthdMessagesAfterRevoke) {
                const messageCid = yield Message.getCid(grantAuthdMessage);
                yield this.messageStore.delete(tenant, messageCid);
            }
            this.eventLog.deleteEventsByCid(tenant, grantAuthdMessageCidsAfterRevoke);
            return {
                status: { code: 202, detail: 'Accepted' }
            };
        });
    }
}
//# sourceMappingURL=permissions-revoke.js.map