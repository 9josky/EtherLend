var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { authenticate } from '../core/auth.js';
import { Message } from '../core/message.js';
import { messageReplyFromError } from '../core/message-reply.js';
import { RecordsRead } from '../interfaces/records-read.js';
import { RecordsWrite } from '../interfaces/records-write.js';
import { DwnInterfaceName, DwnMethodName } from '../core/message.js';
export class RecordsReadHandler {
    constructor(didResolver, messageStore, dataStore) {
        this.didResolver = didResolver;
        this.messageStore = messageStore;
        this.dataStore = dataStore;
    }
    handle({ tenant, message }) {
        return __awaiter(this, void 0, void 0, function* () {
            let recordsRead;
            try {
                recordsRead = yield RecordsRead.parse(message);
            }
            catch (e) {
                return messageReplyFromError(e, 400);
            }
            // authentication
            try {
                if (recordsRead.author !== undefined) {
                    yield authenticate(message.authorization, this.didResolver);
                }
            }
            catch (e) {
                return messageReplyFromError(e, 401);
            }
            // get existing messages matching `recordId` so we can perform authorization
            const query = {
                interface: DwnInterfaceName.Records,
                recordId: message.descriptor.recordId
            };
            const existingMessages = yield this.messageStore.query(tenant, query);
            const newestExistingMessage = yield Message.getNewestMessage(existingMessages);
            // if no record found or it has been deleted
            if (newestExistingMessage === undefined || newestExistingMessage.descriptor.method === DwnMethodName.Delete) {
                return {
                    status: { code: 404, detail: 'Not Found' }
                };
            }
            const newestRecordsWrite = newestExistingMessage;
            try {
                yield recordsRead.authorize(tenant, yield RecordsWrite.parse(newestRecordsWrite), this.messageStore);
            }
            catch (error) {
                return messageReplyFromError(error, 401);
            }
            const messageCid = yield Message.getCid(newestRecordsWrite);
            const result = yield this.dataStore.get(tenant, messageCid, newestRecordsWrite.descriptor.dataCid);
            if ((result === null || result === void 0 ? void 0 : result.dataStream) === undefined) {
                return {
                    status: { code: 404, detail: 'Not Found' }
                };
            }
            const { authorization: _ } = newestRecordsWrite, recordsWriteWithoutAuthorization = __rest(newestRecordsWrite, ["authorization"]); // a trick to stripping away `authorization`
            const messageReply = {
                status: { code: 200, detail: 'OK' },
                record: Object.assign(Object.assign({}, recordsWriteWithoutAuthorization), { data: result.dataStream })
            };
            return messageReply;
        });
    }
    ;
}
//# sourceMappingURL=records-read.js.map