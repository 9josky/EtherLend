var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { authenticate } from '../core/auth.js';
import { DwnInterfaceName } from '../core/message.js';
import { Message } from '../core/message.js';
import { messageReplyFromError } from '../core/message-reply.js';
import { Records } from '../utils/records.js';
import { RecordsRead } from '../interfaces/records-read.js';
import { RecordsWrite } from '../interfaces/records-write.js';
import { DataStream, DwnError, DwnErrorCode, Encoder } from '../index.js';
export class RecordsReadHandler {
    constructor(didResolver, messageStore, dataStore) {
        this.didResolver = didResolver;
        this.messageStore = messageStore;
        this.dataStore = dataStore;
    }
    handle({ tenant, message }) {
        return __awaiter(this, void 0, void 0, function* () {
            let recordsRead;
            try {
                recordsRead = yield RecordsRead.parse(message);
            }
            catch (e) {
                return messageReplyFromError(e, 400);
            }
            // authentication
            try {
                if (recordsRead.author !== undefined) {
                    yield authenticate(message.authorization, this.didResolver);
                }
            }
            catch (e) {
                return messageReplyFromError(e, 401);
            }
            // get the latest active messages matching the supplied filter
            // only RecordsWrite messages will be returned due to 'isLatestBaseState' being set to true.
            const query = Object.assign({ interface: DwnInterfaceName.Records, isLatestBaseState: true }, Records.convertFilter(message.descriptor.filter));
            const { messages: existingMessages } = yield this.messageStore.query(tenant, [query]);
            if (existingMessages.length === 0) {
                return {
                    status: { code: 404, detail: 'Not Found' }
                };
            }
            else if (existingMessages.length > 1) {
                return messageReplyFromError(new DwnError(DwnErrorCode.RecordsReadReturnedMultiple, 'Multiple records exist for the RecordsRead filter'), 400);
            }
            const newestRecordsWrite = existingMessages[0];
            try {
                yield recordsRead.authorize(tenant, yield RecordsWrite.parse(newestRecordsWrite), this.messageStore);
            }
            catch (error) {
                return messageReplyFromError(error, 401);
            }
            let data;
            if (newestRecordsWrite.encodedData !== undefined) {
                const dataBytes = Encoder.base64UrlToBytes(newestRecordsWrite.encodedData);
                data = DataStream.fromBytes(dataBytes);
                delete newestRecordsWrite.encodedData;
            }
            else {
                const messageCid = yield Message.getCid(newestRecordsWrite);
                const result = yield this.dataStore.get(tenant, messageCid, newestRecordsWrite.descriptor.dataCid);
                if ((result === null || result === void 0 ? void 0 : result.dataStream) === undefined) {
                    return {
                        status: { code: 404, detail: 'Not Found' }
                    };
                }
                data = result.dataStream;
            }
            const messageReply = {
                status: { code: 200, detail: 'OK' },
                record: Object.assign(Object.assign({}, newestRecordsWrite), { data })
            };
            return messageReply;
        });
    }
    ;
}
//# sourceMappingURL=records-read.js.map