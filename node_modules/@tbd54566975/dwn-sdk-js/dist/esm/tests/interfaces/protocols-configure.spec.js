var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import chaiAsPromised from 'chai-as-promised';
import chai, { expect } from 'chai';
import dexProtocolDefinition from '../vectors/protocol-definitions/dex.json' assert { type: 'json' };
import { getCurrentTimeInHighPrecision } from '../../src/utils/time.js';
import { Jws } from '../../src/utils/jws.js';
import { ProtocolsConfigure } from '../../src/interfaces/protocols-configure.js';
import { TestDataGenerator } from '../utils/test-data-generator.js';
chai.use(chaiAsPromised);
describe('ProtocolsConfigure', () => {
    describe('create()', () => {
        it('should use `messageTimestamp` as is if given', () => __awaiter(void 0, void 0, void 0, function* () {
            const alice = yield TestDataGenerator.generatePersona();
            const currentTime = getCurrentTimeInHighPrecision();
            const definition = Object.assign({}, dexProtocolDefinition);
            const protocolsConfigure = yield ProtocolsConfigure.create({
                messageTimestamp: currentTime,
                definition,
                authorizationSignatureInput: Jws.createSignatureInput(alice),
            });
            expect(protocolsConfigure.message.descriptor.messageTimestamp).to.equal(currentTime);
        }));
        it('should auto-normalize protocol URI', () => __awaiter(void 0, void 0, void 0, function* () {
            const alice = yield TestDataGenerator.generatePersona();
            const definition = Object.assign(Object.assign({}, dexProtocolDefinition), { protocol: 'example.com/' });
            const options = {
                recipient: alice.did,
                data: TestDataGenerator.randomBytes(10),
                dataFormat: 'application/json',
                authorizationSignatureInput: Jws.createSignatureInput(alice),
                definition,
            };
            const protocolsConfig = yield ProtocolsConfigure.create(options);
            const message = protocolsConfig.message;
            expect(message.descriptor.definition.protocol).to.eq('http://example.com');
        }));
        it('should auto-normalize schema URIs', () => __awaiter(void 0, void 0, void 0, function* () {
            const alice = yield TestDataGenerator.generatePersona();
            const nonnormalizedDexProtocol = Object.assign({}, dexProtocolDefinition);
            nonnormalizedDexProtocol.types.ask.schema = 'ask';
            const options = {
                recipient: alice.did,
                data: TestDataGenerator.randomBytes(10),
                dataFormat: 'application/json',
                authorizationSignatureInput: Jws.createSignatureInput(alice),
                protocol: 'example.com/',
                definition: nonnormalizedDexProtocol
            };
            const protocolsConfig = yield ProtocolsConfigure.create(options);
            const message = protocolsConfig.message;
            expect(message.descriptor.definition.types.ask.schema).to.eq('http://ask');
        }));
    });
});
//# sourceMappingURL=protocols-configure.spec.js.map