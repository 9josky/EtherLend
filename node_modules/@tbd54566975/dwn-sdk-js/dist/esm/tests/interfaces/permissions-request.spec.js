var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import chai from 'chai';
import chaiAsPromised from 'chai-as-promised';
import { expect } from 'chai';
import { PermissionsRequest } from '../../src/interfaces/permissions-request.js';
import { Secp256k1 } from '../../src/utils/secp256k1.js';
import { DwnInterfaceName, DwnMethodName, PrivateKeySigner } from '../../src/index.js';
chai.use(chaiAsPromised);
describe('PermissionsRequest', () => {
    describe('create', () => {
        it('creates a PermissionsRequest message', () => __awaiter(void 0, void 0, void 0, function* () {
            const { privateJwk } = yield Secp256k1.generateKeyPair();
            const authorizationSigner = new PrivateKeySigner({ privateJwk, keyId: 'did:jank:bob' });
            const { message } = yield PermissionsRequest.create({
                description: 'drugs',
                grantedBy: 'did:jank:bob',
                grantedTo: 'did:jank:alice',
                grantedFor: 'did:jank:bob',
                scope: {
                    interface: DwnInterfaceName.Records,
                    method: DwnMethodName.Write,
                    protocol: 'some-protocol',
                },
                authorizationSigner
            });
            expect(message.descriptor.grantedTo).to.equal('did:jank:alice');
            expect(message.descriptor.grantedBy).to.equal('did:jank:bob');
            expect(message.descriptor.scope).to.eql({ interface: DwnInterfaceName.Records, method: DwnMethodName.Write, protocol: 'some-protocol', });
            expect(message.descriptor.conditions).to.be.undefined;
            expect(message.descriptor.description).to.eql('drugs');
        }));
    });
});
//# sourceMappingURL=permissions-request.spec.js.map